package io.intino.goros.modernizing.monet.renderers.templates.java;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class SetDefinitionTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(all(allTypes("show", "items"), trigger("declaration"))));
		rules.add(rule().condition(all(allTypes("show", "index"), trigger("declaration"))).output(literal("private Node selectedChild;")));
		rules.add(rule().condition(allTypes("show", "sharedprototypes")));
		rules.add(rule().condition(allTypes("show", "report")));
		rules.add(rule().condition(all(allTypes("show"), trigger("declaration"))));
		rules.add(rule().condition(all(allTypes("show"), trigger("hidetoolbar"))));
		rules.add(rule().condition(allTypes("show", "index", "locations")).output(literal("public void addAndSelect(Node node) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".insert(")).output(placeholder("datasourceAddType")).output(literal(", 0);\n    select(node);\n}\n\npublic void select(Node node) {\n    io.intino.goros.unit.util.DisplayHelper.executeDelayed(b -> ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".select(")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".findItem(n -> matches(n, node.getId()))), 800);\n}\n\npublic void selectSorting(String sorting, String mode) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".sortings(sorting != null ? java.util.Collections.singletonList(io.intino.goros.unit.util.NodeHelper.sortingOf(sorting, mode)) : java.util.Collections.emptyList());\n}\n\npublic void refresh(Node node) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".refresh(")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".findItem(n -> matches(n, node.getId())), node);\n}\n\n@Override\npublic void init() {\n    super.init();\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".onAddItem(e -> {\n        ")).output(placeholder("itemType")).output(literal("\n        org.monet.space.kernel.model.Reference reference = node.getReference(\"")).output(placeholder("reference")).output(literal("\");\n        ")).output(placeholder("componentType")).output(literal("\n        ")).output(expression().output(placeholder("attribute").multiple("\n"))).output(literal("\n    });\n}\n\n@Override\npublic void refresh() {\n    super.refresh();\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".allowMultiSelection(!readonly);\n    if (")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source() == null) ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source(new io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal("(box().unit(), session(), node, view));\n    else {\n        ((io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal(")")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source()).node(node);\n        ((io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal(")")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source()).view(view);\n        ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".reload();\n    }\n}\n\npublic boolean matches(Object node, String id) {\n    if (node instanceof String) return node.equals(id);\n    if (node instanceof Node) return ((Node<?>)node).getId().equals(id);\n    return false;\n}")));
		rules.add(rule().condition(allTypes("show", "index")).output(literal("public void addAndSelect(Node node) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".insert(")).output(placeholder("datasourceAddType")).output(literal(", 0);\n    select(node);\n}\n\npublic void select(Node node) {\n    io.intino.goros.unit.util.DisplayHelper.executeDelayed(b -> ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".select(")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".findItem(n -> matches(n, node.getId()))), 800);\n}\n\npublic void selectSorting(String sorting, String mode) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".sortings(sorting != null ? java.util.Collections.singletonList(io.intino.goros.unit.util.NodeHelper.sortingOf(sorting, mode)) : java.util.Collections.emptyList());\n}\n\npublic void refresh(Node node) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".refresh(")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".findItem(n -> matches(n, node.getId())), node);\n}\n\n@Override\npublic void init() {\n    super.init();\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".onAddItem(e -> {\n        ")).output(placeholder("itemType")).output(literal("\n        org.monet.space.kernel.model.Reference reference = node.getReference(\"")).output(placeholder("reference")).output(literal("\");\n        ")).output(placeholder("componentType")).output(literal("\n        ")).output(expression().output(placeholder("picture"))).output(literal("\n        ")).output(expression().output(placeholder("title"))).output(literal("\n        ")).output(expression().output(placeholder("line").multiple("\n"))).output(literal("\n        ")).output(expression().output(placeholder("highlight").multiple("\n"))).output(literal("\n    });\n}\n\n@Override\npublic void refresh() {\n    super.refresh();\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".allowMultiSelection(!readonly);\n    if (")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source() == null) ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source(new io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal("(box().unit(), session(), node, view));\n    else {\n        ((io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal(")")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source()).node(node);\n        ((io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal(")")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source()).view(view);\n        ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".reload();\n    }\n}\n\nprivate void refreshDetailsDialog(Node node) {\n    this.selectedChild = node;\n    refreshDetailsDialog();\n}\n\nprivate void refreshDetailsDialog() {\n    org.monet.space.kernel.model.Reference reference = selectedChild.getReference(\"")).output(placeholder("reference")).output(literal("\");\n    ")).output(expression().output(placeholder("title", "details"))).output(literal("\n    ")).output(expression().output(placeholder("lineBelow").multiple("\n"))).output(literal("\n    ")).output(expression().output(placeholder("footer").multiple("\n"))).output(literal("\n}\n\npublic boolean matches(Object node, String id) {\n    if (node instanceof String) return node.equals(id);\n    if (node instanceof Node) return ((Node<?>)node).getId().equals(id);\n    return false;\n}")));
		rules.add(rule().condition(allTypes("show")).output(literal("public void addAndSelect(Node node) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".insert(")).output(placeholder("datasourceAddType")).output(literal(", 0);\n    select(node);\n}\n\npublic void select(Node node) {\n    io.intino.goros.unit.util.DisplayHelper.executeDelayed(b -> ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".select(")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".findItem(n -> matches(n, node.getId()))), 800);\n}\n\npublic void selectSorting(String sorting, String mode) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".sortings(sorting != null ? java.util.Collections.singletonList(io.intino.goros.unit.util.NodeHelper.sortingOf(sorting, mode)) : java.util.Collections.emptyList());\n}\n\npublic void refresh(Node node) {\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".refresh(")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".findItem(n -> matches(n, node.getId())), node);\n}\n\n@Override\npublic void init() {\n    super.init();\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".onAddItem(e -> {\n        ")).output(placeholder("itemType")).output(literal("\n        org.monet.space.kernel.model.Reference reference = node.getReference(\"")).output(placeholder("reference")).output(literal("\");\n        ")).output(placeholder("componentType")).output(literal("\n        ")).output(expression().output(placeholder("attribute").multiple("\n"))).output(literal("\n    });\n}\n\n@Override\npublic void refresh() {\n    super.refresh();\n    ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".allowMultiSelection(!readonly);\n    if (")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source() == null) ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source(new io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal("(box().unit(), session(), node, view));\n    else {\n        ((io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal(")")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source()).node(node);\n        ((io.intino.goros.unit.box.ui.datasources.")).output(placeholder("datasourceType")).output(literal(")")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".source()).view(view);\n        ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".reload();\n    }\n}\n\npublic boolean matches(Object node, String id) {\n    if (node instanceof String) return node.equals(id);\n    if (node instanceof Node) return ((Node<?>)node).getId().equals(id);\n    return false;\n}")));
		rules.add(rule().condition(allTypes("datasourceAddType", "map")).output(literal("io.intino.goros.unit.box.ui.datasources.CollectionMapDatasource.placeMarkOf(node)")));
		rules.add(rule().condition(allTypes("datasourceAddType")).output(literal("node")));
		rules.add(rule().condition(allTypes("itemType", "locations")).output(literal("Node node = io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(e.item());")));
		rules.add(rule().condition(allTypes("itemType")).output(literal("Node node = e.item();")));
		rules.add(rule().condition(allTypes("componentType", "items")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.rows.")).output(placeholder("definition", "firstUpperCase")).output(placeholder("view", "firstUpperCase")).output(literal("Row row = e.component();")));
		rules.add(rule().condition(allTypes("componentType", "index")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.items.")).output(placeholder("definition", "firstUpperCase")).output(placeholder("view", "firstUpperCase")).output(literal("Item item = e.component();\nitem.detailsTrigger.bindTo(detailsDialog);\nitem.detailsTrigger.onOpen(e1 -> refreshDetailsDialog(node));")));
		rules.add(rule().condition(allTypes("componentType")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.items.")).output(placeholder("definition", "firstUpperCase")).output(placeholder("view", "firstUpperCase")).output(literal("Item item = e.component();")));
		rules.add(rule().condition(allTypes("attribute", "items", "date")).output(literal("row.")).output(placeholder("shortName", "firstLowerCase")).output(literal("Item.")).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.instantOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\"));")));
		rules.add(rule().condition(allTypes("attribute", "items", "picture")).output(literal("row.")).output(placeholder("shortName", "firstLowerCase")).output(literal("Item.")).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.spaceUrlOf(io.intino.goros.unit.util.NodeHelper.urlOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\", true), soul().baseAssetUrl()));")));
		rules.add(rule().condition(allTypes("attribute", "items")).output(literal("row.")).output(placeholder("shortName", "firstLowerCase")).output(literal("Item.")).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.valueOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\"));")));
		rules.add(rule().condition(allTypes("attribute", "date")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.instantOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\"));")));
		rules.add(rule().condition(allTypes("attribute", "icon")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".icon(io.intino.goros.unit.util.NodeHelper.spaceUrlOf(io.intino.goros.unit.util.NodeHelper.urlOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\", true), soul().baseAssetUrl()));")));
		rules.add(rule().condition(allTypes("attribute", "picture")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.spaceUrlOf(io.intino.goros.unit.util.NodeHelper.urlOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\", true), soul().baseAssetUrl()));")));
		rules.add(rule().condition(allTypes("attribute", "real")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.numberOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\"));")));
		rules.add(rule().condition(allTypes("attribute", "integer")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.numberOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\"));")));
		rules.add(rule().condition(allTypes("attribute", "location")).output(literal("String title = io.intino.goros.unit.util.NodeHelper.valueOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\");\n")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".title(title != null && !title.isEmpty() ? title : this.translate(\"No title\"));\n")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".onExecute(e1 -> ")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".select(")).output(placeholder("definition", "firstLowerCase")).output(placeholder("view", "firstUpperCase")).output(literal(".findItem(n -> matches(n, node.getId()))));")));
		rules.add(rule().condition(allTypes("attribute", "boolean")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".value(translate(io.intino.goros.unit.util.NodeHelper.valueOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\")));")));
		rules.add(rule().condition(all(allTypes("attribute"), trigger("details"))).output(placeholder("name", "firstLowerCase")).output(literal("Details.value(io.intino.goros.unit.util.NodeHelper.valueOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\"));")));
		rules.add(rule().condition(allTypes("attribute")).output(expression().output(placeholder("scope")).output(literal("."))).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.valueOf(")).output(placeholder("reference")).output(literal(", \"")).output(placeholder("code")).output(literal("\"));")));
		rules.add(rule().condition(allTypes("collectionview", "filter")).output(literal("package ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.components.Collection;\nimport org.monet.space.kernel.model.Node;\n\npublic class ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("FiltersTemplate extends Abstract")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("FiltersTemplate<")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private boolean readonly = true;\n    private Collection collection;\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("FiltersTemplate(")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("FiltersTemplate node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("FiltersTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("FiltersTemplate bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {\n        this.collection = collection;\n        return this;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        reset.onExecute(e -> resetFilters());\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        content.autoSize(true);\n        updateFilters();\n    }\n\n    public void resetFilters() {\n        ")).output(expression().output(placeholder("dimension", "clearCall").multiple("\n"))).output(literal("\n        collection.clearFilters();\n    }\n\n    private void updateFilters() {\n        ")).output(expression().output(placeholder("dimension", "updateCall").multiple("\n"))).output(literal("\n    }\n\n    ")).output(expression().output(placeholder("dimension", "updateMethod").multiple("\n"))).output(literal("\n}")));
		rules.add(rule().condition(all(allTypes("dimension"), trigger("updatecall"))).output(literal("udpate")).output(placeholder("name", "firstUpperCase")).output(literal("();")));
		rules.add(rule().condition(all(allTypes("dimension"), trigger("updatemethod"))).output(literal("private void udpate")).output(placeholder("name", "firstUpperCase")).output(literal("() {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal(".label(\"")).output(placeholder("label")).output(literal("\");\n    ")).output(placeholder("name", "firstLowerCase")).output(literal(".attribute(\"")).output(placeholder("code")).output(literal("\");\n    ")).output(placeholder("name", "firstLowerCase")).output(literal(".bindTo(collection);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal(".refresh();\n}")));
		rules.add(rule().condition(all(allTypes("dimension"), trigger("clearcall"))).output(placeholder("name", "firstLowerCase")).output(literal(".clearSelection();")));
		rules.add(rule().condition(all(allTypes("sorting"), trigger("coderegistration"))).output(literal("put(\"")).output(placeholder("view", "firstLowerCase")).output(literal("_")).output(placeholder("label")).output(literal("\", \"")).output(placeholder("code")).output(literal("\");")));
		rules.add(rule().condition(allTypes("sorting")).output(literal("\"")).output(placeholder("label")).output(literal("\"")));
		rules.add(rule().condition(all(allTypes("addList"), trigger("addcall"))).output(expression().output(placeholder("add", "addCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("addList"), trigger("addprototypecall"))).output(expression().output(placeholder("addPrototype", "addPrototypeCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("add", "prototype"), trigger("addprototypecall"))).output(literal("result.add(\"Añadir ")).output(placeholder("label")).output(literal("\");")));
		rules.add(rule().condition(all(allTypes("add"), trigger("addcall"))).output(literal("result.add(\"Añadir ")).output(placeholder("label")).output(literal("\");")));
		rules.add(rule().condition(all(allTypes("addList"), trigger("execute"))).output(literal("add.onExecute(e -> addNode(")).output(placeholder("defaultAdd", "option")).output(literal("));\naddSplit.onExecute(e -> addNode(e.option()));\naddPrototype.onExecute(e -> addPrototype(")).output(placeholder("defaultAddPrototype", "option")).output(literal("));\naddPrototypeSplit.onExecute(e -> addPrototype(e.option()));")));
		rules.add(rule().condition(all(allTypes("addList"), trigger("refresh"))).output(literal("add.visible(addOptions.size() <= 1 && !isPrototypeView && readonly && !node.getDefinition().isReadonly());\naddSplit.options(addOptions);\naddSplit.visible(!isPrototypeView && addOptions.size() > 1 && readonly && !node.getDefinition().isReadonly());\naddPrototype.visible(isPrototypeView);\naddPrototypeSplit.options(addPrototypeOptions);\naddPrototypeSplit.visible(isPrototypeView && addPrototypeOptions.size() > 1);")));
		rules.add(rule().condition(allTypes("addVisibility", "visible")).output(literal("readonly && !node.getDefinition().isReadonly()")));
		rules.add(rule().condition(allTypes("addVisibility")).output(literal("false")));
		rules.add(rule().condition(all(allTypes("add", "prototype"), trigger("toolbartemplate"))).output(literal("if (option.equals(\"Añadir ")).output(placeholder("label")).output(literal("\")) result = io.intino.goros.unit.util.LayerHelper.nodeLayer().addPrototype(\"")).output(placeholder("code")).output(literal("\", node);")));
		rules.add(rule().condition(all(allTypes("add"), trigger("toolbartemplate"))).output(literal("if (option.equals(\"Añadir ")).output(placeholder("label")).output(literal("\")) result = io.intino.goros.unit.util.LayerHelper.nodeLayer().addNode(\"")).output(placeholder("code")).output(literal("\", node);")));
		rules.add(rule().condition(all(allTypes("add"), trigger("option"))).output(literal("\"Añadir ")).output(placeholder("label")).output(literal("\"")));
		rules.add(rule().condition(allTypes("setdefinition", "embedded")).output(literal("package ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.components.BlockConditional;\nimport io.intino.alexandria.ui.displays.components.Collection;\nimport io.intino.alexandria.ui.displays.components.SearchBox;\nimport io.intino.alexandria.ui.displays.components.SelectorCheckBox;\nimport io.intino.alexandria.ui.displays.events.Event;\nimport io.intino.alexandria.ui.displays.events.SelectionEvent;\nimport io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;\nimport io.intino.alexandria.ui.displays.events.collection.RefreshCountEvent;\nimport io.intino.alexandria.ui.displays.UserMessage;\nimport org.monet.space.kernel.components.layers.NodeLayer;\nimport org.monet.space.kernel.model.Node;\nimport org.monet.space.kernel.model.Revision;\nimport io.intino.goros.unit.box.ui.ViewMode;\nimport io.intino.goros.unit.util.*;\n\nimport java.util.Collections;\nimport java.util.stream.Collectors;\nimport java.util.List;\n\npublic class ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate extends Abstract")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate<")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private Revision revision;\n    private boolean readonly = false;\n    private Node selectedChild;\n    private boolean nodeAdded = false;\n    private List<Node> selection = Collections.emptyList();\n    private io.intino.goros.unit.box.ui.ViewMode viewMode = io.intino.goros.unit.box.ui.ViewMode.Compact;\n    private java.util.function.Consumer<Long> itemsCountListener;\n    private java.util.function.Consumer<Boolean> showFiltersListener;\n    private java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> toggleFiltersListener;\n    private java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> toggleViewListener;\n    private SearchBox<?, ?> searchBox;\n    private SelectorCheckBox<?, ?> filterByTitle;\n    private org.monet.space.kernel.model.ClientOperation layerOperation;\n    ")).output(expression().output(placeholder("toolbar", "editableDeclaration"))).output(literal("\n    ")).output(expression().output(placeholder("toolbar", "navigableDeclaration"))).output(literal("\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate(")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    ")).output(expression().output(placeholder("toolbar", "editableEvents"))).output(literal("\n    ")).output(expression().output(placeholder("toolbar", "navigableMethods"))).output(literal("\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public void view(String view) {\n        hideViews();\n        ")).output(expression().output(placeholder("view", "showViewCall").multiple("\n"))).output(literal("\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate revision(org.monet.space.kernel.model.Revision revision) {\n        this.revision = revision;\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate hideToolbar() {\n        toolbar.visible(false);\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate bindTo(SearchBox<?, ?> search, SelectorCheckBox<?, ?> filterByTitle) {\n        this.searchBox = search;\n        this.searchBox.onSearch(e -> toggleFilterByTitle(e.condition()));\n        this.filterByTitle = filterByTitle;\n        this.filterByTitle.onSelect(e -> filterByTitle());\n        this.filterByTitle();\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate toggleFilters(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {\n        toggleFiltersViewVisibility(state);\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate onShowFilters(java.util.function.Consumer<Boolean> listener) {\n        this.showFiltersListener = listener;\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate onToggleFilters(java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> listener) {\n        this.toggleFiltersListener = listener;\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate toggleView(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {\n        this.viewMode = state == ToggleEvent.State.On ? io.intino.goros.unit.box.ui.ViewMode.Full : io.intino.goros.unit.box.ui.ViewMode.Compact;\n        refreshViewMode();\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate onToggleView(java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> listener) {\n        this.toggleViewListener = listener;\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate onItemsCountChange(java.util.function.Consumer<Long> listener) {\n        this.itemsCountListener = listener;\n        return this;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        initToolbar();\n        initViews();\n    }\n\n    private void initToolbar() {\n        ")).output(expression().output(placeholder("toolbar", "editableInitCall"))).output(literal("\n        edit.onExecute(e -> toggleEdition());\n        openLayerTrigger.onOpen(e -> fillLayer(e.layer()));\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        refreshToolbar();\n        refreshCollapse();\n        refreshView();\n        refreshFilters();\n    }\n\n    public Collection currentCollection() {\n        ")).output(expression().output(placeholder("view", "collection").multiple("\n"))).output(literal("\n        return null;\n    }\n\n    private void initViews() {\n        hideViews.onExecute(e -> hideViewsBlock());\n        ")).output(expression().output(placeholder("view", "initCall").multiple("\n"))).output(literal("\n        filtersView.onInit(e -> initFilters());\n        filtersView.onShow(e -> showFilters());\n        ")).output(expression().output(placeholder("toolbar", "initViews"))).output(literal("\n    }\n\n    private void clearSelection() {\n        ")).output(expression().output(placeholder("view", "clearSelectionCall").multiple("\n"))).output(literal("\n    }\n\n    private void updateSelection(SelectionEvent selectionEvent) {\n        List<Object> selection = selectionEvent.selection();\n        this.selection = selection.stream().map(s -> s instanceof String ? load((String) s) : (Node<?>)s).collect(Collectors.toList());\n        open(this.selection);\n    }\n\n    private Node<?> load(String id) {\n        return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(id);\n    }\n\n    private void initFilters() {\n        ")).output(expression().output(placeholder("view", "filter").multiple("\n"))).output(literal("\n    }\n\n    private void showFilters() {\n        ")).output(expression().output(placeholder("view", "showFilterCall").multiple("\n"))).output(literal("\n    }\n\n    private void showFilters(BlockConditional filtersBlock) {\n        if (showFiltersListener != null) showFiltersListener.accept(true);\n        if (!filtersView.isVisible()) return;\n        ")).output(expression().output(placeholder("view", "hideFilterCall").multiple("\n"))).output(literal("\n        filtersBlock.show();\n        filtersBlock.refresh();\n    }\n\n    private void refreshToolbar() {\n        boolean embedded = toggleFiltersListener == null;\n        boolean isPrototypeView = isPrototypeView();\n        List<String> addOptions = addOptions();\n        List<String> addPrototypeOptions = addPrototypeOptions();\n        ")).output(expression().output(placeholder("toolbar", "editableRefreshCall"))).output(literal("\n        ")).output(expression().output(placeholder("toolbar", "navigableRefreshCall"))).output(literal("\n        edit.title(readonly ? \"Editar\" : \"Finalizar edición\");\n        edit.highlight(readonly ? io.intino.alexandria.ui.displays.components.Actionable.Highlight.Outline : io.intino.alexandria.ui.displays.components.Actionable.Highlight.Fill);\n        edit.visible(!embedded && node.isEditable() && !node.getDefinition().isReadonly() && !node.isLocked());\n    }\n\n    private boolean isPrototypeView() {\n        ")).output(expression().output(placeholder("view", "isPrototypeView").multiple("\n"))).output(literal("\n        return false;\n    }\n\n    private List<String> addOptions() {\n        List<String> result = new java.util.ArrayList<>();\n        ")).output(expression().output(placeholder("toolbar", "editableAddCall"))).output(literal("\n        node.getOwnedPrototypes().forEach(n -> result.add(\"Añadir \" + n.getLabel()));\n        return result;\n    }\n\n    private List<String> addPrototypeOptions() {\n        List<String> result = new java.util.ArrayList<>();\n        ")).output(expression().output(placeholder("toolbar", "editableAddPrototypeCall"))).output(literal("\n        return result;\n    }\n\n    private void refreshCount(RefreshCountEvent event) {\n        refreshCount(event.count());\n    }\n\n    private void refreshCount(long count) {\n        if (itemsCountListener != null) itemsCountListener.accept(count);\n    }\n\n    private void refreshView() {\n        ")).output(expression().output(placeholder("view", "refreshCall").multiple("\n"))).output(literal("\n    }\n\n    private void toggleEdition() {\n        readonly = !readonly;\n        if (!readonly) hideChildViews();\n        clearSelection();\n        ")).output(expression().output(placeholder("toolbar", "editableCall"))).output(literal("\n        ")).output(expression().output(placeholder("view", "readonlyCall").multiple("\n"))).output(literal("\n        refreshToolbar();\n    }\n\n    private void removeSelection(Event event) {\n        if (selection == null) return;\n        NodeLayer nodeLayer = io.intino.goros.unit.util.LayerHelper.nodeLayer();\n        String linkedNodes = selection.stream().filter(Node::isLinked).map(Node::getLabel).collect(Collectors.joining(\", \"));\n        if (linkedNodes.length() > 0) {\n            notifyUser(\"Los siguientes elementos no se han borrado por estar en uso: \" + linkedNodes, UserMessage.Type.Warning);\n            return;\n        }\n        selection.stream().filter(n -> !n.isLinked()).forEach(nodeLayer::deleteNode);\n        selection.forEach(nodeLayer::deleteNode);\n        refresh();\n    }\n\n    private void toggleFilterByTitle(String condition) {\n        if (condition == null || condition.isEmpty()) filterByTitle.hide();\n        else filterByTitle.show();\n    }\n\n    private void filterByTitle() {\n        if (currentCollection() == null) return;\n        if (filterByTitle.selection().size() > 0) currentCollection().filter(\"titleTag\", Collections.singletonList(\"true\"));\n        else currentCollection().removeFilter(\"titleTag\");\n    }\n\n    public void resetFilters() {\n        ")).output(expression().output(placeholder("view", "resetFiltersCall").multiple("\n"))).output(literal("\n    }\n\n    private void refreshFilters() {\n        if (!filtersView.isVisible()) return;\n        ")).output(expression().output(placeholder("view", "refreshFiltersCall").multiple("\n"))).output(literal("\n    }\n\n    private void bindCurrentViewTo(io.intino.alexandria.ui.displays.components.Collection collection) {\n        ")).output(expression().output(placeholder("toolbar", "bindCall"))).output(literal("\n    }\n\n    private void toggleFiltersViewVisibility(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {\n        showViewsBlock();\n        hideChildViews();\n        if (state == io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On) filtersView.show();\n        else filtersView.hide();\n    }\n\n    private void refreshViewMode() {\n        if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) {\n            if (selectedChild != null) hideViewsBlock();\n            else {\n                showViewsBlock();\n                close();\n            }\n        }\n        else showViewsBlock();\n    }\n\n    private void updateSelectedNodeViewVisibility(boolean visible) {\n        if (visible) {\n            if (filtersView.isVisible()) {\n                toggleFiltersViewVisibility(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);\n                if (toggleFiltersListener != null) toggleFiltersListener.accept(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);\n            }\n            showSelectedNodeView();\n        }\n        else hideChildViews();\n    }\n\n    private void refresh(Node node) {\n        ")).output(expression().output(placeholder("view", "refreshNodeCall").multiple("\n"))).output(literal("\n    }\n\n    private void addAndSelect(Node node) {\n        ")).output(expression().output(placeholder("view", "selectNodeCall").multiple("\n"))).output(literal("\n    }\n\n    private void open(List<Node> selection) {\n        if (!readonly) return;\n        open(selection.size() > 0 ? selection.get(0) : null);\n    }\n\n    private ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate open(Node node) {\n        if (selectedChild == node) return this;\n        refreshIfEditing();\n        BlockConditional selectedView = selectedNodeView();\n        selectedChild = selectedView != null && selectedView.isVisible() && node == null ? null : node;\n        updateSelectedNodeViewVisibility(selectedChild != null);\n        return this;\n    }\n\n    private void refreshIfEditing() {\n        if (selectedChild == null) return;\n        ")).output(expression().output(placeholder("toolbar", "ifEditingCall").multiple("\n"))).output(literal("\n    }\n\n    private ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate close() {\n        selectedChild = null;\n        enableCollapse(false);\n        updateSelectedNodeViewVisibility(false);\n        return this;\n    }\n\n    private void showSelectedNodeView() {\n        if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) hideViewsBlock();\n        if (selectedChild == null) return;\n        BlockConditional selectedView = selectedNodeView();\n        if (selectedView == null) return;\n        if (!selectedView.isVisible()) hideChildViews();\n        selectedView.show();\n        enableCollapse(true);\n    }\n\n    private BlockConditional selectedNodeView() {\n        if (selectedChild == null) return null;\n        ")).output(expression().output(placeholder("toolbar", "equals").multiple("\n"))).output(literal("\n        return null;\n    }\n\n    private void hideChildViews() {\n        ")).output(expression().output(placeholder("toolbar", "hideCall").multiple("\n"))).output(literal("\n        enableCollapse(false);\n    }\n\n    private void refreshCollapse() {\n        viewsToolbar.visible(selectedChild != null);\n        views.visible(true);\n        ")).output(expression().output(placeholder("toolbar", "hideCollectionCall"))).output(literal("\n    }\n\n    private void enableCollapse(boolean value) {\n        boolean visible = value && views.isVisible();\n        viewsToolbar.visible(visible);\n        ")).output(expression().output(placeholder("toolbar", "enableCollapseCall"))).output(literal("\n    }\n\n    private void showViewsBlock() {\n        views.visible(true);\n        enableCollapse(selectedChild != null);\n        ")).output(expression().output(placeholder("toolbar", "hideCollectionCall"))).output(literal("\n    }\n\n    private void dispatch(org.monet.space.kernel.model.ClientOperation operation) {\n        if (operation == null) {\n            refreshView();\n            return;\n        }\n        String name = operation.getName().toLowerCase();\n        String view = name.equals(\"shownodeview\") ? operation.getData().get(\"IdView\").toString() : null;\n        String mode = operation.getData().get(\"Mode\") != null ? operation.getData().get(\"Mode\").toString() : null;\n        boolean readonly = mode == null || !mode.contains(\"edit.html\");\n        String id = operation.getData().get(\"Id\").toString();\n        Node<?> target = (name.equals(\"shownode\") || name.equals(\"shownodeview\")) ? LayerHelper.nodeLayer().loadNode(id) : null;\n        if (target != null && target.getParent() == node) {\n            //refreshView();\n            open(target);\n        }\n        else {\n            layerOperation = operation;\n            openLayerTrigger.address(path -> NodeHelper.operationPath(operation));\n            openLayerTrigger.openLayer();\n        }\n        openChildView(view, readonly);\n    }\n\n    private void fillLayer(io.intino.alexandria.ui.displays.components.Layer<?, ?> layer) {\n        org.monet.space.kernel.model.Entity<?> entity = NodeHelper.operationEntity(layerOperation);\n        if (entity != null) layer.title(entity.getLabel());\n        AppTemplate template = new AppTemplate(box());\n        layer.template(template);\n        template.embedded(true);\n    }\n\n    private void openChildView(String id) {\n        openChildView(id, false);\n    }\n\n    private void openChildView(String id, boolean readonly) {\n        ")).output(expression().output(placeholder("toolbar", "openChildViewCall").multiple("\n"))).output(literal("\n    }\n\n    private void hideViewsBlock() {\n        views.visible(false);\n        enableCollapse(selectedChild != null);\n        ")).output(expression().output(placeholder("toolbar", "showCollectionCall"))).output(literal("\n    }\n\n    private void hideViews() {\n        ")).output(expression().output(placeholder("view", "hideViewCall").multiple("\n"))).output(literal("\n    }\n\n    private void resetView() {\n        selectedChild = null;\n        ")).output(expression().output(placeholder("toolbar", "hideCall").multiple("\n"))).output(literal("\n        refreshCollapse();\n    }\n\n    private Node reloadSelected() {\n        if (selectedChild == null) return null;\n        return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(selectedChild.getId());\n    }\n\n    ")).output(expression().output(placeholder("toolbar", "editableMethods"))).output(literal("\n\n}")));
		rules.add(rule().condition(allTypes("setdefinition")).output(literal("package ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.components.BlockConditional;\nimport io.intino.alexandria.ui.displays.components.Collection;\nimport io.intino.alexandria.ui.displays.events.Event;\nimport io.intino.alexandria.ui.displays.events.SelectionEvent;\nimport io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;\nimport io.intino.alexandria.ui.displays.events.collection.RefreshCountEvent;\nimport io.intino.alexandria.ui.displays.UserMessage;\nimport org.monet.space.kernel.components.layers.NodeLayer;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.unit.util.*;\n\nimport java.util.Collections;\nimport java.util.stream.Collectors;\nimport java.util.List;\n\npublic class ")).output(placeholder("name", "firstUpperCase")).output(literal("Template extends Abstract")).output(placeholder("name", "firstUpperCase")).output(literal("Template<")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private boolean readonly = true;\n    private String sorting;\n    private String sortingMode;\n    ")).output(expression().output(placeholder("toolbar", "editableDeclaration"))).output(literal("\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("Template(")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    ")).output(expression().output(placeholder("toolbar", "editableEvents"))).output(literal("\n    ")).output(expression().output(placeholder("toolbar", "navigableMethods"))).output(literal("\n\n    public void open(String code, boolean readonly) {\n        node(LayerHelper.nodeLayer().locateNode(code));\n        readonly(readonly);\n        refresh();\n    }\n\n    public void open(String id, String view, boolean readonly) {\n        node(LayerHelper.nodeLayer().loadNode(id));\n        readonly(readonly);\n        refresh();\n        if (view != null) viewSelector.select(view);\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("Template node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("Template readonly(boolean value) {\n        this.readonly = value;\n        return this;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        ")).output(expression().output(placeholder("desktop"))).output(literal("\n        ")).output(expression().output(placeholder("parent"))).output(literal("\n        initToolbar();\n        initSortings();\n        initContent();\n        viewSelector.onSelect(this::openView);\n        DownloadDialog.onOpen(e -> refreshDownloadDialog());\n        resetFilters.onExecute(e -> content.resetFilters());\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        refreshHeader();\n        refreshContent();\n        viewSelector.visible(viewSelector.options().size() > 1);\n        if (viewSelector.selection().size() <= 0) io.intino.goros.unit.util.DisplayHelper.selectDefaultView(viewSelector, node);\n        else viewSelector.select(viewSelector.selection().get(0));\n    }\n\n    private void initToolbar() {\n        filters.onToggle(e -> toggleFilters(e.state()));\n        toggleView.state(ToggleEvent.State.Off);\n        toggleView.onToggle(e -> toggleView(e.state()));\n    }\n\n    private void initSortings() {\n        sortings.onSelect(this::selectSortingMode);\n        sortingsMode.add(\"Ascendente\");\n        sortingsMode.add(\"Descendente\");\n        sortingsMode.onSelect(this::selectSorting);\n        removeSorting.onExecute(this::removeSorting);\n    }\n\n    private void initContent() {\n        content.onItemsCountChange(this::refreshCount);\n        content.onShowFilters(e -> refreshSortings());\n        content.onToggleFilters(this::refreshToggleFiltersButton);\n        content.onToggleView(this::refreshToggleViewButton);\n        content.onFinishEdition(e -> finishEdition());\n        content.bindTo(search, filterByTitle);\n    }\n\n    private void openView(SelectionEvent event) {\n        List<String> selection = event.selection();\n        if (selection.size() <= 0) return;\n        content.view(selection.get(0));\n    }\n\n    private void refreshCount(long countValue) {\n        refreshAppliedFilters();\n        String label = DictionaryHelper.referenceLabel(node);\n        count.value(Formatters.countMessage(countValue, label, label + \" \" + translate(\"available\")));\n    }\n\n    private void refreshAppliedFilters() {\n        Collection<?, ?> collection = currentCollection();\n        List<io.intino.alexandria.ui.model.datasource.Filter> filters = collection.filters();\n        filtersAppliedBlock.visible(!filters.isEmpty());\n        if (filters.isEmpty()) return;\n        String message = NodeHelper.filtersMessage(node, filters);\n        filtersMessage.value(message);\n    }\n\n    private void refreshHeader() {\n        description.value(io.intino.goros.unit.util.DisplayHelper.description(node, this::translate));\n    }\n\n    private void refreshContent() {\n        content.node(node);\n        content.readonly(node.isLocked() || readonly);\n        content.refresh();\n    }\n\n    private void refreshDownloadDialog() {\n        DownloadDialog.dialog.onTerminate(e -> DownloadDialog.close());\n        DownloadDialog.dialog.node(node);\n        DownloadDialog.dialog.view(selectedViewCode());\n        DownloadDialog.dialog.condition(java.util.Objects.requireNonNull(currentCollection()).condition());\n        DownloadDialog.dialog.filters(java.util.Objects.requireNonNull(currentCollection()).filters());\n        DownloadDialog.dialog.sorting(selectedSortingCode(), sortingsMode.selection().size() > 0 ? sortingsMode.selection().get(0) : \"Ascendente\");\n        DownloadDialog.dialog.columns(io.intino.goros.unit.util.NodeHelper.downloadColumns(node, selectedViewCode()));\n        DownloadDialog.dialog.refresh();\n    }\n\n    private void refreshToggleFiltersButton(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {\n        filters.state(state);\n    }\n\n    private void refreshToggleViewButton(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {\n        toggleView.state(state);\n    }\n\n    private void finishEdition() {\n        ")).output(expression().output(placeholder("toolbar", "editableCall"))).output(literal("\n    }\n\n    private void toggleFilters(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {\n        content.toggleFilters(state);\n    }\n\n    private void toggleView(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {\n        content.toggleView(state);\n    }\n\n    private String selectedViewCode() {\n        ")).output(expression().output(placeholder("view", "selectViewCodeCall").multiple("\n"))).output(literal("\n        return null;\n    }\n\n    private static final java.util.Map<String, List<String>> sortingsMap = new java.util.HashMap<>() {{\n        ")).output(expression().output(placeholder("view", "registerSorting").multiple("\n"))).output(literal("\n    }};\n    private static final java.util.Map<String, String> sortingsCodesMap = new java.util.HashMap<>() {{\n        ")).output(expression().output(placeholder("view", "registerSortingCode").multiple("\n"))).output(literal("\n    }};\n    private void refreshSortings() {\n        ")).output(expression().output(placeholder("view", "refreshSortingCall").multiple("\n"))).output(literal("\n    }\n\n    private Collection currentCollection() {\n        return content.currentCollection();\n    }\n\n    private void refreshSortings(List<String> sortingList) {\n        sortingsBlock.visible(sortingList.size() > 0);\n        sortings.clear();\n        sortingList.forEach(s -> sortings.add(s));\n        sortingsMode.select(defaultSortingMode());\n        sortings.select(defaultSorting());\n    }\n\n    private void selectSortingMode(SelectionEvent e) {\n        this.sorting = e.selection().size() > 0 ? (String) e.selection().get(0) : null;\n        this.sortingsMode.visible(sorting != null);\n        if (sortingsMode.selection().size() <= 0) sortingsMode.select(\"Ascendente\");\n        else selectSorting(sorting, sorting != null ? sortingsMode.selection().get(0) : null);\n    }\n\n    private void selectSorting(SelectionEvent e) {\n        sortingMode = (String) e.selection().get(0);\n        selectSorting(sorting, sortingMode);\n    }\n\n    private String defaultSorting() {\n        if (sorting != null) return sorting;\n        ")).output(expression().output(placeholder("view", "defaultSortingCall").multiple("\n"))).output(literal("\n        return \"Título\";\n    }\n\n    private String defaultSortingMode() {\n        if (sortingMode != null) return sortingMode;\n        ")).output(expression().output(placeholder("view", "defaultSortingModeCall").multiple("\n"))).output(literal("\n        return \"Ascendente\";\n    }\n\n    private void selectSorting(String sorting, String mode) {\n        removeSorting.visible(sorting != null);\n        ")).output(expression().output(placeholder("view", "selectSortingCall").multiple("\n"))).output(literal("\n    }\n\n    private String selectedSortingCode() {\n        ")).output(expression().output(placeholder("view", "selectedSortingCodeCall").multiple("\n"))).output(literal("\n        return \"label\";\n    }\n\n    private void removeSorting(Event event) {\n        sortings.select();\n    }\n\n}")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("initcall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("initcall"))).output(placeholder("name", "firstLowerCase")).output(literal("View.onInit(e -> {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.")).output(placeholder("definition", "firstLowerCase")).output(placeholder("name", "firstUpperCase")).output(literal(".onRefreshItemCount(this::refreshCount);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.")).output(placeholder("definition", "firstLowerCase")).output(placeholder("name", "firstUpperCase")).output(literal(".onSelect(this::updateSelection);\n});\n")).output(placeholder("name", "firstLowerCase")).output(literal("View.onShow(e -> {\n    bindCurrentViewTo(")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.")).output(placeholder("definition", "firstLowerCase")).output(placeholder("name", "firstUpperCase")).output(literal(");\n    bindToolbars(")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.")).output(placeholder("definition", "firstLowerCase")).output(placeholder("name", "firstUpperCase")).output(literal(");\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.node(node);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.view(\"")).output(placeholder("code")).output(literal("\");\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.readonly(node.isLocked() || readonly);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n    showFilters(filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters);\n    refreshCount(")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.")).output(placeholder("definition", "firstLowerCase")).output(placeholder("name", "firstUpperCase")).output(literal(".itemCount());\n    resetView();\n});")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("clearselectioncall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("clearselectioncall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.")).output(placeholder("definition", "firstLowerCase")).output(placeholder("name", "firstUpperCase")).output(literal(".selection(Collections.emptyList());")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("filter"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("filter"))).output(literal("filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.onShow(e -> {\n    filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.")).output(placeholder("name", "firstLowerCase")).output(literal("FiltersStamp.node(node);\n    filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.")).output(placeholder("name", "firstLowerCase")).output(literal("FiltersStamp.readonly(node.isLocked() || readonly);\n    filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.")).output(placeholder("name", "firstLowerCase")).output(literal("FiltersStamp.bindTo(")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.")).output(placeholder("definition", "firstLowerCase")).output(placeholder("name", "firstUpperCase")).output(literal(");\n    filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.")).output(placeholder("name", "firstLowerCase")).output(literal("FiltersStamp.refresh();\n});")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("showfiltercall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("showfiltercall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) showFilters(filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters);")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("hidefiltercall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("hidefiltercall"))).output(literal("filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.hide();")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("refreshcall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("refreshcall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.readonly(readonly);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n}")));
		rules.add(rule().condition(all(allTypes("collectionview", "ownedprototypes"), trigger("isprototypeview"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) return true;")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("isprototypeview"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("isprototypeview"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) return false;")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("refreshfilterscall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("refreshfilterscall"))).output(literal("if (filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.isVisible()) filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.")).output(placeholder("name", "firstLowerCase")).output(literal("FiltersStamp.refresh();")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("resetfilterscall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("resetfilterscall"))).output(literal("if (filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.isVisible()) filtersView.")).output(placeholder("name", "firstLowerCase")).output(literal("Filters.")).output(placeholder("name", "firstLowerCase")).output(literal("FiltersStamp.resetFilters();")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("refreshnodecall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("refreshnodecall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.refresh(node);")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("selectnodecall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("selectnodecall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.addAndSelect(node);")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("selectviewcodecall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("selectviewcodecall"))).output(literal("if (content.")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) return content.")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.view();")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("readonlycall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("readonlycall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.readonly(readonly).refresh();\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.show();\n}")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("collection"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("collection"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) return ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.")).output(placeholder("definition", "firstLowerCase")).output(placeholder("name", "firstUpperCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("registersorting"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("registersorting"))).output(literal("put(\"")).output(placeholder("name", "firstLowerCase")).output(literal("\", List.of(\"Título\",\"Fecha de creación\"")).output(expression().output(literal(",")).output(placeholder("sorting").multiple(","))).output(literal("));")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("registersortingcode"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("registersortingcode"))).output(literal("put(\"")).output(placeholder("name", "firstLowerCase")).output(literal("_Título\", \"label\");\nput(\"")).output(placeholder("name", "firstLowerCase")).output(literal("_Fecha de creación\", \"create_date\");\n")).output(expression().output(placeholder("sorting", "codeRegistration").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("refreshsortingcall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("refreshsortingcall"))).output(literal("if (content.")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) refreshSortings(sortingsMap.get(\"")).output(placeholder("name", "firstLowerCase")).output(literal("\"));")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("selectsortingcall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("selectsortingcall"))).output(literal("if (content.")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) content.")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.selectSorting(selectedSortingCode(), mode);")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("defaultsortingcall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("defaultsortingcall"))).output(literal("if (content.")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) return \"")).output(placeholder("defaultSorting")).output(literal("\";")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("defaultsortingmodecall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("defaultsortingmodecall"))).output(literal("if (content.")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) return \"")).output(placeholder("defaultSortingMode")).output(literal("\";")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("selectedsortingcodecall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("selectedsortingcodecall"))).output(literal("if (content.")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) return sortingsCodesMap.get(\"")).output(placeholder("name", "firstLowerCase")).output(literal("_\"+sorting);")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("showviewcall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("showviewcall"))).output(literal("if (view.equals(\"")).output(placeholder("name", "firstLowerCase")).output(literal("\") || view.equals(\"")).output(placeholder("code")).output(literal("\")) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.show();\n")));
		rules.add(rule().condition(all(allTypes("collectionview", "sharedprototypes"), trigger("hideviewcall"))));
		rules.add(rule().condition(all(allTypes("collectionview"), trigger("hideviewcall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.hide();")));
		rules.add(rule().condition(all(allTypes("add"), trigger("initcall"))).output(placeholder("name", "firstLowerCase")).output(literal("View.onShow(e -> {\n    bindCurrentViewTo(currentCollection());\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.node(reloadSelected());\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.readonly(!nodeAdded && readonly);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.onRemove(e1 -> {\n        refresh();\n        close();\n    });\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.onFinishEdition(this::refresh);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.onShowCollection(node -> {\n        if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) {\n            close();\n            clearSelection();\n        }\n        showViewsBlock();\n    });\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.onDispatchOperation(this::dispatch);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.showLabel(true);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.viewMode(viewMode);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.refresh();\n    if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.selectedView() == null) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.selectDefaultView();\n    nodeAdded = false;\n});")));
		rules.add(rule().condition(all(allTypes("add"), trigger("bindcall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.bindTo(collection);")));
		rules.add(rule().condition(all(allTypes("add"), trigger("showcollectioncall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.viewMode(ViewMode.Full);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.showCollectionVisibility();\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.refresh();\n}")));
		rules.add(rule().condition(all(allTypes("add"), trigger("enablecollapsecall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.viewMode(!visible ? viewMode : null);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.showCollectionVisibility();\n}")));
		rules.add(rule().condition(all(allTypes("add"), trigger("hidecollectioncall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.viewMode(null);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.showCollectionVisibility();\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.refresh();\n}")));
		rules.add(rule().condition(all(allTypes("add"), trigger("ifeditingcall"))).output(literal("if (selectedChild.getCode().equals(\"")).output(placeholder("code")).output(literal("\") && ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.editing()) refresh(io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(selectedChild.getId()));")));
		rules.add(rule().condition(all(allTypes("add"), trigger("equals"))).output(literal("if (selectedChild.getCode().equals(\"")).output(placeholder("code")).output(literal("\")) return ")).output(placeholder("name", "firstLowerCase")).output(literal("View;")));
		rules.add(rule().condition(all(allTypes("add"), trigger("hidecall"))).output(placeholder("name", "firstLowerCase")).output(literal("View.hide();")));
		rules.add(rule().condition(all(allTypes("add"), trigger("openchildviewcall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp.openView(id, readonly);")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editableaddcall"))).output(placeholder("addList", "addCall")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editableaddprototypecall"))).output(placeholder("addList", "addPrototypeCall")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editableinitcall"))).output(expression().output(placeholder("operationsGroup", "editableInitCall"))).output(literal("\n")).output(expression().output(placeholder("operation", "editableInitCall").multiple("\n"))).output(literal("\nremoveSelection.onExecute(this::removeSelection);\n")).output(expression().output(placeholder("addList", "execute"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editablerefreshcall"))).output(expression().output(placeholder("operationsGroup", "editableRefreshCall"))).output(literal("\n")).output(expression().output(placeholder("operation", "editableRefreshCall").multiple("\n"))).output(literal("\nremoveSelection.visible(!readonly && !node.getDefinition().isReadonly());\n")).output(expression().output(placeholder("addList", "refresh"))));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("editableevents"))).output(literal("public void onFinishEdition(java.util.function.Consumer<Node> listener) {\n    this.finishEditionListener = listener;\n}")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editableevents"))).output(literal("public void onRemove(java.util.function.Consumer<Node> listener) {\n    this.removeListener = listener;\n}\n\npublic void onFinishEdition(java.util.function.Consumer<Node> listener) {\n    this.finishEditionListener = listener;\n}")));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("selectedviewcode"))).output(literal("private void addNode(String option) {\n    Node result = null;\n    ")).output(expression().output(placeholder("add", "toolbarTemplate").multiple("\n"))).output(literal("\n    if (result == null) result = copyNode(option);\n    if (result == null) return;\n    nodeAdded = true;\n    addAndSelect(result);\n    open(result);\n    if (result.getDefinition().getDefaultView() != null) openChildView(result.getDefinition().getDefaultView().getCode());\n}\nprivate Node copyNode(String option) {\n    Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> (\"Añadir \" + n.getLabel()).equals(option)).findFirst().orElse(null);\n    return NodeHelper.copyNode(prototype, language());\n}\nprivate void addPrototype(String option) {\n    Node result = null;\n    ")).output(expression().output(placeholder("addPrototype", "toolbarTemplate").multiple("\n"))).output(literal("\n    if (result == null) return;\n    nodeAdded = true;\n    open(result);\n    addAndSelect(result);\n}\nprivate void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {\n    toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);\n    if (searchBox != null) searchBox.bindTo(collection);\n}")));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("editablemethods"))).output(expression().output(placeholder("operationsGroup", "editableMethods"))).output(literal("\nprivate void addNode(String option) {\n    Node result = null;\n    ")).output(expression().output(placeholder("add", "toolbarTemplate").multiple("\n"))).output(literal("\n    if (result == null) result = copyNode(option);\n    if (result == null) return;\n    nodeAdded = true;\n    addAndSelect(result);\n    open(result);\n    if (result.getDefinition().getDefaultView() != null) openChildView(result.getDefinition().getDefaultView().getCode());\n}\nprivate Node copyNode(String option) {\n    Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> (\"Añadir \" + n.getLabel()).equals(option)).findFirst().orElse(null);\n    return NodeHelper.copyNode(prototype, language());\n}\nprivate void addPrototype(String option) {\n    Node result = null;\n    ")).output(expression().output(placeholder("addPrototype", "toolbarTemplate").multiple("\n"))).output(literal("\n    if (result == null) return;\n    nodeAdded = true;\n    open(result);\n    addAndSelect(result);\n}\nprivate void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {\n    toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);\n    if (searchBox != null) searchBox.bindTo(collection);\n}")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editablemethods"))).output(expression().output(placeholder("operationsGroup", "editableMethods"))).output(literal("\nprivate void addNode(String option) {\n    Node result = null;\n    ")).output(expression().output(placeholder("add", "toolbarTemplate").multiple("\n"))).output(literal("\n    if (result == null) result = copyNode(option);\n    if (result == null) return;\n    nodeAdded = true;\n    addAndSelect(result);\n    open(result);\n    if (result.getDefinition().getDefaultView() != null) openChildView(result.getDefinition().getDefaultView().getCode());\n}\nprivate Node copyNode(String option) {\n    Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> (\"Añadir \" + n.getLabel()).equals(option)).findFirst().orElse(null);\n    return NodeHelper.copyNode(prototype, language());\n}\nprivate void addPrototype(String option) {\n    Node result = null;\n    ")).output(expression().output(placeholder("addPrototype", "toolbarTemplate").multiple("\n"))).output(literal("\n    if (result == null) return;\n    nodeAdded = true;\n    open(result);\n    addAndSelect(result);\n}\nprivate void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {\n    toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);\n    if (searchBox != null) searchBox.bindTo(collection);\n}\nprivate void removeNode() {\n    String message = io.intino.goros.unit.util.NodeHelper.canRemove(node);\n    if (message != null) {\n        notifyUser(message, io.intino.alexandria.ui.displays.UserMessage.Type.Error);\n        return;\n    }\n    io.intino.goros.unit.util.LayerHelper.nodeLayer().deleteNode(node);\n    if (removeListener != null) removeListener.accept(node);\n}")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("initviews"))).output(expression().output(placeholder("add", "initCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("bindcall"))).output(expression().output(placeholder("add", "bindCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("enablecollapsecall"))).output(expression().output(placeholder("add", "enableCollapseCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("showcollectioncall"))).output(expression().output(placeholder("add", "showCollectionCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("hidecollectioncall"))).output(expression().output(placeholder("add", "hideCollectionCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("equals"))).output(expression().output(placeholder("add", "equals").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("ifeditingcall"))).output(expression().output(placeholder("add", "ifEditingCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("hidecall"))).output(expression().output(placeholder("add", "hideCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("openchildviewcall"))).output(expression().output(placeholder("add", "openChildViewCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("operation"), trigger("executemethodcall"))).output(literal("if (option.equals(\"")).output(placeholder("label")).output(literal("\")) io.intino.goros.unit.util.NodeHelper.executeOperation(session(), operaciones, node, \"")).output(placeholder("name")).output(literal("\", translate(\"Operation executed\"), this::dispatch);")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}