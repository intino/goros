def type(show & fields) trigger(declaration)
    [$field+declaration...[$NL]]
end

def type(show & layout) trigger(declaration)
    [$row+declaration...[$NL]]
end

def type(layoutRow) trigger(declaration)
    [$element+declaration...[$NL]]
end

def type(layoutElement & section) trigger(declaration)
    [$row+declaration...[$NL]]
end

def type(layoutElement) trigger(declaration)
    [$field+declaration]
end

def type(show & fields & composite) trigger(init)
    [$field+init...[$NL]]
end

def type(show & fields & composite) trigger(refresh)
    [$field+refresh...[$NL]]
end

def type(show & fields & composite) trigger(refreshMethod)
    [$field+refreshMethod...[$NL]]
end

def type(show & fields & composite) trigger(update)
    [$field+update...[$NL]]
end

def type(show & layout & composite) trigger(init)
    [$row+init...[$NL]]
end

def type(show & layout & composite) trigger(refresh)
    [$row+refresh...[$NL]]
end

def type(show & layout & composite) trigger(refreshMethod)
    [$row+refreshMethod...[$NL]]
end

def type(show & layout & composite) trigger(update)
    [$row+update...[$NL]]
end

def type(show) trigger(hideToolbar)
end

def type(show & layout)
    @Override
    public void init() {
        super.init();
        [$row+init...[$NL]]
    }

    @Override
    public void refresh() {
        super.refresh();
        [$row+refresh...[$NL]]
    }

    [$row+refreshMethod...[$NL]]

    private void save(java.util.function.Consumer<Boolean> consumer) {
        consumer.accept(true);
        io.intino.goros.unit.util.LayerHelper.nodeLayer().saveNode(node);
        updateFields();
    }

    private void updateFields() {
        if (node == null) return;
        FormDatasource datasource = new FormDatasource(box().unit(), session(), node);
        [$row+update...[$NL]]
    }
end

def type(layoutRow) trigger(init)
    [$element+init...[$NL]]
end

def type(layoutRow) trigger(refresh)
    [$element+refresh...[$NL]]
end

def type(layoutRow) trigger(refreshMethod)
    [$element+refreshMethod...[$NL]]
end

def type(layoutRow) trigger(update)
    [$element+update...[$NL]]
end

def type(layoutElement & section) trigger(init)
    [$row+init...[$NL]]
end

def type(layoutElement) trigger(init)
    $field+init
end

def type(layoutElement & section) trigger(refresh)
    [$row+refresh...[$NL]]
end

def type(layoutElement) trigger(refresh)
    $field+refresh
end

def type(layoutElement & section) trigger(refreshMethod)
    [$row+refreshMethod...[$NL]]
end

def type(layoutElement) trigger(refreshMethod)
    $field+refreshMethod
end

def type(layoutElement & section) trigger(update)
    [$row+update...[$NL]]
end

def type(layoutElement) trigger(update)
    $field+update
end

def type(show & fields)
    @Override
    public void init() {
        super.init();
        [$field+init...[$NL]]
    }

    @Override
    public void refresh() {
        super.refresh();
        boolean isPrototype = node.isPrototype();
        [$field+refresh...[$NL]]
    }

    [$field+refreshMethod...[$NL]]

    private void save(java.util.function.Consumer<Boolean> consumer) {
        consumer.accept(true);
        io.intino.goros.unit.util.LayerHelper.nodeLayer().saveNode(node);
        updateFields();
    }

    private void updateFields() {
        if (node == null) return;
        FormDatasource datasource = new FormDatasource(box().unit(), session(), node);
        [$field+update...[$NL]]
    }
end

def type(displayProvider)
    @Override
    public io.intino.alexandria.ui.displays.Display displayFor(Node node, String view) {
        if (node != null && node.isDocument()) {
            io.intino.goros.unit.box.ui.displays.templates.NodeDocumentTemplate display = new io.intino.goros.unit.box.ui.displays.templates.NodeDocumentTemplate(box().unit());
            display.node(node);
            display.readonly(readonly);
            return display;
        }
        [$display...[$NL]]
        return null;
    }
end

def type(field & select & multiple) trigger(declaration)
    private FieldMultiple<Field$type+firstUpperCase~,$valueType> $name+firstLowerCase~Field;
    private io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource $name+firstLowerCase~Source;
end

def type(field & link & multiple) trigger(declaration)
    private FieldMultiple<Field$type+firstUpperCase~,$valueType> $name+firstLowerCase~Field;
end

def type(field & multiple) trigger(declaration)
    private FieldMultiple<Field$type+firstUpperCase~,$valueType> $name+firstLowerCase~Field;
end

def type(field & select) trigger(declaration)
    private Field$type+firstUpperCase $name+firstLowerCase~Field;
    private io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource $name+firstLowerCase~Source;
end

def type(field & link) trigger(declaration)
    private Field$type+firstUpperCase $name+firstLowerCase~Field;
end

def type(field) trigger(declaration)
    private Field$type+firstUpperCase $name+firstLowerCase~Field;
end

def type(field & select) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
    $name+firstLowerCase~Source = new io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource(box().unit(), session(), node, $name+firstLowerCase~Field);
end

def type(field & link) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
end

def type(field & composite & multiple) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
    java.util.List<FieldComposite> $name+firstLowerCase~Fields = $name+firstLowerCase~Field.getAllFields();
    if ($name+firstLowerCase~ != null) {
        java.util.List<$definition+firstUpperCase$name+firstUpperCase~Template> $name+firstLowerCase~Children = $name+firstLowerCase~.children($definition+firstUpperCase$name+firstUpperCase~Template.class);
        for (int i=0; i<$name+firstLowerCase~Fields.size(); i++) if ($name+firstLowerCase~Children.size() > i) $name+firstLowerCase~Children.get(i).field($name+firstLowerCase~Fields.get(i));
    }
end

def type(field & composite) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
    if ($name+firstLowerCase != null) $name+firstLowerCase.field($name+firstLowerCase~Field);
end

def type(field & link) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
end

def type(field) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
end

def type(field & text & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(e.item())));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & text & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll());
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & text) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(e.value())));
end

def type(field & text) trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & number & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(new org.monet.bpi.types.Number((Double) e.item()))));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & number & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().mapToDouble(n -> n != null ? n.doubleValue() : 0).boxed().collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & number) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(new org.monet.bpi.types.Number((Double) e.value()))));
end

def type(field & number) trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get() != null ? $name+firstLowerCase~Field.get().doubleValue() : null);
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & boolean) trigger(init)
    $name+firstLowerCase~.onToggle(e -> save(b -> $name+firstLowerCase~Field.set(e.state() == io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On)));
end

def type(field & boolean) trigger(refresh)
    $name+firstLowerCase~.state($name+firstLowerCase~Field.get() ? io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On : io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & date & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.dateOf(e.item()))));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & date & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? f.getValue().toInstant() : null).collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & date) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.dateOf(e.value()))));
end

def type(field & date) trigger(refresh)
    $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.instantOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & memo & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(e.item())));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & memo & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll());
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & memo) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(e.value())));
end

def type(field & memo) trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & serial) trigger(init)
end

def type(field & serial) trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly(true);
end

def type(field & file & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.fileOf(e.item())));
        ((io.intino.alexandria.ui.displays.components.FileEditable<?,?>)e.component()).value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.getAsField(e.index())));
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & file & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(f) : null).collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & file) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.fileOf(e.value())));
        $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field));
    });
end

def type(field & file) trigger(refresh)
    $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & picture & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.pictureOf(e.item())));
        ((io.intino.alexandria.ui.displays.components.ImageEditable<?,?>)e.component()).value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.getAsField(e.index())));
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & picture & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(f) : null).collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & picture) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.pictureOf(e.value())));
        $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field));
    });
end

def type(field & picture) trigger(refresh)
    $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & check) trigger(init)
    $name+firstLowerCase~.onSelect(e -> save(b -> $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.checkListOf($name+firstLowerCase~Field.get(), e.selection()))));
end

def type(field & check) trigger(refresh)
    $name+firstLowerCase~.clear();
    java.util.List<org.monet.bpi.types.Term> $name+firstLowercase~Terms = new io.intino.goros.unit.box.ui.datasources.FieldCheckDatasource(box().unit(), session(), node, $name+firstLowerCase~Field).allItems();
    $name+firstLowerCase~.addAll($name+firstLowercase~Terms.stream().map(org.monet.bpi.types.Term::getLabel).collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.selectionOf($name+firstLowercase~Terms, $name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & link & multiple) trigger(init)
    $name+firstLowerCase~.valueProvider(io.intino.goros.unit.util.DisplayHelper.linkValueProvider());
    $name+firstLowerCase~.onSelect(e -> save(b -> {
        $name+firstLowerCase~Field.removeAll();
        $name+firstLowerCase~Field.addNewAll(io.intino.goros.unit.util.NodeHelper.linksOf(e.selection()));
    }));
end

def type(field & link & multiple) trigger(refresh)
    $name+firstLowerCase~.source(new io.intino.goros.unit.box.ui.datasources.FieldLinkDatasource(box().unit(), session(), "$code", node, org.monet.space.kernel.model.Dictionary.getInstance().getIndexDefinition("$indexCode")));
    $name+firstLowerCase.selection(io.intino.goros.unit.util.NodeHelper.nodeItemsOf($name+firstLowerCase~Field.getAll()));
    $name+firstLowerCase.readonly([$univocal ]$readonly);
end

def type(field & link) trigger(init)
    $name+firstLowerCase~.valueProvider(io.intino.goros.unit.util.DisplayHelper.linkValueProvider());
    $name+firstLowerCase~.onSelect(e -> {
        save(b -> {
            [$dependant+clear...[$NL]]
            $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.linkOf(e.selection()));
        });
        [$dependant+refresh...[$NL]]
    });
end

def type(field & link) trigger(refresh)
    $name+firstLowerCase~.source(new io.intino.goros.unit.box.ui.datasources.FieldLinkDatasource(box().unit(), session(), "$code", node, org.monet.space.kernel.model.Dictionary.getInstance().getIndexDefinition("$indexCode")));
    if ($name+firstLowerCase~Field.get() != null) $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.nodeItemOf($name+firstLowerCase~Field.get()));
    else $name+firstLowerCase.selection(java.util.Collections.emptyList());
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & select & multiple) trigger(init)
    $name+firstLowerCase~.onSelect(e -> save(b -> {
        $name+firstLowerCase~Field.removeAll();
        $name+firstLowerCase~Field.addNewAll(io.intino.goros.unit.util.NodeHelper.termsOf($name+firstLowerCase~Source, e.selection()));
    }));
end

def type(field & select & multiple) trigger(refresh)
    $name+firstLowerCase~Source.session(session());
    refresh$name+firstUpperCase~();
    $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.selectionOf($name+firstLowerCase~Source.allItems(), $name+firstLowerCase~Field.getAll()));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & select & inline) trigger(refresh)
    $name+firstLowerCase~Source.session(session());
    refresh$name+firstUpperCase~();
    $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.selectionOf($name+firstLowerCase~Source.allItems(), $name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & select) trigger(init)
    $name+firstLowerCase~.onSelect(e -> {
        save(b -> {
            [$dependant+clear...[$NL]]
            $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.termOf($name+firstLowerCase~Source, e.selection()));
        });
        [$dependant+refresh...[$NL]]
    });
end

def type(field & select) trigger(refreshMethod)
    private void refresh$name+firstUpperCase~() {
        $name+firstLowerCase~.clear();
        $name+firstLowerCase~.addAll($name+firstLowerCase~Source.items().stream().map(org.monet.bpi.types.Term::getLabel).collect(java.util.stream.Collectors.toList()));
    }
end

def type(field & select) trigger(refresh)
    $name+firstLowerCase~Source.session(session());
    refresh$name+firstUpperCase~();
    $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.selectionOf($name+firstLowerCase~Source.allItems(), $name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & composite & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> {});
        (($definition+firstUpperCase$name+firstUpperCase~Template)e.component()).node(node).field($name+firstLowerCase~Field.getAsField(e.index())).refresh();
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & composite & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~Field.getAllFields().forEach(field -> {
        $definition+firstUpperCase$name+firstUpperCase~Template display = $name+firstLowerCase~.add([$addProperties]).node(node).field(field).readonly(this.readonly);
        display.refresh();
    });
    $name+firstLowerCase~.onAdd(e -> save(b -> {
        FieldComposite fieldComposite = $name+firstLowerCase~Field.addNew();
        $definition+firstUpperCase$name+firstUpperCase~Template display = e.component();
        display.node(node);
        display.field(fieldComposite);
        display.readonly([$univocal ]$readonly);
        display.refresh();
    }));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field & composite) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> {}));
end

def type(field & composite) trigger(refresh)
    $name+firstLowerCase~.node(node);
    $name+firstLowerCase~.field($name+firstLowerCase~Field);
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
    $name+firstLowerCase~.refresh();
end

def type(field & node & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(((FieldNode)e.item()).get()));
        ((io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate)e.component()).node(node).field($name+firstLowerCase~Field.getAsField(e.index())).refresh();
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & node & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~Field.getAllFields().forEach(field -> {
        io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate display = $name+firstLowerCase~.add([$addProperties]).node(node).field(field).readonly(this.readonly).displayProvider(this);
        display.refresh();
    });
    $name+firstLowerCase~.onAdd(e -> save(b -> {
        FieldNode fieldNode = $name+firstLowerCase~Field.addNew();
        io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate display = e.component();
        display.node(node);
        display.field(fieldNode);
        display.displayProvider(this);
        display.readonly([$univocal ]$readonly);
        display.refresh();
    }));
    $name+firstLowerCase~.readonly([$univocal ]$readonly);
end

def type(field) trigger(refreshMethod)
end

def type(dependant & multiple) trigger(clear)
    $name+firstLowerCase~Field.removeAll();
end

def type(dependant) trigger(clear)
    $name+firstLowerCase~Field.clear();
end

def type(dependant) trigger(refresh)
    $name+firstLowerCase~.readonly($anchorName+firstLowerCase~.selection().size() <= 0);
    refresh$name+firstUpperCase~();
end

def type(univocal & prototype)
    isPrototype ||
end

def type(univocal)
end

def type(addProperties)
    "[$add+label...[; ]]", [$add...[ + "; " + ]]
end

def type(addPropertiesItem) trigger(label)
    $label
end

def type(addPropertiesItem & date)
    io.intino.goros.unit.util.NodeHelper.valueOrDefault(((Field~$type+firstUpperCase)field.getField("$code")))
end

def type(addPropertiesItem & link)
    io.intino.goros.unit.util.NodeHelper.valueOrDefault(((Field~$type+firstUpperCase)field.getField("$code")))
end

def type(addPropertiesItem)
    ((Field~$type+firstUpperCase)field.getField("$code")).get()
end

def type(field & node) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> {}));
end

def type(field & node) trigger(refresh)
    $name+firstLowerCase~.node(node);
    $name+firstLowerCase~.field($name+firstLowerCase~Field);
    $name+firstLowerCase~.readonly($readonly);
    $name+firstLowerCase~.displayProvider(this);
    $name+firstLowerCase~.refresh();
end

def type(compositeView)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.events.ChangeEvent;
    import io.intino.alexandria.ui.displays.events.ChangeListener;
    import org.monet.bpi.*;
    import io.intino.goros.unit.box.ui.datasources.FieldCompositeDatasource;
    import org.monet.space.kernel.model.Node;

    import java.util.function.Consumer;

    public class $definition+firstUpperCase~$name+firstUpperCase~Template extends Abstract$definition+firstUpperCase~$name+firstUpperCase~Template<$boxName+firstUpperCase~Box>[ implements $implements...[,]] {
        private Node node;
        private FieldComposite field;
        private boolean readonly = false;
        private ChangeListener changeListener;
        [$show+declaration]

        public $definition+firstUpperCase~$name+firstUpperCase~Template($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template readonly(boolean readonly) {
            this.readonly = readonly;
            [$editable+readonly]
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        [$editable]

        public $definition+firstUpperCase~$name+firstUpperCase~Template node(Node node) {
            this.node = node;
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template field(FieldComposite field) {
            this.field = field;
            updateFields();
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template onChange(ChangeListener listener) {
            this.changeListener = listener;
            return this;
        }

        @Override
        public void init() {
            super.init();
            [$show+init]
        }

        @Override
        public void refresh() {
            super.refresh();
            [$show+refresh]
        }

        [$show+refreshMethod]

        private void save(java.util.function.Consumer<Boolean> consumer) {
            consumer.accept(true);
            changeListener.accept(new ChangeEvent(this, field));
            updateFields();
        }

        private void updateFields() {
            if (field == null) return;
            FieldCompositeDatasource datasource = new FieldCompositeDatasource(box().unit(), session(), field);
            [$show+update]
        }

        [$displayProvider]
    }
end

def type(compositeDisplayProvider)
    @Override
    public io.intino.alexandria.ui.displays.Display displayFor(Node node, String view) {
        [$display...[$NL]]
        return null;
    }
end

def type(display)
    if (node.getDefinition().getCode().equals("$code") && (view == null || view.equals("$viewCode"))) {
        $package.$module+lowerCase.box.ui.displays.templates.$name+firstUpperCase~$viewName+firstUpperCase~ViewTemplate result = new $package.$module+lowerCase.box.ui.displays.templates.$name+firstUpperCase~$viewName+firstUpperCase~ViewTemplate(box());
        result.node(node);
        result.readonly(false);
        return result;
    }
end

def type(editable) trigger(readonly)
    if (field != null) refresh();
end

def type(editable)
    @Override
    public boolean readonly() {
        return readonly;
    }

    @Override
    public void reload() {
        refresh();
    }
end