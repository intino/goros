rule type(nodedefinition, embedded)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import org.monet.space.kernel.model.Node;
    import org.monet.space.kernel.model.Revision;
    import io.intino.goros.unit.util.DisplayHelper;

    import java.util.List;

    public class $name+firstUpperCase~EmbeddedTemplate extends Abstract$name+firstUpperCase~EmbeddedTemplate<$boxName+firstUpperCase~Box> {
        private Node node;
        private Revision revision;
        private boolean readonly = false;
        private io.intino.goros.unit.box.ui.ViewMode viewMode;
        <<$toolbar+editableDeclaration>>
        <<$toolbar+navigableDeclaration>>

        public $name+firstUpperCase~EmbeddedTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $name+firstUpperCase~EmbeddedTemplate node(Node node) {
            this.node = node;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate revision(org.monet.space.kernel.model.Revision revision) {
            this.revision = revision;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        public $name+firstUpperCase~EmbeddedTemplate hideToolbar() {
            toolbar.visible(false);
            return this;
        }

        <<$toolbar+editableEvents>>
        <<$toolbar+navigableEvents>>
        <<$toolbar+navigableMethods>>

        public void openView(String view) {
            openView(view, readonly);
        }

        public void openView(String view, boolean readonly) {
            readonly(readonly);
            org.monet.metamodel.NodeViewProperty nodeView = view != null ? node.getDefinition().getNodeView(view) : node.getDefinition().getDefaultView();
            if (nodeView == null) nodeView = node.getDefinition().getDefaultView();
            if (nodeView == null) return;
            viewSelector.select(io.intino.goros.unit.util.DisplayHelper.translation(nodeView.getLabel()));
            refreshToolbar();
        }

        public String selectedView() {
            List<String> selection = viewSelector.selection();
            return selection.size() > 0 ? selection.get(0) : null;
        }

        public void selectDefaultView() {
            io.intino.goros.unit.util.DisplayHelper.selectDefaultView(viewSelector, node);
        }

        @Override
        public void init() {
            super.init();
            initToolbar();
            initViews();
        }

        @Override
        public void refresh() {
            super.refresh();
            content.autoSize(viewMode == null || viewMode == io.intino.goros.unit.box.ui.ViewMode.Compact);
            if (revision != null) io.intino.goros.unit.util.DisplayHelper.selectNotSystemView(viewSelector, node);
            refreshToolbar();
            //refreshViewsVisibility();
            refreshView();
        }

        private void refreshToolbar() {
            boolean readonly = node.isLocked() || this.readonly;
            restore.readonly(readonly);
            copy.visible(node.isPrototype());
            edit.title(readonly ? "Editar" : "Finalizar edici√≥n");
            edit.highlight(readonly ? io.intino.alexandria.ui.displays.components.Actionable.Highlight.Outline : io.intino.alexandria.ui.displays.components.Actionable.Highlight.Fill);
            edit.visible(node.isEditable() && !node.getDefinition().isReadonly() && !node.isLocked());
            <<$toolbar+editableRefreshCall>>
            <<$toolbar+navigableRefreshCall>>
        }

        private void refreshViewsVisibility() {
            String selectedView = selectedView();
            <<$view+refreshVisibilityCall...[$NL]~>>
        }

        private void refreshView() {
            <<$view+refreshCall...[$NL]~>>
        }

        private void initToolbar() {
            toolbar.visible(revision == null);
            restore.visible(revision != null);
            restore.onExecute(e -> restore());
            copy.onExecute(e -> copy());
            edit.onExecute(e -> toggleEdition());
            <<$toolbar+editableInitCall>>
            <<$toolbar+navigableInitCall>>
        }

        private void initViews() {
            <<$view+initCall...[$NL]~>>
        }

        <<$view+refreshMethod...[$NL]~>>

        private Node locateNode() {
            Node node = this.node;
            if (node == null) return null;
            if (revision != null) node = io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNodeRevision(this.node.getId(), revision.getId());
            return node;
        }

        private void toggleEdition() {
            readonly(!readonly);
            <<$toolbar+editableCall>>
            refresh();
        }

        private void copy() {
            Node newNode = io.intino.goros.unit.util.NodeHelper.copyNode(node, language());
            if (node.isPrototype()) {
                newNode.getReference().setPrototype(true);
                io.intino.goros.unit.util.LayerHelper.nodeLayer().saveNode(newNode);
            }
            if (dispatchOperationListener != null) dispatchOperationListener.accept(io.intino.goros.unit.util.NodeHelper.clientOperationOf(newNode));
        }

        private void restore() {
            io.intino.goros.unit.util.LayerHelper.nodeLayer().restoreNode(revision);
            if (dispatchOperationListener != null) dispatchOperationListener.accept(io.intino.goros.unit.util.NodeHelper.clientOperationOf(revision));
        }

        private void fillLayer(Node<?> contain, io.intino.alexandria.ui.displays.components.Layer<?, ?> layer) {
            layer.title(contain.getLabel());
            AppTemplate template = new AppTemplate(box());
            layer.template(template);
            template.embedded(true);
        }

        private java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> dispatchOperationListener() {
            if (dispatchOperationListener != null) return dispatchOperationListener;
            return operation -> {
                if (operation == null) {
                    refreshView();
                    return;
                }
                String name = operation.getName().toLowerCase();
                if (!name.equals("shownodeview")) return;
                String id = operation.getData().get("Id").toString();
                if (!node.getId().equals(id)) return;
                String view = operation.getData().get("IdView").toString();
                String mode = operation.getData().get("Mode") != null ? operation.getData().get("Mode").toString() : null;
                boolean readonly = mode == null || !mode.contains("edit.html");
                openView(view, readonly);
            };
        }

        <<$toolbar+editableMethods>>
    }

rule type(nodedefinition, singleton)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import org.monet.space.kernel.model.Node;
    import io.intino.goros.unit.util.LayerHelper;

    public class $name+firstUpperCase~Template extends Abstract$name+firstUpperCase~Template<$boxName+firstUpperCase~Box> {
        private Node node;
        private boolean readonly = true;

        public $name+firstUpperCase~Template($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public void open(String code, boolean readonly) {
            node(LayerHelper.nodeLayer().locateNode(code));
            readonly(readonly);
            refresh();
        }

        public $name+firstUpperCase~Template node(Node node) {
            this.node = node;
            return this;
        }

        public $name+firstUpperCase~Template readonly(boolean value) {
            this.readonly = value;
            return this;
        }

        @Override
        public void init() {
            super.init();
            <<$desktop>>
            <<$parent>>
            <<$toolbar+removeListener>>
        }

        @Override
        public void refresh() {
            super.refresh();
            content.node(node);
            content.readonly(node.isLocked() || readonly);
            content.refresh();
            if (content.selectedView() == null) content.selectDefaultView();
        }

    }

rule type(nodedefinition)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import org.monet.space.kernel.components.ComponentPersistence;
    import org.monet.space.kernel.model.Node;

    public class $name+firstUpperCase~Template extends Abstract$name+firstUpperCase~Template<$boxName+firstUpperCase~Box> {
        private Node node;
        private String view;
        private boolean readonly = false;

        public $name+firstUpperCase~Template($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $name+firstUpperCase~Template node(Node node) {
            this.node = node;
            return this;
        }

        public void open(String id, String view, boolean readonly) {
            node(ComponentPersistence.getInstance().getNodeLayer().loadNode(id));
            this.view = view;
            this.readonly = readonly;
            refresh();
        }

        @Override
        public void refresh() {
            super.refresh();
            if (node == null) return;
            <<$parent+refresh>>
            refreshHeader(node);
            refreshContent(node);
        }

        private void refreshHeader(Node node) {
            label.value(node.getLabel());
            description.value(io.intino.goros.unit.util.DisplayHelper.description(node, this::translate));
        }

        private void refreshContent(Node node) {
            content.node(node);
            content.readonly(readonly);
            content.refresh();
            if (view != null) content.openView(view);
            else if (content.selectedView() == null) content.selectDefaultView();
        }
    }

rule type(toolbar, singleton) and trigger(editableInitCall)
    <<$operationsGroup+editableInitCall>>
    <<$operation+editableInitCall...[$NL]~>>

rule type(toolbar, collectable) and trigger(navigableInitCall)
    showCollectionBack.onExecute(e -> notifyShowCollection());
    showCollectionMenu.onExecute(e -> notifyShowCollection());

rule type(toolbar, singleton) and trigger(editableRefreshCall)
    <<$operationsGroup+editableRefreshCall>>
    <<$operation+editableRefreshCall...[$NL]~>>

rule type(toolbar, singleton) and trigger(editableEvents)
    public $definition+firstUpperCase~EmbeddedTemplate onFinishEdition(java.util.function.Consumer<Node> listener) {
        this.finishEditionListener = listener;
        return this;
    }

rule type(toolbar, collectable) and trigger(navigableEvents)
    public $definition+firstUpperCase~EmbeddedTemplate onShowCollection(java.util.function.Consumer<Node> listener) {
        this.showCollectionListener = listener;
        return this;
    }
    public $definition+firstUpperCase~EmbeddedTemplate onDispatchOperation(java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> listener) {
        this.dispatchOperationListener = listener;
        return this;
    }

rule type(toolbar) and trigger(navigableEvents)
    public $definition+firstUpperCase~EmbeddedTemplate onDispatchOperation(java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> listener) {
        this.dispatchOperationListener = listener;
        return this;
    }

rule type(toolbar, singleton) and trigger(editableMethods)
    <<$operationsGroup+editableMethods>>

rule type(toolbar, singleton) and trigger(removeListener)

rule type(toolbar, singleton) and trigger(editableDeclaration)
    private java.util.function.Consumer<Node> finishEditionListener;

rule type(toolbar, collectable) and trigger(navigableDeclaration)
    private java.util.function.Consumer<Node> showCollectionListener;
    private java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> dispatchOperationListener;

rule type(toolbar) and trigger(navigableDeclaration)
    private java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> dispatchOperationListener;

rule type(toolbar) and trigger(editableDeclaration)
    private java.util.function.Consumer<Node> finishEditionListener;
    private java.util.function.Consumer<Node> removeListener;

rule type(toolbar) and trigger(editableInitCall)
    <<$operationsGroup+editableInitCall>>
    <<$operation+editableInitCall...[$NL]~>>
    remove.onExecute(e -> removeNode());

rule type(toolbar) and trigger(editableRefreshCall)
    <<$operationsGroup+editableRefreshCall>>
    <<$operation+editableRefreshCall...[$NL]~>>
    remove.visible(!readonly && node.isEditable() && !node.isLocked() && !node.isSingleton() && !node.getDefinition().isReadonly() && !io.intino.goros.unit.util.NodeHelper.isEnvironment(node));

rule type(toolbar) and trigger(editableCall)
    if (readonly && finishEditionListener != null) finishEditionListener.accept(node);

rule type(toolbar) and trigger(removeListener)
    content.onRemove(e -> PathHelper.dispatch(box().routeManager(), soul(), node.getMainNode()));

rule type(toolbar) and trigger(editableEvents)
    public $definition+firstUpperCase~EmbeddedTemplate onRemove(java.util.function.Consumer<Node> listener) {
        this.removeListener = listener;
        return this;
    }

    public $definition+firstUpperCase~EmbeddedTemplate onFinishEdition(java.util.function.Consumer<Node> listener) {
        this.finishEditionListener = listener;
        return this;
    }

rule type(toolbar) and trigger(editableMethods)
    <<$operationsGroup+editableMethods>>
    private void removeNode() {
        String message = io.intino.goros.unit.util.NodeHelper.canRemove(node);
        if (message != null) {
            notifyUser(message, io.intino.alexandria.ui.displays.UserMessage.Type.Error);
            return;
        }
        io.intino.goros.unit.util.LayerHelper.nodeLayer().deleteNode(node);
        if (removeListener != null) removeListener.accept(node);
    }

rule type(toolbar, collectable) and trigger(navigableRefreshCall)
    label.value(node.getLabel());
    description.value(io.intino.goros.unit.util.DisplayHelper.description(node, this::translate, org.monet.space.kernel.library.LibraryDate.Format.NUMERIC));
    prototypeAdvise.visible(node.isPrototype());

rule type(toolbar) and trigger(navigableRefreshCall)

rule type(toolbar, collectable) and trigger(navigableMethods)
    public void bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {
        previous.bindTo(collection);
        previous.visible(collection != null);
        next.bindTo(collection);
        next.visible(collection != null);
    }
    public void showLabel(boolean value) {
        label.visible(value);
        description.visible(value);
    }
    public void viewMode(io.intino.goros.unit.box.ui.ViewMode value) {
        this.viewMode = value;
    }
    public void showCollectionVisibility() {
        showCollectionBack.visible(viewMode == io.intino.goros.unit.box.ui.ViewMode.Full);
        showCollectionMenu.visible(viewMode == io.intino.goros.unit.box.ui.ViewMode.Compact);
    }
    private void notifyShowCollection() {
        if (showCollectionListener == null) return;
        showCollectionListener.accept(node);
    }

rule type(toolbar) and trigger(navigableMethods)

rule type(operationsGroup) and trigger(editableMethods)
    private List<String> operacionesOptions() {
        java.util.List<String> result = new java.util.ArrayList<>();
        <<$operation+operacionesOptionsMethodCall...[$NL]~>>
        return result;
    }

    private void executeOperation(String option) {
        <<$operation+executeMethodCall...[$NL]~>>
    }

rule type(operationsGroup) and trigger(editableInitCall)
    operaciones.onExecute(e -> executeOperation(e.option()));

rule type(operation) and trigger(operacionesOptionsMethodCall)
    if (io.intino.goros.unit.util.AccountHelper.hasRoles(io.intino.goros.unit.util.NodeHelper.operation(node, "$name"), session()) && !node.isPrototype()) result.add("$label");

rule type(operation) and trigger(executeMethodCall)
    if (option.equals("$label")) io.intino.goros.unit.util.NodeHelper.executeOperation(session(), operaciones, node, "$name", translate("Operation executed"), dispatchOperationListener());

rule type(operation, download) and trigger(editableInitCall)
    $name+lowerCase.onExecute(e -> io.intino.goros.unit.util.NodeHelper.downloadOperation($name+lowerCase, node, "$name"));

rule type(operation, confirmation) and trigger(editableInitCall)
    $name+lowerCase.onExecute(e -> io.intino.goros.unit.util.NodeHelper.executeOperation(session(), $name+lowerCase, node, "$name", translate("Operation executed"), $dispatchOperationListener));
    $name+lowerCase.onBeforeAffirmed(e -> io.intino.goros.unit.util.NodeHelper.isOperationConfirmationRequired(node, "$name"));
    $name+lowerCase.onCancelAffirmed(e -> io.intino.goros.unit.util.NodeHelper.cancelOperation(session(), $name+lowerCase, node, "$name", translate("Operation canceled"), $dispatchOperationListener));

rule type(operation) and trigger(editableInitCall)
    $name+lowerCase.onExecute(e -> io.intino.goros.unit.util.NodeHelper.executeOperation(session(), $name+lowerCase, node, "$name", translate("Operation executed"), $dispatchOperationListener));

rule type(operationsGroup) and trigger(editableRefreshCall)
    operaciones.options(operacionesOptions());
    operaciones.visible(operacionesOptions().size() > 0);

rule type(operation) and trigger(editableRefreshCall)
    $name+lowerCase.visible(io.intino.goros.unit.util.AccountHelper.hasRoles(io.intino.goros.unit.util.NodeHelper.operation(node, "$name"), session()) && !node.isPrototype());

rule type (dispatchOperationListener, collection)
    this::dispatch

rule type (dispatchOperationListener, singleton)
    box().routeManager().routeDispatcher()

rule type (dispatchOperationListener)
    dispatchOperationListener()

rule type(nodeview, visibleWhenEmbedded) and trigger(initCall)

rule type(nodeview) and trigger(initCall)
    $name+firstLowerCase~View.onShow(e -> refresh$name+firstUpperCase~View());

rule type(nodeview, visibleWhenEmbedded) and trigger(refreshCall)

rule type(nodeview) and trigger(refreshCall)
    if ($name+firstLowerCase~View.isVisible()) viewSelector.select("$name+firstLowerCase");

rule type(nodeview, visibleWhenEmbedded) and trigger(refreshVisibilityCall)

rule type(nodeview, notVisibleOnRevision) and trigger(refreshVisibilityCall)
    $name+firstLowerCase~View.visible(selectedView != null && selectedView.equals("$name+firstLowerCase") && revision == null);

rule type(nodeview) and trigger(refreshVisibilityCall)
    $name+firstLowerCase~View.visible(selectedView != null && selectedView.equals("$name+firstLowerCase"));

rule type(nodeview, visibleWhenEmbedded) and trigger(refreshMethod)

rule type(nodeview) and trigger(refreshMethod)
    private void refresh$name+firstUpperCase~View() {
        Node node = locateNode();
        if (node == null) return;
        <<$contain+declaration>>
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.node(node);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.readonly(node.isLocked() || readonly);
        <<$contain+call>>
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.view("$code");
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh();
        <<$contain+open>>
    }

    <<$contain>>

rule type(contain) and trigger(declaration)
    Node contain = $name+firstLowerCase~ViewContain(node);

rule type(contain) and trigger(call)
    $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.contain(contain);

rule type(contain) and trigger(open)
    if (contain != null) {
        openContain.onOpen(e -> fillLayer(contain, e.layer()));
        openContain.address(path -> path.replace(":name", "$containName").replace(":id", contain.getId()).replace(":view", "$containView+firstLowerCase").replace(":mode", readonly ? "default" : "edit"));
    }
    openContain.visible(contain != null && contain.isSet());

rule type(contain)
    private Node $name+firstLowerCase~ViewContain(Node node) {
        if (this.revision != null) return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNodeRevision(io.intino.goros.unit.util.NodeHelper.getContainerContain(node, "$contain"), revision.getId());
        return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(io.intino.goros.unit.util.NodeHelper.getContainerContain(node,"$contain"));
    }

rule type(nodeView)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;
    import org.monet.bpi.*;
    import org.monet.space.kernel.model.Node;
    import io.intino.goros.unit.box.ui.datasources.FormDatasource;

    import java.util.function.Consumer;

    import static java.util.stream.Collectors.toList;

    public class $definition+firstUpperCase~$name+firstUpperCase~ViewTemplate extends Abstract$definition+firstUpperCase~$name+firstUpperCase~ViewTemplate<$boxName+firstUpperCase~Box><< implements $implements>> {
        private Node node;
        private String view;
        private boolean readonly = false;
        $show+declaration

        public $definition+firstUpperCase~$name+firstUpperCase~ViewTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $definition+firstUpperCase~$name+firstUpperCase~ViewTemplate node(Node node) {
            this.node = node;
            $updateFields+call
            return this;
        }

        public String view() {
            return this.view;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~ViewTemplate view(String view) {
            this.view = view;
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~ViewTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~ViewTemplate hideToolbar() {
            $show+hideToolbar
            return this;
        }

        $show
        <<$displayProvider>>
    }

rule type(updateFields) and trigger(call)
    updateFields();

rule type(show) and trigger(hideToolbar)

rule type(show, recenttask) and trigger(declaration)
    private org.monet.space.kernel.model.Task<?> task;

rule type(show, recenttask)
    @Override
    public void init() {
        super.init();
        initToolbar();
        initViews();
    }

	private void initToolbar() {
		toolbar.onUpdate(task -> refresh());
		toolbar.onChange(e -> refresh());
		toolbar.onAbort(e -> refresh());
	}

	private void initViews() {
	    <<$tasktype+initCall...[$NL]~>>
	}

	@Override
	public void refresh() {
		super.refresh();
		task = io.intino.goros.unit.util.NodeHelper.recentTask(node, view);
		noTaskMessage.visible(task == null);
		viewsBlock.visible(task != null);
		refreshToolbar();
		showView();
	}

	private void refreshToolbar() {
		boolean visible = task != null;
		toolbarBlock.visible(visible);
		if (!visible) return;
		toolbar.task(task);
		toolbar.readonly(readonly);
		toolbar.refresh();
	}

	private void showView() {
	    hideViews();
	    if (task == null) return;
	    String code = task.getCode();
	    <<$tasktype+showCall...[$NL]~>>
	}

	private void hideViews() {
        <<$tasktype+hideCall...[$NL]~>>
	}

    <<$tasktype+refreshMethod...[$NL]~>>

rule type(tasktype) and trigger(initCall)
    $name+firstLowerCase~View.onShow(e -> refresh$name+firstUpperCase~View(task));

rule type(tasktype) and trigger(showCall)
    if (code.equals("$code")) $name+firstLowerCase~View.show();

rule type(tasktype) and trigger(hideCall)
    $name+firstLowerCase~View.hide();

rule type(tasktype) and trigger(refreshMethod)
	private void refresh$name+firstUpperCase~View(org.monet.space.kernel.model.Task<?> task) {
		$name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.task(task);
		$name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.readonly(readonly);
		$name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh();
	}

rule type(show, revisions) and trigger(declaration)

rule type(show, revisions)
	@Override
	public void refresh() {
		super.refresh();
		revisionsStamp.node(node);
		revisionsStamp.readonly(node.isLocked() || readonly);
		revisionsStamp.onSelect(this::openRevision);
		revisionsStamp.refresh();
	}

	private void openRevision(org.monet.space.kernel.model.Revision revision) {
		selectRevisionPage.visible(false);
		revisionPage.visible(true);
		currentRevisionStamp.node(node);
		currentRevisionStamp.revision(revision);
		currentRevisionStamp.readonly(node.isLocked() || readonly);
		currentRevisionStamp.refresh();
	}

rule type(show, location) and trigger(declaration)

rule type(show, location)
	@Override
	public void refresh() {
		super.refresh();
		refreshLocationView();
	}

    private void refreshLocationView() {
        if (node == null) return;
        locationViewStamp.node(node);
        locationViewStamp.readonly(node.isLocked() || readonly);
        locationViewStamp.view(view);
        locationViewStamp.refresh();
    }

rule type(desktop)
    desktopLink.address(path -> path.replace(":name", "$name+lowerCase").replace(":mode", readonly ? "default" : "edit"));
    desktopLink.onExecute(e -> notifier.dispatch(desktopLink.path().replace(":name", "$name+lowerCase").replace(":mode", readonly ? "default" : "edit")));

rule type(parent) and trigger(refresh)
    parentLink.address(path -> path.replace(":name", io.intino.goros.unit.util.NodeHelper.nameOf(node.getParent())).replace(":mode", readonly ? "default" : "edit"));
    parentLink.title(node.getParent() != null ? node.getParent().getLabel() : "Inicio");

rule type(parent)
    parentLink.address(path -> path.replace(":name", "$name+lowerCase").replace(":mode", readonly ? "edit" : "default"));