package io.intino.goros.modernizing.monet.renderers.templates.java;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class NodeDefinitionTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(allTypes("nodedefinition", "embedded")).output(literal("package ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box;\nimport org.monet.space.kernel.model.Node;\nimport org.monet.space.kernel.model.Revision;\nimport io.intino.goros.unit.util.DisplayHelper;\n\nimport java.util.List;\n\npublic class ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate extends Abstract")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate<")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private Revision revision;\n    private boolean readonly = false;\n    private io.intino.goros.unit.box.ui.ViewMode viewMode;\n    ")).output(expression().output(placeholder("toolbar", "editableDeclaration"))).output(literal("\n    ")).output(expression().output(placeholder("toolbar", "navigableDeclaration"))).output(literal("\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate(")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate revision(org.monet.space.kernel.model.Revision revision) {\n        this.revision = revision;\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate hideToolbar() {\n        toolbar.visible(false);\n        return this;\n    }\n\n    ")).output(expression().output(placeholder("toolbar", "editableEvents"))).output(literal("\n    ")).output(expression().output(placeholder("toolbar", "navigableEvents"))).output(literal("\n    ")).output(expression().output(placeholder("toolbar", "navigableMethods"))).output(literal("\n\n    public void openView(String view) {\n        openView(view, readonly);\n    }\n\n    public void openView(String view, boolean readonly) {\n        readonly(readonly);\n        org.monet.metamodel.NodeViewProperty nodeView = view != null ? node.getDefinition().getNodeView(view) : node.getDefinition().getDefaultView();\n        if (nodeView == null) nodeView = node.getDefinition().getDefaultView();\n        if (nodeView == null) return;\n        viewSelector.select(io.intino.goros.unit.util.DisplayHelper.translation(nodeView.getLabel()));\n        refreshToolbar();\n    }\n\n    public String selectedView() {\n        List<String> selection = viewSelector.selection();\n        return selection.size() > 0 ? selection.get(0) : null;\n    }\n\n    public void selectDefaultView() {\n        io.intino.goros.unit.util.DisplayHelper.selectDefaultView(viewSelector, node);\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        initToolbar();\n        initViews();\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        content.autoSize(viewMode == null || viewMode == io.intino.goros.unit.box.ui.ViewMode.Compact);\n        if (revision != null) io.intino.goros.unit.util.DisplayHelper.selectNotSystemView(viewSelector, node);\n        refreshToolbar();\n        //refreshViewsVisibility();\n        refreshView();\n    }\n\n    private void refreshToolbar() {\n        boolean readonly = node.isLocked() || this.readonly;\n        restore.readonly(readonly);\n        copy.visible(node.isPrototype());\n        edit.title(readonly ? \"Editar\" : \"Finalizar ediciÃ³n\");\n        edit.highlight(readonly ? io.intino.alexandria.ui.displays.components.Actionable.Highlight.Outline : io.intino.alexandria.ui.displays.components.Actionable.Highlight.Fill);\n        edit.visible(node.isEditable() && !node.getDefinition().isReadonly() && !node.isLocked());\n        ")).output(expression().output(placeholder("toolbar", "editableRefreshCall"))).output(literal("\n        ")).output(expression().output(placeholder("toolbar", "navigableRefreshCall"))).output(literal("\n    }\n\n    private void refreshViewsVisibility() {\n        String selectedView = selectedView();\n        ")).output(expression().output(placeholder("view", "refreshVisibilityCall").multiple("\n"))).output(literal("\n    }\n\n    private void refreshView() {\n        ")).output(expression().output(placeholder("view", "refreshCall").multiple("\n"))).output(literal("\n    }\n\n    private void initToolbar() {\n        toolbar.visible(revision == null);\n        restore.visible(revision != null);\n        restore.onExecute(e -> restore());\n        copy.onExecute(e -> copy());\n        edit.onExecute(e -> toggleEdition());\n        ")).output(expression().output(placeholder("toolbar", "editableInitCall"))).output(literal("\n        ")).output(expression().output(placeholder("toolbar", "navigableInitCall"))).output(literal("\n    }\n\n    private void initViews() {\n        ")).output(expression().output(placeholder("view", "initCall").multiple("\n"))).output(literal("\n    }\n\n    ")).output(expression().output(placeholder("view", "refreshMethod").multiple("\n"))).output(literal("\n\n    private Node locateNode() {\n        Node node = this.node;\n        if (node == null) return null;\n        if (revision != null) node = io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNodeRevision(this.node.getId(), revision.getId());\n        return node;\n    }\n\n    private void toggleEdition() {\n        readonly(!readonly);\n        ")).output(expression().output(placeholder("toolbar", "editableCall"))).output(literal("\n        refresh();\n    }\n\n    private void copy() {\n        Node newNode = io.intino.goros.unit.util.NodeHelper.copyNode(node, language());\n        if (node.isPrototype()) {\n            newNode.getReference().setPrototype(true);\n            io.intino.goros.unit.util.LayerHelper.nodeLayer().saveNode(newNode);\n        }\n        if (dispatchOperationListener != null) dispatchOperationListener.accept(io.intino.goros.unit.util.NodeHelper.clientOperationOf(newNode));\n    }\n\n    private void restore() {\n        io.intino.goros.unit.util.LayerHelper.nodeLayer().restoreNode(revision);\n        if (dispatchOperationListener != null) dispatchOperationListener.accept(io.intino.goros.unit.util.NodeHelper.clientOperationOf(revision));\n    }\n\n    private void fillLayer(Node<?> contain, io.intino.alexandria.ui.displays.components.Layer<?, ?> layer) {\n        layer.title(contain.getLabel());\n        AppTemplate template = new AppTemplate(box());\n        layer.template(template);\n        template.embedded(true);\n    }\n\n    private java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> dispatchOperationListener() {\n        if (dispatchOperationListener != null) return dispatchOperationListener;\n        return operation -> {\n            if (operation == null) {\n                refreshView();\n                return;\n            }\n            String name = operation.getName().toLowerCase();\n            if (!name.equals(\"shownodeview\")) return;\n            String id = operation.getData().get(\"Id\").toString();\n            if (!node.getId().equals(id)) return;\n            String view = operation.getData().get(\"IdView\").toString();\n            String mode = operation.getData().get(\"Mode\") != null ? operation.getData().get(\"Mode\").toString() : null;\n            boolean readonly = mode == null || !mode.contains(\"edit.html\");\n            openView(view, readonly);\n        };\n    }\n\n    ")).output(expression().output(placeholder("toolbar", "editableMethods"))).output(literal("\n}")));
		rules.add(rule().condition(allTypes("nodedefinition", "singleton")).output(literal("package ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.unit.util.LayerHelper;\n\npublic class ")).output(placeholder("name", "firstUpperCase")).output(literal("Template extends Abstract")).output(placeholder("name", "firstUpperCase")).output(literal("Template<")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private boolean readonly = true;\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("Template(")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public void open(String code, boolean readonly) {\n        node(LayerHelper.nodeLayer().locateNode(code));\n        readonly(readonly);\n        refresh();\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("Template node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("Template readonly(boolean value) {\n        this.readonly = value;\n        return this;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        ")).output(expression().output(placeholder("desktop"))).output(literal("\n        ")).output(expression().output(placeholder("parent"))).output(literal("\n        ")).output(expression().output(placeholder("toolbar", "removeListener"))).output(literal("\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        content.node(node);\n        content.readonly(node.isLocked() || readonly);\n        content.refresh();\n        if (content.selectedView() == null) content.selectDefaultView();\n    }\n\n}")));
		rules.add(rule().condition(allTypes("nodedefinition")).output(literal("package ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box;\nimport org.monet.space.kernel.components.ComponentPersistence;\nimport org.monet.space.kernel.model.Node;\n\npublic class ")).output(placeholder("name", "firstUpperCase")).output(literal("Template extends Abstract")).output(placeholder("name", "firstUpperCase")).output(literal("Template<")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private String view;\n    private boolean readonly = false;\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("Template(")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(placeholder("name", "firstUpperCase")).output(literal("Template node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public void open(String id, String view, boolean readonly) {\n        node(ComponentPersistence.getInstance().getNodeLayer().loadNode(id));\n        this.view = view;\n        this.readonly = readonly;\n        refresh();\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        if (node == null) return;\n        ")).output(expression().output(placeholder("parent", "refresh"))).output(literal("\n        refreshHeader(node);\n        refreshContent(node);\n    }\n\n    private void refreshHeader(Node node) {\n        label.value(node.getLabel());\n        description.value(io.intino.goros.unit.util.DisplayHelper.description(node, this::translate));\n    }\n\n    private void refreshContent(Node node) {\n        content.node(node);\n        content.readonly(readonly);\n        content.refresh();\n        if (view != null) content.openView(view);\n        else if (content.selectedView() == null) content.selectDefaultView();\n    }\n}")));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("editableinitcall"))).output(expression().output(placeholder("operationsGroup", "editableInitCall"))).output(literal("\n")).output(expression().output(placeholder("operation", "editableInitCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar", "collectable"), trigger("navigableinitcall"))).output(literal("showCollectionBack.onExecute(e -> notifyShowCollection());\nshowCollectionMenu.onExecute(e -> notifyShowCollection());")));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("editablerefreshcall"))).output(expression().output(placeholder("operationsGroup", "editableRefreshCall"))).output(literal("\n")).output(expression().output(placeholder("operation", "editableRefreshCall").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("editableevents"))).output(literal("public ")).output(placeholder("definition", "firstUpperCase")).output(literal("EmbeddedTemplate onFinishEdition(java.util.function.Consumer<Node> listener) {\n    this.finishEditionListener = listener;\n    return this;\n}")));
		rules.add(rule().condition(all(allTypes("toolbar", "collectable"), trigger("navigableevents"))).output(literal("public ")).output(placeholder("definition", "firstUpperCase")).output(literal("EmbeddedTemplate onShowCollection(java.util.function.Consumer<Node> listener) {\n    this.showCollectionListener = listener;\n    return this;\n}\npublic ")).output(placeholder("definition", "firstUpperCase")).output(literal("EmbeddedTemplate onDispatchOperation(java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> listener) {\n    this.dispatchOperationListener = listener;\n    return this;\n}")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("navigableevents"))).output(literal("public ")).output(placeholder("definition", "firstUpperCase")).output(literal("EmbeddedTemplate onDispatchOperation(java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> listener) {\n    this.dispatchOperationListener = listener;\n    return this;\n}")));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("editablemethods"))).output(expression().output(placeholder("operationsGroup", "editableMethods"))));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("removelistener"))));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("editabledeclaration"))).output(literal("private java.util.function.Consumer<Node> finishEditionListener;")));
		rules.add(rule().condition(all(allTypes("toolbar", "collectable"), trigger("navigabledeclaration"))).output(literal("private java.util.function.Consumer<Node> showCollectionListener;\nprivate java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> dispatchOperationListener;")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("navigabledeclaration"))).output(literal("private java.util.function.Consumer<org.monet.space.kernel.model.ClientOperation> dispatchOperationListener;")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editabledeclaration"))).output(literal("private java.util.function.Consumer<Node> finishEditionListener;\nprivate java.util.function.Consumer<Node> removeListener;")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editableinitcall"))).output(expression().output(placeholder("operationsGroup", "editableInitCall"))).output(literal("\n")).output(expression().output(placeholder("operation", "editableInitCall").multiple("\n"))).output(literal("\nremove.onExecute(e -> removeNode());")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editablerefreshcall"))).output(expression().output(placeholder("operationsGroup", "editableRefreshCall"))).output(literal("\n")).output(expression().output(placeholder("operation", "editableRefreshCall").multiple("\n"))).output(literal("\nremove.visible(!readonly && node.isEditable() && !node.isLocked() && !node.isSingleton() && !node.getDefinition().isReadonly() && !io.intino.goros.unit.util.NodeHelper.isEnvironment(node));")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editablecall"))).output(literal("if (readonly && finishEditionListener != null) finishEditionListener.accept(node);")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("removelistener"))).output(literal("content.onRemove(e -> PathHelper.dispatch(box().routeManager(), soul(), node.getMainNode()));")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editableevents"))).output(literal("public ")).output(placeholder("definition", "firstUpperCase")).output(literal("EmbeddedTemplate onRemove(java.util.function.Consumer<Node> listener) {\n    this.removeListener = listener;\n    return this;\n}\n\npublic ")).output(placeholder("definition", "firstUpperCase")).output(literal("EmbeddedTemplate onFinishEdition(java.util.function.Consumer<Node> listener) {\n    this.finishEditionListener = listener;\n    return this;\n}")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editablemethods"))).output(expression().output(placeholder("operationsGroup", "editableMethods"))).output(literal("\nprivate void removeNode() {\n    String message = io.intino.goros.unit.util.NodeHelper.canRemove(node);\n    if (message != null) {\n        notifyUser(message, io.intino.alexandria.ui.displays.UserMessage.Type.Error);\n        return;\n    }\n    io.intino.goros.unit.util.LayerHelper.nodeLayer().deleteNode(node);\n    if (removeListener != null) removeListener.accept(node);\n}")));
		rules.add(rule().condition(all(allTypes("toolbar", "collectable"), trigger("navigablerefreshcall"))).output(literal("label.value(node.getLabel());\ndescription.value(io.intino.goros.unit.util.DisplayHelper.description(node, this::translate, org.monet.space.kernel.library.LibraryDate.Format.NUMERIC));\nprototypeAdvise.visible(node.isPrototype());")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("navigablerefreshcall"))));
		rules.add(rule().condition(all(allTypes("toolbar", "collectable"), trigger("navigablemethods"))).output(literal("public void bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {\n    previous.bindTo(collection);\n    previous.visible(collection != null);\n    next.bindTo(collection);\n    next.visible(collection != null);\n}\npublic void showLabel(boolean value) {\n    label.visible(value);\n    description.visible(value);\n}\npublic void viewMode(io.intino.goros.unit.box.ui.ViewMode value) {\n    this.viewMode = value;\n}\npublic void showCollectionVisibility() {\n    showCollectionBack.visible(viewMode == io.intino.goros.unit.box.ui.ViewMode.Full);\n    showCollectionMenu.visible(viewMode == io.intino.goros.unit.box.ui.ViewMode.Compact);\n}\nprivate void notifyShowCollection() {\n    if (showCollectionListener == null) return;\n    showCollectionListener.accept(node);\n}")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("navigablemethods"))));
		rules.add(rule().condition(all(allTypes("operationsGroup"), trigger("editablemethods"))).output(literal("private List<String> operacionesOptions() {\n    java.util.List<String> result = new java.util.ArrayList<>();\n    ")).output(expression().output(placeholder("operation", "operacionesOptionsMethodCall").multiple("\n"))).output(literal("\n    return result;\n}\n\nprivate void executeOperation(String option) {\n    ")).output(expression().output(placeholder("operation", "executeMethodCall").multiple("\n"))).output(literal("\n}")));
		rules.add(rule().condition(all(allTypes("operationsGroup"), trigger("editableinitcall"))).output(literal("operaciones.onExecute(e -> executeOperation(e.option()));")));
		rules.add(rule().condition(all(allTypes("operation"), trigger("operacionesoptionsmethodcall"))).output(literal("if (io.intino.goros.unit.util.AccountHelper.hasRoles(io.intino.goros.unit.util.NodeHelper.operation(node, \"")).output(placeholder("name")).output(literal("\"), session()) && !node.isPrototype()) result.add(\"")).output(placeholder("label")).output(literal("\");")));
		rules.add(rule().condition(all(allTypes("operation"), trigger("executemethodcall"))).output(literal("if (option.equals(\"")).output(placeholder("label")).output(literal("\")) io.intino.goros.unit.util.NodeHelper.executeOperation(session(), operaciones, node, \"")).output(placeholder("name")).output(literal("\", translate(\"Operation executed\"), dispatchOperationListener());")));
		rules.add(rule().condition(all(allTypes("operation", "download"), trigger("editableinitcall"))).output(placeholder("name", "lowerCase")).output(literal(".onExecute(e -> io.intino.goros.unit.util.NodeHelper.downloadOperation(")).output(placeholder("name", "lowerCase")).output(literal(", node, \"")).output(placeholder("name")).output(literal("\"));")));
		rules.add(rule().condition(all(allTypes("operation", "confirmation"), trigger("editableinitcall"))).output(placeholder("name", "lowerCase")).output(literal(".onExecute(e -> io.intino.goros.unit.util.NodeHelper.executeOperation(session(), ")).output(placeholder("name", "lowerCase")).output(literal(", node, \"")).output(placeholder("name")).output(literal("\", translate(\"Operation executed\"), ")).output(placeholder("dispatchOperationListener")).output(literal("));\n")).output(placeholder("name", "lowerCase")).output(literal(".onBeforeAffirmed(e -> io.intino.goros.unit.util.NodeHelper.isOperationConfirmationRequired(node, \"")).output(placeholder("name")).output(literal("\"));\n")).output(placeholder("name", "lowerCase")).output(literal(".onCancelAffirmed(e -> io.intino.goros.unit.util.NodeHelper.cancelOperation(session(), ")).output(placeholder("name", "lowerCase")).output(literal(", node, \"")).output(placeholder("name")).output(literal("\", translate(\"Operation canceled\"), ")).output(placeholder("dispatchOperationListener")).output(literal("));")));
		rules.add(rule().condition(all(allTypes("operation"), trigger("editableinitcall"))).output(placeholder("name", "lowerCase")).output(literal(".onExecute(e -> io.intino.goros.unit.util.NodeHelper.executeOperation(session(), ")).output(placeholder("name", "lowerCase")).output(literal(", node, \"")).output(placeholder("name")).output(literal("\", translate(\"Operation executed\"), ")).output(placeholder("dispatchOperationListener")).output(literal("));")));
		rules.add(rule().condition(all(allTypes("operationsGroup"), trigger("editablerefreshcall"))).output(literal("operaciones.options(operacionesOptions());\noperaciones.visible(operacionesOptions().size() > 0);")));
		rules.add(rule().condition(all(allTypes("operation"), trigger("editablerefreshcall"))).output(placeholder("name", "lowerCase")).output(literal(".visible(io.intino.goros.unit.util.AccountHelper.hasRoles(io.intino.goros.unit.util.NodeHelper.operation(node, \"")).output(placeholder("name")).output(literal("\"), session()) && !node.isPrototype());")));
		rules.add(rule().condition(allTypes("dispatchOperationListener", "collection")).output(literal("this::dispatch")));
		rules.add(rule().condition(allTypes("dispatchOperationListener", "singleton")).output(literal("box().routeManager().routeDispatcher()")));
		rules.add(rule().condition(allTypes("dispatchOperationListener")).output(literal("dispatchOperationListener()")));
		rules.add(rule().condition(all(allTypes("nodeview", "visibleWhenEmbedded"), trigger("initcall"))));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("initcall"))).output(placeholder("name", "firstLowerCase")).output(literal("View.onShow(e -> refresh")).output(placeholder("name", "firstUpperCase")).output(literal("View());")));
		rules.add(rule().condition(all(allTypes("nodeview", "visibleWhenEmbedded"), trigger("refreshcall"))));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("refreshcall"))).output(literal("if (")).output(placeholder("name", "firstLowerCase")).output(literal("View.isVisible()) viewSelector.select(\"")).output(placeholder("name", "firstLowerCase")).output(literal("\");")));
		rules.add(rule().condition(all(allTypes("nodeview", "visibleWhenEmbedded"), trigger("refreshvisibilitycall"))));
		rules.add(rule().condition(all(allTypes("nodeview", "notVisibleOnRevision"), trigger("refreshvisibilitycall"))).output(placeholder("name", "firstLowerCase")).output(literal("View.visible(selectedView != null && selectedView.equals(\"")).output(placeholder("name", "firstLowerCase")).output(literal("\") && revision == null);")));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("refreshvisibilitycall"))).output(placeholder("name", "firstLowerCase")).output(literal("View.visible(selectedView != null && selectedView.equals(\"")).output(placeholder("name", "firstLowerCase")).output(literal("\"));")));
		rules.add(rule().condition(all(allTypes("nodeview", "visibleWhenEmbedded"), trigger("refreshmethod"))));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("refreshmethod"))).output(literal("private void refresh")).output(placeholder("name", "firstUpperCase")).output(literal("View() {\n    Node node = locateNode();\n    if (node == null) return;\n    ")).output(expression().output(placeholder("contain", "declaration"))).output(literal("\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.node(node);\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.readonly(node.isLocked() || readonly);\n    ")).output(expression().output(placeholder("contain", "call"))).output(literal("\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.view(\"")).output(placeholder("code")).output(literal("\");\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n    ")).output(expression().output(placeholder("contain", "open"))).output(literal("\n}\n\n")).output(expression().output(placeholder("contain"))));
		rules.add(rule().condition(all(allTypes("contain"), trigger("declaration"))).output(literal("Node contain = ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewContain(node);")));
		rules.add(rule().condition(all(allTypes("contain"), trigger("call"))).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.contain(contain);")));
		rules.add(rule().condition(all(allTypes("contain"), trigger("open"))).output(literal("if (contain != null) {\n    openContain.onOpen(e -> fillLayer(contain, e.layer()));\n    openContain.address(path -> path.replace(\":name\", \"")).output(placeholder("containName")).output(literal("\").replace(\":id\", contain.getId()).replace(\":view\", \"")).output(placeholder("containView", "firstLowerCase")).output(literal("\").replace(\":mode\", readonly ? \"default\" : \"edit\"));\n}\nopenContain.visible(contain != null && contain.isSet());")));
		rules.add(rule().condition(allTypes("contain")).output(literal("private Node ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewContain(Node node) {\n    if (this.revision != null) return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNodeRevision(io.intino.goros.unit.util.NodeHelper.getContainerContain(node, \"")).output(placeholder("contain")).output(literal("\"), revision.getId());\n    return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(io.intino.goros.unit.util.NodeHelper.getContainerContain(node,\"")).output(placeholder("contain")).output(literal("\"));\n}")));
		rules.add(rule().condition(allTypes("nodeView")).output(literal("package ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;\nimport org.monet.bpi.*;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.unit.box.ui.datasources.FormDatasource;\n\nimport java.util.function.Consumer;\n\nimport static java.util.stream.Collectors.toList;\n\npublic class ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate extends Abstract")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate<")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box>")).output(expression().output(literal(" implements ")).output(placeholder("implements"))).output(literal(" {\n    private Node node;\n    private String view;\n    private boolean readonly = false;\n    ")).output(placeholder("show", "declaration")).output(literal("\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate(")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate node(Node node) {\n        this.node = node;\n        ")).output(placeholder("updateFields", "call")).output(literal("\n        return this;\n    }\n\n    public String view() {\n        return this.view;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate view(String view) {\n        this.view = view;\n        return this;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate hideToolbar() {\n        ")).output(placeholder("show", "hideToolbar")).output(literal("\n        return this;\n    }\n\n    ")).output(placeholder("show")).output(literal("\n    ")).output(expression().output(placeholder("displayProvider"))).output(literal("\n}")));
		rules.add(rule().condition(all(allTypes("updateFields"), trigger("call"))).output(literal("updateFields();")));
		rules.add(rule().condition(all(allTypes("show"), trigger("hidetoolbar"))));
		rules.add(rule().condition(all(allTypes("show", "recenttask"), trigger("declaration"))).output(literal("private org.monet.space.kernel.model.Task<?> task;")));
		rules.add(rule().condition(allTypes("show", "recenttask")).output(literal("@Override\npublic void init() {\n    super.init();\n    initToolbar();\n    initViews();\n}\n\nprivate void initToolbar() {\n\ttoolbar.onUpdate(task -> refresh());\n\ttoolbar.onChange(e -> refresh());\n\ttoolbar.onAbort(e -> refresh());\n}\n\nprivate void initViews() {\n    ")).output(expression().output(placeholder("tasktype", "initCall").multiple("\n"))).output(literal("\n}\n\n@Override\npublic void refresh() {\n\tsuper.refresh();\n\ttask = io.intino.goros.unit.util.NodeHelper.recentTask(node, view);\n\tnoTaskMessage.visible(task == null);\n\tviewsBlock.visible(task != null);\n\trefreshToolbar();\n\tshowView();\n}\n\nprivate void refreshToolbar() {\n\tboolean visible = task != null;\n\ttoolbarBlock.visible(visible);\n\tif (!visible) return;\n\ttoolbar.task(task);\n\ttoolbar.readonly(readonly);\n\ttoolbar.refresh();\n}\n\nprivate void showView() {\n    hideViews();\n    if (task == null) return;\n    String code = task.getCode();\n    ")).output(expression().output(placeholder("tasktype", "showCall").multiple("\n"))).output(literal("\n}\n\nprivate void hideViews() {\n    ")).output(expression().output(placeholder("tasktype", "hideCall").multiple("\n"))).output(literal("\n}\n\n")).output(expression().output(placeholder("tasktype", "refreshMethod").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("tasktype"), trigger("initcall"))).output(placeholder("name", "firstLowerCase")).output(literal("View.onShow(e -> refresh")).output(placeholder("name", "firstUpperCase")).output(literal("View(task));")));
		rules.add(rule().condition(all(allTypes("tasktype"), trigger("showcall"))).output(literal("if (code.equals(\"")).output(placeholder("code")).output(literal("\")) ")).output(placeholder("name", "firstLowerCase")).output(literal("View.show();")));
		rules.add(rule().condition(all(allTypes("tasktype"), trigger("hidecall"))).output(placeholder("name", "firstLowerCase")).output(literal("View.hide();")));
		rules.add(rule().condition(all(allTypes("tasktype"), trigger("refreshmethod"))).output(literal("private void refresh")).output(placeholder("name", "firstUpperCase")).output(literal("View(org.monet.space.kernel.model.Task<?> task) {\n\t")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.task(task);\n\t")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.readonly(readonly);\n\t")).output(placeholder("name", "firstLowerCase")).output(literal("View.")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n}")));
		rules.add(rule().condition(all(allTypes("show", "revisions"), trigger("declaration"))));
		rules.add(rule().condition(allTypes("show", "revisions")).output(literal("@Override\npublic void refresh() {\n\tsuper.refresh();\n\trevisionsStamp.node(node);\n\trevisionsStamp.readonly(node.isLocked() || readonly);\n\trevisionsStamp.onSelect(this::openRevision);\n\trevisionsStamp.refresh();\n}\n\nprivate void openRevision(org.monet.space.kernel.model.Revision revision) {\n\tselectRevisionPage.visible(false);\n\trevisionPage.visible(true);\n\tcurrentRevisionStamp.node(node);\n\tcurrentRevisionStamp.revision(revision);\n\tcurrentRevisionStamp.readonly(node.isLocked() || readonly);\n\tcurrentRevisionStamp.refresh();\n}")));
		rules.add(rule().condition(all(allTypes("show", "location"), trigger("declaration"))));
		rules.add(rule().condition(allTypes("show", "location")).output(literal("@Override\npublic void refresh() {\n\tsuper.refresh();\n\trefreshLocationView();\n}\n\nprivate void refreshLocationView() {\n    if (node == null) return;\n    locationViewStamp.node(node);\n    locationViewStamp.readonly(node.isLocked() || readonly);\n    locationViewStamp.view(view);\n    locationViewStamp.refresh();\n}")));
		rules.add(rule().condition(allTypes("desktop")).output(literal("desktopLink.address(path -> path.replace(\":name\", \"")).output(placeholder("name", "lowerCase")).output(literal("\").replace(\":mode\", readonly ? \"default\" : \"edit\"));\ndesktopLink.onExecute(e -> notifier.dispatch(desktopLink.path().replace(\":name\", \"")).output(placeholder("name", "lowerCase")).output(literal("\").replace(\":mode\", readonly ? \"default\" : \"edit\")));")));
		rules.add(rule().condition(all(allTypes("parent"), trigger("refresh"))).output(literal("parentLink.address(path -> path.replace(\":name\", io.intino.goros.unit.util.NodeHelper.nameOf(node.getParent())).replace(\":mode\", readonly ? \"default\" : \"edit\"));\nparentLink.title(node.getParent() != null ? node.getParent().getLabel() : \"Inicio\");")));
		rules.add(rule().condition(allTypes("parent")).output(literal("parentLink.address(path -> path.replace(\":name\", \"")).output(placeholder("name", "lowerCase")).output(literal("\").replace(\":mode\", readonly ? \"edit\" : \"default\"));")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}