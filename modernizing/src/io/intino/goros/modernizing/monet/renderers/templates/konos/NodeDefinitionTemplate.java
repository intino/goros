package io.intino.goros.modernizing.monet.renderers.templates.konos;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class NodeDefinitionTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(allTypes("nodedefinition")).output(literal("dsl Konos\n\n")).output(expression().output(placeholder("view", "use").multiple("\n"))).output(literal("\nuse UI\nuse Theme\n")).output(expression().output(placeholder("toolbar", "import"))).output(literal("\n\nTemplate(layout=Vertical Flexible, format=smallAir) ")).output(placeholder("name", "firstUpperCase")).output(literal("Template\n    Block(layout=Horizontal, format=headerSpaced) header\n        Block(layout=Vertical Flexible)\n            Block(layout=Horizontal)\n                ")).output(expression().output(placeholder("desktop"))).output(literal("\n                ")).output(expression().output(placeholder("parent"))).output(literal("\n                Text(value=\"")).output(placeholder("label")).output(literal("\", format=h4 bold) label\n            Text(format=body2 grey) description\n\n    Block(layout=Horizontal Flexible, format=smallAirTop) > TemplateStamp(template=")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate) content\n\nTemplate(layout=Vertical Flexible) ")).output(placeholder("name", "firstUpperCase")).output(literal("EmbeddedTemplate as Relative(height=100%)\n    Block(layout=Horizontal, format=bottomBordered)\n        ")).output(placeholder("toolbar", "navigableExpanded")).output(literal("\n        Block(layout=Horizontal Flexible, format=middleTopSpaced middleBottomSpaced middleAirLeft) toolbar\n            Block(layout=Vertical CenterJustified Flexible)\n                Block(layout=Horizontal)\n                    ")).output(placeholder("toolbar", "editable")).output(literal("\n                    Button(title=\"Restaurar\", size=Small, highlight=Outline, format=airLeft, visible=false) restore as Action Affirmed(\"¿Está seguro que quiere restaurar esta revisión?\")\n            Block(layout=Horizontal EndJustified)\n                ")).output(placeholder("toolbar", "navigable")).output(literal("\n\n    Block(layout=Horizontal) header\n        Block(layout=Vertical) headerToolbar as Relative(width=100%, offsetWidth=40px)\n            Selector viewSelector as Tabs(scrollButtons=Auto)\n                ")).output(expression().output(placeholder("view", "declaration").multiple("\n"))).output(literal("\n        Block(layout=Horizontal EndJustified Center)\n            MaterialIconButton(title=\"Abrir\", icon=\"ZoomOutMap\", size=Small, visible=false) openContain as OpenLayer Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.instance)\n\n    Block(layout=Vertical Flexible) content as Relative(height=100%)\n        ")).output(expression().output(placeholder("view", "page").multiple("\n"))).output(literal("\n\n")).output(expression().output(placeholder("view").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("compositeView").multiple("\n"))));
		rules.add(rule().condition(allTypes("desktop")).output(literal("Link(title=\"")).output(placeholder("label")).output(literal("\", format=h4 middleAirRight) desktopLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.")).output(placeholder("resourceType")).output(literal(")\nText(value=\"/\", format=h4 middleAirRight)")));
		rules.add(rule().condition(allTypes("parent")).output(literal("Link(title=\"")).output(placeholder("label")).output(literal("\", format=h4 middleAirRight) parentLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.")).output(placeholder("resourceType")).output(literal(")\nText(value=\"/\", format=h4 middleAirRight)")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("import"))).output(placeholder("addList", "import")));
		rules.add(rule().condition(all(allTypes("toolbar", "singleton"), trigger("editable"))).output(expression().output(placeholder("operationsGroup"))).output(literal("\n")).output(expression().output(placeholder("operation").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("addList", "option"))).output(literal("\nButton(title=\"Copiar\", size=Small, highlight=Outline, format=airRight, visible=false) copy as Action\nButton(title=\"Editar\", size=Small, highlight=Outline, format=airRight) edit as Action")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("editable"))).output(expression().output(placeholder("operationsGroup"))).output(literal("\n")).output(expression().output(placeholder("operation").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("addList", "option"))).output(literal("\nButton(title=\"Copiar\", size=Small, highlight=Outline, format=airRight, visible=false) copy as Action\nButton(title=\"Editar\", size=Small, highlight=Outline, format=airRight) edit as Action\nButton(title=\"Eliminar\", size=Small, highlight=Outline, visible=false) remove as Action Affirmed(\"Are you sure you want to remove element?\")")));
		rules.add(rule().condition(all(allTypes("toolbar", "collectable"), trigger("navigableexpanded"))).output(literal("Block(format=middleAirLeft middleAirRight)\n    Block(layout=Horizontal Center StartJustified)\n        MaterialIconButton(title=\"Mostrar listado\", icon=\"ArrowBack\", size=Small, format=middleAirRight, visible=false) showCollectionBack\n        MaterialIconButton(title=\"Mostrar listado\", icon=\"Menu\", size=Small, format=middleAirRight, visible=false) showCollectionMenu\n        Block(format=middleAirLeft)\n            Block(layout=Horizontal)\n                Text(format=bold, visible=false) label\n                Block(format=middleAirLeft, visible=false) prototypeAdvise > Text(value=\"Plantilla\", mode=Uppercase, format=prototypeAdviseStyle)\n            Text(format=body2 grey, visible=false) description")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("navigableexpanded"))));
		rules.add(rule().condition(all(allTypes("toolbar", "collectable"), trigger("navigable"))).output(literal("MaterialIconButton(title=\"Anterior\", icon=\"KeyboardArrowLeft\", size=Small, format=airRight, visible=false) previous as SelectPreviousItem(collection=empty)\nMaterialIconButton(title=\"Siguiente\", icon=\"KeyboardArrowRight\", size=Small, format=airRight, visible=false) next as SelectNextItem(collection=empty)")));
		rules.add(rule().condition(all(allTypes("toolbar"), trigger("navigable"))));
		rules.add(rule().condition(allTypes("addList")));
		rules.add(rule().condition(allTypes("operationsGroup")).output(literal("SplitButton(title = \"Operaciones\", options = ")).output(expression().output(placeholder("operation", "option").multiple(" "))).output(literal(", defaultOption = \"")).output(placeholder("defaultOperation")).output(literal("\", size=Small, format=airRight, visible=false) operaciones")));
		rules.add(rule().condition(allTypes("operation", "download")).output(literal("Button(title=\"")).output(placeholder("label")).output(literal("\", size=Small, highlight=Outline, format=airRight) ")).output(placeholder("name", "lowerCase")).output(literal(" as Download")).output(expression().output(literal(" Affirmed(\"")).output(placeholder("confirmText")).output(literal("\")"))));
		rules.add(rule().condition(all(allTypes("operation"), trigger("option"))).output(literal("\"")).output(placeholder("label")).output(literal("\"")));
		rules.add(rule().condition(allTypes("operation")).output(literal("Button(title=\"")).output(placeholder("label")).output(literal("\", size=Small, highlight=Outline, format=airRight) ")).output(placeholder("name", "lowerCase")).output(literal(" as Action")).output(expression().output(literal(" Affirmed(\"")).output(placeholder("confirmText")).output(literal("\")"))));
		rules.add(rule().condition(all(allTypes("nodeview", "linksin"), trigger("revisiondeclaration"))));
		rules.add(rule().condition(all(allTypes("nodeview", "linksout"), trigger("revisiondeclaration"))));
		rules.add(rule().condition(all(allTypes("nodeview", "notes"), trigger("revisiondeclaration"))));
		rules.add(rule().condition(all(allTypes("nodeview", "location"), trigger("revisiondeclaration"))));
		rules.add(rule().condition(all(allTypes("nodeview", "revisions"), trigger("revisiondeclaration"))));
		rules.add(rule().condition(all(allTypes("nodeview", "tasks"), trigger("revisiondeclaration"))));
		rules.add(rule().condition(all(allTypes("nodeview", "recenttask"), trigger("revisiondeclaration"))));
		rules.add(rule().condition(all(allTypes("nodeview", "visibleWhenEmbedded"), trigger("revisiondeclaration"))));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("revisiondeclaration"))).output(literal("Text(value=\"")).output(placeholder("label")).output(literal("\") ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Option")));
		rules.add(rule().condition(all(allTypes("nodeview", "visibleWhenEmbedded"), trigger("declaration"))));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("declaration"))).output(literal("Text(value=\"")).output(placeholder("label")).output(literal("\") ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Option")));
		rules.add(rule().condition(all(allTypes("nodeview", "linksin"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "visibleWhenEmbedded"), trigger("page"))));
		rules.add(rule().condition(all(allTypes("nodeview", "linksin"), trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(placeholder("name", "firstLowerCase")).output(literal("View as Conditional(header.headerToolbar.viewSelector.")).output(placeholder("name", "firstLowerCase")).output(literal(") Relative(height=100%) > OwnerTemplateStamp(template=\"NodeLinksInTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp")));
		rules.add(rule().condition(all(allTypes("nodeview", "linksout"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "linksout"), trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(placeholder("name", "firstLowerCase")).output(literal("View as Conditional(header.headerToolbar.viewSelector.")).output(placeholder("name", "firstLowerCase")).output(literal(") Relative(height=100%) > OwnerTemplateStamp(template=\"NodeLinksOutTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp")));
		rules.add(rule().condition(all(allTypes("nodeview", "notes"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "notes"), trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(placeholder("name", "firstLowerCase")).output(literal("View as Conditional(header.headerToolbar.viewSelector.")).output(placeholder("name", "firstLowerCase")).output(literal(") Relative(height=100%) > OwnerTemplateStamp(template=\"NodeNotesTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp")));
		rules.add(rule().condition(all(allTypes("nodeview", "location"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "location"), trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(placeholder("name", "firstLowerCase")).output(literal("View as Conditional(header.headerToolbar.viewSelector.")).output(placeholder("name", "firstLowerCase")).output(literal(") Relative(height=100%) > OwnerTemplateStamp(template=\"NodeLocationTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp")));
		rules.add(rule().condition(all(allTypes("nodeview", "tasks"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "tasks"), trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(placeholder("name", "firstLowerCase")).output(literal("View as Conditional(header.headerToolbar.viewSelector.")).output(placeholder("name", "firstLowerCase")).output(literal(") Relative(height=100%) > TemplateStamp(template=NodeTasksTemplate) ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp")));
		rules.add(rule().condition(all(allTypes("nodeview", "recenttask"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "location"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "locations"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "revisions"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview", "linksin"), trigger("use"))));
		rules.add(rule().condition(all(allTypes("nodeview", "linksout"), trigger("use"))));
		rules.add(rule().condition(all(allTypes("nodeview", "location"), trigger("use"))));
		rules.add(rule().condition(all(allTypes("nodeview", "locations"), trigger("use"))));
		rules.add(rule().condition(all(allTypes("nodeview", "revisions"), trigger("use"))));
		rules.add(rule().condition(all(allTypes("nodeview", "tasks"), trigger("use"))).output(literal("use Tasks")));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("use"))).output(placeholder("show", "use")));
		rules.add(rule().condition(all(allTypes("nodeview", "visibleWhenEmbedded"), trigger("revisionpage"))));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("revisionpage"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(placeholder("name", "firstLowerCase")).output(literal("View as Conditional(header.headerToolbar.viewSelector.")).output(placeholder("name", "firstLowerCase")).output(literal(") Relative(height=100%) > TemplateStamp(template=")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate) ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp")));
		rules.add(rule().condition(all(allTypes("nodeview"), trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(placeholder("name", "firstLowerCase")).output(literal("View as Conditional(header.headerToolbar.viewSelector.")).output(placeholder("name", "firstLowerCase")).output(literal(") Relative(height=100%) > TemplateStamp(template=")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate) ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp")));
		rules.add(rule().condition(allTypes("nodeview", "linksin")));
		rules.add(rule().condition(allTypes("nodeview", "linksout")));
		rules.add(rule().condition(allTypes("nodeview", "tasks")));
		rules.add(rule().condition(allTypes("nodeview", "notes")));
		rules.add(rule().condition(allTypes("nodeview", "location")).output(literal("Template(layout=Vertical CenterJustified) ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate as Relative(height=100%)\n    ")).output(placeholder("show")));
		rules.add(rule().condition(allTypes("nodeview", "locations")));
		rules.add(rule().condition(allTypes("nodeview", "recenttask")).output(literal("Template(layout=Vertical CenterJustified) ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate as Relative(height=100%)\n    ")).output(placeholder("show")));
		rules.add(rule().condition(allTypes("nodeview")).output(literal("Template(layout=Horizontal CenterJustified) ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("ViewTemplate as Relative(height=100%)\n    ")).output(placeholder("show")));
		rules.add(rule().condition(all(allTypes("show", "recenttask"), trigger("use"))).output(expression().output(placeholder("tasktype", "use").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("tasktype"), trigger("use"))).output(literal("use ")).output(placeholder("name", "firstUpperCase").multiple("\n")));
		rules.add(rule().condition(allTypes("show", "recenttask")).output(literal("Block(layout=Vertical Flexible CenterCenter, visible=false) noTaskMessage as Relative(height=100%)> Text(value=\"No hay tareas pendientes\", format=h5, translate=true)\nBlock(format=dialog bordered) toolbarBlock > OwnerTemplateStamp(template=\"TaskToolbarTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) toolbar\nBlock(layout=Vertical Flexible, visible=false) viewsBlock\n    ")).output(expression().output(placeholder("tasktype").multiple("\n"))));
		rules.add(rule().condition(allTypes("tasktype")).output(literal("Block ")).output(placeholder("name", "firstLowerCase")).output(literal("View as Conditional > TemplateStamp(template=")).output(placeholder("name", "firstUpperCase")).output(literal("StateViewTemplate) ")).output(placeholder("name", "firstLowerCase")).output(literal("ViewStamp")));
		rules.add(rule().condition(allTypes("show", "revisions")).output(literal("Block(layout=Vertical Flexible, format=bordered)\n\tOwnerTemplateStamp(template=\"NodeRevisionsTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) revisionsStamp\n\nBlock(layout=Vertical CenterCenter) selectRevisionPage as Relative(width=55%) > Text(value=\"Seleccione una revisión para ver su contenido\", format=h5)\n\nBlock(format=smallAirLeft middleSpaced bordered, visible=false) revisionPage as Animated Relative(width=55%)\n\tTransition(direction=Left)\n\tTemplateStamp(template=")).output(placeholder("definition", "firstUpperCase")).output(literal("EmbeddedTemplate) currentRevisionStamp")));
		rules.add(rule().condition(all(allTypes("show"), trigger("use"))));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}