package io.intino.goros.modernizing.monet.renderers.templates.java;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class FormDefinitionTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(all(allTypes("show", "fields"), trigger("declaration"))).output(expression().output(placeholder("field", "declaration").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show", "layout"), trigger("declaration"))).output(expression().output(placeholder("row", "declaration").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutRow"), trigger("declaration"))).output(expression().output(placeholder("element", "declaration").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement", "section"), trigger("declaration"))).output(expression().output(placeholder("row", "declaration").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement"), trigger("declaration"))).output(expression().output(placeholder("field", "declaration"))));
		rules.add(rule().condition(all(allTypes("show", "fields", "composite"), trigger("init"))).output(expression().output(placeholder("field", "init").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show", "fields", "composite"), trigger("refresh"))).output(expression().output(placeholder("field", "refresh").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show", "fields", "composite"), trigger("refreshmethod"))).output(expression().output(placeholder("field", "refreshMethod").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show", "fields", "composite"), trigger("update"))).output(expression().output(placeholder("field", "update").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show", "layout", "composite"), trigger("init"))).output(expression().output(placeholder("row", "init").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show", "layout", "composite"), trigger("refresh"))).output(expression().output(placeholder("row", "refresh").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show", "layout", "composite"), trigger("refreshmethod"))).output(expression().output(placeholder("row", "refreshMethod").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show", "layout", "composite"), trigger("update"))).output(expression().output(placeholder("row", "update").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("show"), trigger("hidetoolbar"))));
		rules.add(rule().condition(allTypes("show", "layout")).output(literal("@Override\npublic void init() {\n    super.init();\n    ")).output(expression().output(placeholder("row", "init").multiple("\n"))).output(literal("\n}\n\n@Override\npublic void refresh() {\n    super.refresh();\n    ")).output(expression().output(placeholder("row", "refresh").multiple("\n"))).output(literal("\n}\n\n")).output(expression().output(placeholder("row", "refreshMethod").multiple("\n"))).output(literal("\n\nprivate void save(java.util.function.Consumer<Boolean> consumer) {\n    consumer.accept(true);\n    io.intino.goros.unit.util.LayerHelper.nodeLayer().saveNode(node);\n    updateFields();\n}\n\nprivate void updateFields() {\n    if (node == null) return;\n    FormDatasource datasource = new FormDatasource(box().unit(), session(), node);\n    ")).output(expression().output(placeholder("row", "update").multiple("\n"))).output(literal("\n}")));
		rules.add(rule().condition(all(allTypes("layoutRow"), trigger("init"))).output(expression().output(placeholder("element", "init").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutRow"), trigger("refresh"))).output(expression().output(placeholder("element", "refresh").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutRow"), trigger("refreshmethod"))).output(expression().output(placeholder("element", "refreshMethod").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutRow"), trigger("update"))).output(expression().output(placeholder("element", "update").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement", "section"), trigger("init"))).output(expression().output(placeholder("row", "init").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement"), trigger("init"))).output(placeholder("field", "init")));
		rules.add(rule().condition(all(allTypes("layoutElement", "section"), trigger("refresh"))).output(expression().output(placeholder("row", "refresh").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement"), trigger("refresh"))).output(placeholder("field", "refresh")));
		rules.add(rule().condition(all(allTypes("layoutElement", "section"), trigger("refreshmethod"))).output(expression().output(placeholder("row", "refreshMethod").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement"), trigger("refreshmethod"))).output(placeholder("field", "refreshMethod")));
		rules.add(rule().condition(all(allTypes("layoutElement", "section"), trigger("update"))).output(expression().output(placeholder("row", "update").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement"), trigger("update"))).output(placeholder("field", "update")));
		rules.add(rule().condition(allTypes("show", "fields")).output(literal("@Override\npublic void init() {\n    super.init();\n    ")).output(expression().output(placeholder("field", "init").multiple("\n"))).output(literal("\n}\n\n@Override\npublic void refresh() {\n    super.refresh();\n    boolean isPrototype = node.isPrototype();\n    ")).output(expression().output(placeholder("field", "refresh").multiple("\n"))).output(literal("\n}\n\n")).output(expression().output(placeholder("field", "refreshMethod").multiple("\n"))).output(literal("\n\nprivate void save(java.util.function.Consumer<Boolean> consumer) {\n    consumer.accept(true);\n    io.intino.goros.unit.util.LayerHelper.nodeLayer().saveNode(node);\n    updateFields();\n}\n\nprivate void updateFields() {\n    if (node == null) return;\n    FormDatasource datasource = new FormDatasource(box().unit(), session(), node);\n    ")).output(expression().output(placeholder("field", "update").multiple("\n"))).output(literal("\n}")));
		rules.add(rule().condition(allTypes("displayProvider")).output(literal("@Override\npublic io.intino.alexandria.ui.displays.Display displayFor(Node node, String view) {\n    if (node != null && node.isDocument()) {\n        io.intino.goros.unit.box.ui.displays.templates.NodeDocumentTemplate display = new io.intino.goros.unit.box.ui.displays.templates.NodeDocumentTemplate(box().unit());\n        display.node(node);\n        display.readonly(readonly);\n        return display;\n    }\n    ")).output(expression().output(placeholder("display").multiple("\n"))).output(literal("\n    return null;\n}")));
		rules.add(rule().condition(all(allTypes("field", "select", "multiple"), trigger("declaration"))).output(literal("private FieldMultiple<Field")).output(placeholder("type", "firstUpperCase")).output(literal(",")).output(placeholder("valueType")).output(literal("> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field;\nprivate io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource ")).output(placeholder("name", "firstLowerCase")).output(literal("Source;")));
		rules.add(rule().condition(all(allTypes("field", "link", "multiple"), trigger("declaration"))).output(literal("private FieldMultiple<Field")).output(placeholder("type", "firstUpperCase")).output(literal(",")).output(placeholder("valueType")).output(literal("> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field;\nprivate org.monet.space.kernel.model.Node<?> ")).output(placeholder("name", "firstLowerCase")).output(literal("Selected;")));
		rules.add(rule().condition(all(allTypes("field", "multiple"), trigger("declaration"))).output(literal("private FieldMultiple<Field")).output(placeholder("type", "firstUpperCase")).output(literal(",")).output(placeholder("valueType")).output(literal("> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field;")));
		rules.add(rule().condition(all(allTypes("field", "select"), trigger("declaration"))).output(literal("private Field")).output(placeholder("type", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "firstLowerCase")).output(literal("Field;\nprivate io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource ")).output(placeholder("name", "firstLowerCase")).output(literal("Source;")));
		rules.add(rule().condition(all(allTypes("field", "link"), trigger("declaration"))).output(literal("private Field")).output(placeholder("type", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "firstLowerCase")).output(literal("Field;")));
		rules.add(rule().condition(all(allTypes("field"), trigger("declaration"))).output(literal("private Field")).output(placeholder("type", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "firstLowerCase")).output(literal("Field;")));
		rules.add(rule().condition(all(allTypes("field", "select"), trigger("update"))).output(placeholder("name", "firstLowerCase")).output(literal("Field = datasource.getField(\"")).output(placeholder("code")).output(literal("\");\n")).output(placeholder("name", "firstLowerCase")).output(literal("Source = new io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource(box().unit(), session(), node, ")).output(placeholder("name", "firstLowerCase")).output(literal("Field);")));
		rules.add(rule().condition(all(allTypes("field", "link"), trigger("update"))).output(placeholder("name", "firstLowerCase")).output(literal("Field = datasource.getField(\"")).output(placeholder("code")).output(literal("\");")));
		rules.add(rule().condition(all(allTypes("field", "composite", "multiple"), trigger("update"))).output(placeholder("name", "firstLowerCase")).output(literal("Field = datasource.getField(\"")).output(placeholder("code")).output(literal("\");\njava.util.List<FieldComposite> ")).output(placeholder("name", "firstLowerCase")).output(literal("Fields = ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAllFields();\nif (")).output(placeholder("name", "firstLowerCase")).output(literal(" != null) {\n    java.util.List<")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template> ")).output(placeholder("name", "firstLowerCase")).output(literal("Children = ")).output(placeholder("name", "firstLowerCase")).output(literal(".children(")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template.class);\n    for (int i=0; i<")).output(placeholder("name", "firstLowerCase")).output(literal("Fields.size(); i++) if (")).output(placeholder("name", "firstLowerCase")).output(literal("Children.size() > i) ")).output(placeholder("name", "firstLowerCase")).output(literal("Children.get(i).field(")).output(placeholder("name", "firstLowerCase")).output(literal("Fields.get(i));\n}")));
		rules.add(rule().condition(all(allTypes("field", "composite"), trigger("update"))).output(placeholder("name", "firstLowerCase")).output(literal("Field = datasource.getField(\"")).output(placeholder("code")).output(literal("\");\nif (")).output(placeholder("name", "firstLowerCase")).output(literal(" != null) ")).output(placeholder("name", "firstLowerCase")).output(literal(".field(")).output(placeholder("name", "firstLowerCase")).output(literal("Field);")));
		rules.add(rule().condition(all(allTypes("field", "link"), trigger("update"))).output(placeholder("name", "firstLowerCase")).output(literal("Field = datasource.getField(\"")).output(placeholder("code")).output(literal("\");")));
		rules.add(rule().condition(all(allTypes("field"), trigger("update"))).output(placeholder("name", "firstLowerCase")).output(literal("Field = datasource.getField(\"")).output(placeholder("code")).output(literal("\");")));
		rules.add(rule().condition(all(allTypes("field", "text", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index()).set(e.item())));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onRemove(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.remove(e.index())));")));
		rules.add(rule().condition(all(allTypes("field", "text", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(null);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".addAll(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll());\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNew(e.item())));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "text"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(e.value())));")));
		rules.add(rule().condition(all(allTypes("field", "text"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".value(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get());\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "number", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index()).set(new org.monet.bpi.types.Number((Double) e.item()))));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onRemove(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.remove(e.index())));")));
		rules.add(rule().condition(all(allTypes("field", "number", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(null);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".addAll(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll().stream().mapToDouble(n -> n != null ? n.doubleValue() : 0).boxed().collect(java.util.stream.Collectors.toList()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNew(e.item())));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "number"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(new org.monet.bpi.types.Number((Double) e.value()))));")));
		rules.add(rule().condition(all(allTypes("field", "number"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".value(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get() != null ? ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get().doubleValue() : null);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "boolean"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onToggle(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(e.state() == io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On)));")));
		rules.add(rule().condition(all(allTypes("field", "boolean"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".state(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get() ? io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On : io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "date", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.dateOf(e.item()))));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onRemove(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.remove(e.index())));")));
		rules.add(rule().condition(all(allTypes("field", "date", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(null);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".addAll(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll().stream().map(f -> f != null ? f.getValue().toInstant() : null).collect(java.util.stream.Collectors.toList()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNew(e.item())));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "date"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(io.intino.goros.unit.util.NodeHelper.dateOf(e.value()))));")));
		rules.add(rule().condition(all(allTypes("field", "date"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.instantOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "memo", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index()).set(e.item())));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onRemove(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.remove(e.index())));")));
		rules.add(rule().condition(all(allTypes("field", "memo", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(null);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".addAll(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll());\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNew(e.item())));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "memo"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(e.value())));")));
		rules.add(rule().condition(all(allTypes("field", "memo"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".value(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get());\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "serial"), trigger("init"))));
		rules.add(rule().condition(all(allTypes("field", "serial"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".value(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get());\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(true);")));
		rules.add(rule().condition(all(allTypes("field", "file", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> {\n    if (")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getCount() <= e.index()) return;\n    save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.fileOf(e.item())));\n    ((io.intino.alexandria.ui.displays.components.FileEditable<?,?>)e.component()).value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index())));\n});\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onRemove(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.remove(e.index())));")));
		rules.add(rule().condition(all(allTypes("field", "file", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(null);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".addAll(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll().stream().map(f -> f != null ? io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(f) : null).collect(java.util.stream.Collectors.toList()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNew(e.item())));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "file"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> {\n    save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(io.intino.goros.unit.util.NodeHelper.fileOf(e.value())));\n    ")).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field));\n});")));
		rules.add(rule().condition(all(allTypes("field", "file"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "picture", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> {\n    if (")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getCount() <= e.index()) return;\n    save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.pictureOf(e.item(), ")).output(placeholder("width")).output(literal(", ")).output(placeholder("height")).output(literal(")));\n    ((io.intino.alexandria.ui.displays.components.ImageEditable<?,?>)e.component()).value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index())));\n});\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onRemove(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.remove(e.index())));")));
		rules.add(rule().condition(all(allTypes("field", "picture", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(null);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".addAll(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll().stream().map(f -> f != null ? io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(f) : null).collect(java.util.stream.Collectors.toList()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNew(e.item())));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "picture"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> {\n    save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(io.intino.goros.unit.util.NodeHelper.pictureOf(e.value(), ")).output(placeholder("width")).output(literal(", ")).output(placeholder("height")).output(literal(")));\n    ")).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field));\n});")));
		rules.add(rule().condition(all(allTypes("field", "picture"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "check"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onSelect(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(io.intino.goros.unit.util.NodeHelper.checkListOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get(), e.selection()))));")));
		rules.add(rule().condition(all(allTypes("field", "check"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\njava.util.List<org.monet.bpi.types.Term> ")).output(placeholder("name", "firstLowercase")).output(literal("Terms = new io.intino.goros.unit.box.ui.datasources.FieldCheckDatasource(box().unit(), session(), node, ")).output(placeholder("name", "firstLowerCase")).output(literal("Field).allItems();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".addAll(")).output(placeholder("name", "firstLowercase")).output(literal("Terms.stream().map(org.monet.bpi.types.Term::getLabel).collect(java.util.stream.Collectors.toList()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".selection(io.intino.goros.unit.util.NodeHelper.selectionOf(")).output(placeholder("name", "firstLowercase")).output(literal("Terms, ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "link", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".valueProvider(io.intino.goros.unit.util.DisplayHelper.linkValueProvider());\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onOpen(e -> {\n    org.monet.bpi.types.Link link = io.intino.goros.unit.util.DisplayHelper.findLink(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll(), e.value());\n    if (link == null) return;\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("Selected = io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(link.getId());\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("Trigger.address(path -> io.intino.goros.unit.util.PathHelper.pathOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Selected));\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("Trigger.openLayer();\n});\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onSelect(e -> save(b -> {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.removeAll();\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNewAll(io.intino.goros.unit.util.NodeHelper.linksOf(e.selection()));\n}));\n")).output(placeholder("name", "firstLowerCase")).output(literal("Trigger.onOpen(e1 -> {\n    e1.layer().title(")).output(placeholder("name", "firstLowerCase")).output(literal("Selected.getLabel());\n    AppTemplate template = new AppTemplate(box());\n    e1.layer().template(template);\n    template.embedded(true);\n});")));
		rules.add(rule().condition(all(allTypes("field", "link", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".source(new io.intino.goros.unit.box.ui.datasources.FieldLinkDatasource(box().unit(), session(), \"")).output(placeholder("code")).output(literal("\", node, org.monet.space.kernel.model.Dictionary.getInstance().getIndexDefinition(\"")).output(placeholder("indexCode")).output(literal("\")));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".selection(io.intino.goros.unit.util.NodeHelper.nodeItemsOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "link"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".valueProvider(io.intino.goros.unit.util.DisplayHelper.linkValueProvider());\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onSelect(e -> {\n    save(b -> {\n        ")).output(expression().output(placeholder("dependant", "clear").multiple("\n"))).output(literal("\n        ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(io.intino.goros.unit.util.NodeHelper.linkOf(e.selection()));\n        open")).output(placeholder("name", "firstUpperCase")).output(literal(".readonly(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get() == null);\n    });\n    ")).output(expression().output(placeholder("dependant", "refresh").multiple("\n"))).output(literal("\n});\nopen")).output(placeholder("name", "firstUpperCase")).output(literal(".onOpen(e -> {\n    org.monet.bpi.types.Link link = ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get();\n    if (link == null) return;\n    Node<?> node = io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(link.getId());\n    open")).output(placeholder("name", "firstUpperCase")).output(literal(".address(path -> io.intino.goros.unit.util.PathHelper.pathOf(node));\n\te.layer().title(node.getLabel());\n\tAppTemplate template = new AppTemplate(box());\n\te.layer().template(template);\n\ttemplate.embedded(true);\n});")));
		rules.add(rule().condition(all(allTypes("field", "link"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".source(new io.intino.goros.unit.box.ui.datasources.FieldLinkDatasource(box().unit(), session(), \"")).output(placeholder("code")).output(literal("\", node, org.monet.space.kernel.model.Dictionary.getInstance().getIndexDefinition(\"")).output(placeholder("indexCode")).output(literal("\")));\nif (")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get() != null) ")).output(placeholder("name", "firstLowerCase")).output(literal(".selection(io.intino.goros.unit.util.NodeHelper.nodeItemOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get()));\nelse ")).output(placeholder("name", "firstLowerCase")).output(literal(".selection(java.util.Collections.emptyList());\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");\nopen")).output(placeholder("name", "firstUpperCase")).output(literal(".readonly(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get() == null);")));
		rules.add(rule().condition(all(allTypes("field", "select", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onSelect(e -> save(b -> {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.removeAll();\n    ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNewAll(io.intino.goros.unit.util.NodeHelper.termsOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Source, e.selection()));\n}));")));
		rules.add(rule().condition(all(allTypes("field", "select", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal("Source.session(session());\nrefresh")).output(placeholder("name", "firstUpperCase")).output(literal("();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".selection(io.intino.goros.unit.util.NodeHelper.selectionOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Source.allItems(), ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAll()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "select", "inline"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal("Source.session(session());\nrefresh")).output(placeholder("name", "firstUpperCase")).output(literal("();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".selection(io.intino.goros.unit.util.NodeHelper.selectionOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Source.allItems(), ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "select"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onSelect(e -> {\n    save(b -> {\n        ")).output(expression().output(placeholder("dependant", "clear").multiple("\n"))).output(literal("\n        ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.set(io.intino.goros.unit.util.NodeHelper.termOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Source, e.selection()));\n    });\n    ")).output(expression().output(placeholder("dependant", "refresh").multiple("\n"))).output(literal("\n});")));
		rules.add(rule().condition(all(allTypes("field", "select"), trigger("refreshmethod"))).output(literal("private void refresh")).output(placeholder("name", "firstUpperCase")).output(literal("() {\n    ")).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n    ")).output(placeholder("name", "firstLowerCase")).output(literal(".addAll(")).output(placeholder("name", "firstLowerCase")).output(literal("Source.items().stream().map(org.monet.bpi.types.Term::getLabel).collect(java.util.stream.Collectors.toList()));\n}")));
		rules.add(rule().condition(all(allTypes("field", "select"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal("Source.session(session());\nrefresh")).output(placeholder("name", "firstUpperCase")).output(literal("();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".selection(io.intino.goros.unit.util.NodeHelper.selectionOf(")).output(placeholder("name", "firstLowerCase")).output(literal("Source.allItems(), ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.get()));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "composite", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> {\n    save(b -> {});\n    ((")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template)e.component()).node(node).field(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index())).refresh();\n});\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onRemove(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.remove(e.index())));")));
		rules.add(rule().condition(all(allTypes("field", "composite", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(null);\n")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAllFields().forEach(field -> {\n    ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template display = ")).output(placeholder("name", "firstLowerCase")).output(literal(".add(")).output(expression().output(placeholder("addProperties"))).output(literal(").node(node).field(field).readonly(this.readonly);\n    display.refresh();\n});\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(e -> save(b -> {\n    FieldComposite fieldComposite = ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNew();\n    ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template display = e.component();\n    display.node(node);\n    display.field(fieldComposite);\n    display.readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");\n    display.refresh();\n}));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field", "composite"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> {}));")));
		rules.add(rule().condition(all(allTypes("field", "composite"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".node(node);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".field(")).output(placeholder("name", "firstLowerCase")).output(literal("Field);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");\n")).output(placeholder("name", "firstLowerCase")).output(literal(".refresh();")));
		rules.add(rule().condition(all(allTypes("field", "node", "multiple"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> {\n    if (")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getCount() <= e.index()) return;\n    save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index()).set(((FieldNode)e.item()).get()));\n    ((io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate)e.component()).node(node).field(")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAsField(e.index())).refresh();\n});\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onRemove(e -> save(b -> ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.remove(e.index())));")));
		rules.add(rule().condition(all(allTypes("field", "node", "multiple"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".clear();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(null);\n")).output(placeholder("name", "firstLowerCase")).output(literal("Field.getAllFields().forEach(field -> {\n    io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate display = ")).output(placeholder("name", "firstLowerCase")).output(literal(".add(")).output(expression().output(placeholder("addProperties"))).output(literal(").node(node).field(field).readonly(this.readonly).displayProvider(this);\n    display.refresh();\n});\n")).output(placeholder("name", "firstLowerCase")).output(literal(".onAdd(e -> save(b -> {\n    FieldNode fieldNode = ")).output(placeholder("name", "firstLowerCase")).output(literal("Field.addNew();\n    io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate display = e.component();\n    display.node(node);\n    display.field(fieldNode);\n    display.displayProvider(this);\n    display.readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");\n    display.refresh();\n}));\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(expression().output(placeholder("univocal")).output(literal(" "))).output(placeholder("readonly")).output(literal(");")));
		rules.add(rule().condition(all(allTypes("field"), trigger("refreshmethod"))));
		rules.add(rule().condition(all(allTypes("dependant", "multiple"), trigger("clear"))).output(placeholder("name", "firstLowerCase")).output(literal("Field.removeAll();")));
		rules.add(rule().condition(all(allTypes("dependant"), trigger("clear"))).output(placeholder("name", "firstLowerCase")).output(literal("Field.clear();")));
		rules.add(rule().condition(all(allTypes("dependant"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".select();\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(placeholder("anchorName", "firstLowerCase")).output(literal(".selection().size() <= 0);\nrefresh")).output(placeholder("name", "firstUpperCase")).output(literal("();")));
		rules.add(rule().condition(allTypes("univocal", "prototype")).output(literal("isPrototype ||")));
		rules.add(rule().condition(allTypes("univocal")));
		rules.add(rule().condition(allTypes("addProperties")).output(literal("\"")).output(expression().output(placeholder("add", "label").multiple("; "))).output(literal("\", ")).output(expression().output(placeholder("add").multiple(" + \"; \" + "))));
		rules.add(rule().condition(all(allTypes("addPropertiesItem"), trigger("label"))).output(placeholder("label")));
		rules.add(rule().condition(allTypes("addPropertiesItem", "date")).output(literal("io.intino.goros.unit.util.NodeHelper.valueOrDefault(((Field")).output(placeholder("type", "firstUpperCase")).output(literal(")field.getField(\"")).output(placeholder("code")).output(literal("\")))")));
		rules.add(rule().condition(allTypes("addPropertiesItem", "link")).output(literal("io.intino.goros.unit.util.NodeHelper.valueOrDefault(((Field")).output(placeholder("type", "firstUpperCase")).output(literal(")field.getField(\"")).output(placeholder("code")).output(literal("\")))")));
		rules.add(rule().condition(allTypes("addPropertiesItem")).output(literal("((Field")).output(placeholder("type", "firstUpperCase")).output(literal(")field.getField(\"")).output(placeholder("code")).output(literal("\")).get()")));
		rules.add(rule().condition(all(allTypes("field", "node"), trigger("init"))).output(placeholder("name", "firstLowerCase")).output(literal(".onChange(e -> save(b -> {}));")));
		rules.add(rule().condition(all(allTypes("field", "node"), trigger("refresh"))).output(placeholder("name", "firstLowerCase")).output(literal(".node(node);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".field(")).output(placeholder("name", "firstLowerCase")).output(literal("Field);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".readonly(")).output(placeholder("readonly")).output(literal(");\n")).output(placeholder("name", "firstLowerCase")).output(literal(".displayProvider(this);\n")).output(placeholder("name", "firstLowerCase")).output(literal(".refresh();")));
		rules.add(rule().condition(allTypes("compositeView")).output(literal("package ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.events.ChangeEvent;\nimport io.intino.alexandria.ui.displays.events.ChangeListener;\nimport org.monet.bpi.*;\nimport io.intino.goros.unit.box.ui.datasources.FieldCompositeDatasource;\nimport org.monet.space.kernel.model.Node;\n\nimport java.util.function.Consumer;\n\npublic class ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template extends Abstract")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template<")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box>")).output(expression().output(literal(" implements ")).output(placeholder("implements").multiple(","))).output(literal(" {\n    private Node node;\n    private FieldComposite field;\n    private boolean readonly = false;\n    private ChangeListener changeListener;\n    ")).output(expression().output(placeholder("show", "declaration"))).output(literal("\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template(")).output(placeholder("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template readonly(boolean readonly) {\n        this.readonly = readonly;\n        ")).output(expression().output(placeholder("editable", "readonly"))).output(literal("\n        return this;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template onReadonly(io.intino.alexandria.ui.displays.events.ReadonlyListener listener) {\n        return this;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template focus() {\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    ")).output(expression().output(placeholder("editable"))).output(literal("\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template field(FieldComposite field) {\n        this.field = field;\n        updateFields();\n        return this;\n    }\n\n    public ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template onChange(ChangeListener listener) {\n        this.changeListener = listener;\n        return this;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        ")).output(expression().output(placeholder("show", "init"))).output(literal("\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        ")).output(expression().output(placeholder("show", "refresh"))).output(literal("\n    }\n\n    ")).output(expression().output(placeholder("show", "refreshMethod"))).output(literal("\n\n    private void save(java.util.function.Consumer<Boolean> consumer) {\n        consumer.accept(true);\n        changeListener.accept(new ChangeEvent(this, field));\n        updateFields();\n    }\n\n    private void updateFields() {\n        if (field == null) return;\n        FieldCompositeDatasource datasource = new FieldCompositeDatasource(box().unit(), session(), field);\n        ")).output(expression().output(placeholder("show", "update"))).output(literal("\n    }\n\n    ")).output(expression().output(placeholder("displayProvider"))).output(literal("\n}")));
		rules.add(rule().condition(allTypes("compositeDisplayProvider")).output(literal("@Override\npublic io.intino.alexandria.ui.displays.Display displayFor(Node node, String view) {\n    ")).output(expression().output(placeholder("display").multiple("\n"))).output(literal("\n    return null;\n}")));
		rules.add(rule().condition(allTypes("display")).output(literal("if (node.getDefinition().getCode().equals(\"")).output(placeholder("code")).output(literal("\") && (view == null || view.equals(\"")).output(placeholder("viewCode")).output(literal("\"))) {\n    ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates.")).output(placeholder("name", "firstUpperCase")).output(placeholder("viewName", "firstUpperCase")).output(literal("ViewTemplate result = new ")).output(placeholder("package")).output(literal(".")).output(placeholder("module", "lowerCase")).output(literal(".box.ui.displays.templates.")).output(placeholder("name", "firstUpperCase")).output(placeholder("viewName", "firstUpperCase")).output(literal("ViewTemplate(box());\n    result.node(node);\n    result.readonly(false);\n    return result;\n}")));
		rules.add(rule().condition(all(allTypes("editable"), trigger("readonly"))).output(literal("if (field != null) refresh();")));
		rules.add(rule().condition(allTypes("editable")).output(literal("@Override\npublic boolean readonly() {\n    return readonly;\n}\n\n@Override\npublic void reload() {\n    refresh();\n}")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}