package io.intino.goros.builder.renderers.templates.java;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class DocumentDefinitionTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("documentdefinition","embedded"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("module", "firstUpperCase")).output(literal("Box;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.util.DisplayHelper;\n\nimport java.util.List;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate<")).output(mark("module", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private boolean readonly = false;\n    ")).output(expression().output(mark("toolbar", "editableDeclaration"))).output(literal("\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate(")).output(mark("module", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    ")).output(expression().output(mark("toolbar", "editableEvents"))).output(literal("\n    ")).output(expression().output(mark("toolbar", "navigableMethods"))).output(literal("\n\n    public String selectedView() {\n        return null;\n    }\n\n    public void selectDefaultView() {\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        initToolbar();\n        initViews();\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        refreshToolbar();\n        refreshView();\n    }\n\n    private void refreshToolbar() {\n        edit.title(readonly ? \"Editar\" : \"Finalizar ediciÃ³n\");\n        edit.visible(!node.getDefinition().isReadonly());\n        ")).output(expression().output(mark("toolbar", "editableRefreshCall"))).output(literal("\n        ")).output(expression().output(mark("toolbar", "navigableRefreshCall"))).output(literal("\n    }\n\n    private void refreshView() {\n        refreshPreviewView();\n    }\n\n    private void initToolbar() {\n        edit.onExecute(e -> toggleEdition());\n        ")).output(expression().output(mark("toolbar", "editableInitCall"))).output(literal("\n    }\n\n    private void initViews() {\n        refreshPreviewView();\n    }\n\n    private void refreshPreviewView() {\n        if (node == null) return;\n        previewView.previewStamp.node(node);\n        previewView.previewStamp.readonly(readonly);\n        previewView.previewStamp.refresh();\n    }\n\n    private void toggleEdition() {\n        readonly(!readonly);\n        ")).output(expression().output(mark("toolbar", "editableCall"))).output(literal("\n        refresh();\n    }\n\n    ")).output(expression().output(mark("toolbar", "editableMethods"))).output(literal("\n}"))
		);
	}
}