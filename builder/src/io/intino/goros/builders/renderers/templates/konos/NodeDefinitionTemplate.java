package io.intino.goros.builders.renderers.templates.konos;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class NodeDefinitionTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("nodedefinition"))).output(literal("dsl Konos\n\n")).output(expression().output(mark("view", "use").multiple("\n"))).output(literal("\nuse UI\nuse Theme\n")).output(expression().output(mark("toolbar", "import"))).output(literal("\n\nTemplate(layout=Vertical Flexible, format=smallAir) ")).output(mark("name", "firstUpperCase")).output(literal("Template\n    Block(layout=Horizontal, format=bordered spaced) header\n        Block(layout=Vertical Flexible)\n            Block(layout=Horizontal)\n                ")).output(expression().output(mark("desktop"))).output(literal("\n                ")).output(expression().output(mark("parent"))).output(literal("\n                Text(value=\"")).output(mark("label")).output(literal("\", format=h4 bold) label\n\n    Block(layout=Horizontal Flexible, format=smallAirTop) > TemplateStamp(template=")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate) content\n\nTemplate(layout=Vertical Flexible) ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate as Relative(height=100%)\n    Block(layout=Horizontal, format=bottomBordered middleBottomSpaced leftSpaced middleTopSpaced) toolbar\n        Block(layout=Horizontal Flexible)\n            ")).output(mark("toolbar", "editable")).output(literal("\n        Block(layout=Horizontal EndJustified)\n            ")).output(mark("toolbar", "navigable")).output(literal("\n    Block(layout=Horizontal, format=bottomBordered bottomSpaced leftSpaced middleTopSpaced) revisionToolbar\n        Block(layout=Horizontal Flexible, visible=false)\n            Button(title=\"Restaurar\", size=Small, highlight=Outline) restore as Action Affirmed(\"¿Está seguro que quiere restaurar esta revisión?\")\n\n    Selector viewSelector as Tabs\n        ")).output(expression().output(mark("view", "declaration").multiple("\n"))).output(literal("\n\n    Block(layout=Vertical Flexible)\n        ")).output(expression().output(mark("view", "page").multiple("\n"))).output(literal("\n\n")).output(expression().output(mark("view").multiple("\n"))).output(literal("\n")).output(expression().output(mark("compositeView").multiple("\n"))),
			rule().condition((type("desktop"))).output(literal("Link(title=\"")).output(mark("label")).output(literal("\", format=h4 middleAirRight) desktopLink as Action Addressable(")).output(mark("module", "firstUpperCase")).output(literal("Elements.")).output(mark("resourceType")).output(literal(")\nText(value=\"/\", format=h4 middleAirRight)")),
			rule().condition((type("parent"))).output(literal("Link(title=\"")).output(mark("label")).output(literal("\", format=h4 middleAirRight) parentLink as Action Addressable(")).output(mark("module", "firstUpperCase")).output(literal("Elements.")).output(mark("resourceType")).output(literal(")\nText(value=\"/\", format=h4 middleAirRight)")),
			rule().condition((type("toolbar")), (trigger("import"))).output(mark("addList", "import")),
			rule().condition((allTypes("toolbar","singleton")), (trigger("editable"))).output(expression().output(mark("operation").multiple("\n"))).output(literal("\n")).output(expression().output(mark("addList", "option"))).output(literal("\nButton(title=\"Editar\", size=Small, highlight=Outline, format=airRight) edit as Action")),
			rule().condition((type("toolbar")), (trigger("editable"))).output(expression().output(mark("operation").multiple("\n"))).output(literal("\n")).output(expression().output(mark("addList", "option"))).output(literal("\nButton(title=\"Editar\", size=Small, highlight=Outline, format=airRight) edit as Action\nButton(title=\"Eliminar\", size=Small, highlight=Outline, visible=false) remove as Action Affirmed(\"Are you sure you want to remove element?\")")),
			rule().condition((allTypes("toolbar","collectable")), (trigger("navigable"))).output(literal("MaterialIconButton(title=\"Anterior\", icon=\"KeyboardArrowLeft\", size=Small, format=airRight, visible=false) previous as SelectPreviousItem(collection=empty)\nMaterialIconButton(title=\"Siguiente\", icon=\"KeyboardArrowRight\", size=Small, format=airRight, visible=false) next as SelectNextItem(collection=empty)\nMaterialIconButton(title=\"Abrir\", icon=\"ZoomOutMap\", size=Small, visible=false) open as Action Addressable(")).output(mark("module", "firstUpperCase")).output(literal("Elements.")).output(mark("resourceType")).output(literal(")")),
			rule().condition((type("toolbar")), (trigger("navigable"))),
			rule().condition((type("addList"))),
			rule().condition((allTypes("operation","download"))).output(literal("Button(title=\"")).output(mark("label")).output(literal("\", size=Small, highlight=Outline, format=airRight) ")).output(mark("name", "lowerCase")).output(literal(" as Download")).output(expression().output(literal(" Affirmed(\"")).output(mark("confirmText")).output(literal("\")"))),
			rule().condition((type("operation"))).output(literal("Button(title=\"")).output(mark("label")).output(literal("\", size=Small, highlight=Outline, format=airRight) ")).output(mark("name", "lowerCase")).output(literal(" as Action")).output(expression().output(literal(" Affirmed(\"")).output(mark("confirmText")).output(literal("\")"))),
			rule().condition((allTypes("nodeview","linksin")), (trigger("revisiondeclaration"))),
			rule().condition((allTypes("nodeview","linksout")), (trigger("revisiondeclaration"))),
			rule().condition((allTypes("nodeview","notes")), (trigger("revisiondeclaration"))),
			rule().condition((allTypes("nodeview","location")), (trigger("revisiondeclaration"))),
			rule().condition((allTypes("nodeview","revisions")), (trigger("revisiondeclaration"))),
			rule().condition((allTypes("nodeview","tasks")), (trigger("revisiondeclaration"))),
			rule().condition((allTypes("nodeview","recenttask")), (trigger("revisiondeclaration"))),
			rule().condition((allTypes("nodeview","visibleWhenEmbedded")), (trigger("revisiondeclaration"))),
			rule().condition((type("nodeview")), (trigger("revisiondeclaration"))).output(literal("Text(value=\"")).output(mark("label")).output(literal("\") ")).output(mark("name", "firstLowerCase")).output(literal(" as Option")),
			rule().condition((allTypes("nodeview","visibleWhenEmbedded")), (trigger("declaration"))),
			rule().condition((type("nodeview")), (trigger("declaration"))).output(literal("Text(value=\"")).output(mark("label")).output(literal("\") ")).output(mark("name", "firstLowerCase")).output(literal(" as Option")),
			rule().condition((allTypes("nodeview","linksin")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","visibleWhenEmbedded")), (trigger("page"))),
			rule().condition((allTypes("nodeview","linksin")), (trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(mark("name", "firstLowerCase")).output(literal("View as Conditional(viewSelector.")).output(mark("name", "firstLowerCase")).output(literal(") Relative(height=100%) > OwnerTemplateStamp(template=\"NodeLinksInTemplate\", owner=")).output(mark("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp")),
			rule().condition((allTypes("nodeview","linksout")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","linksout")), (trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(mark("name", "firstLowerCase")).output(literal("View as Conditional(viewSelector.")).output(mark("name", "firstLowerCase")).output(literal(") Relative(height=100%) > OwnerTemplateStamp(template=\"NodeLinksOutTemplate\", owner=")).output(mark("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp")),
			rule().condition((allTypes("nodeview","notes")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","notes")), (trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(mark("name", "firstLowerCase")).output(literal("View as Conditional(viewSelector.")).output(mark("name", "firstLowerCase")).output(literal(") Relative(height=100%) > OwnerTemplateStamp(template=\"NodeNotesTemplate\", owner=")).output(mark("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp")),
			rule().condition((allTypes("nodeview","location")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","location")), (trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(mark("name", "firstLowerCase")).output(literal("View as Conditional(viewSelector.")).output(mark("name", "firstLowerCase")).output(literal(") Relative(height=100%) > OwnerTemplateStamp(template=\"NodeLocationTemplate\", owner=")).output(mark("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp")),
			rule().condition((allTypes("nodeview","tasks")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","tasks")), (trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(mark("name", "firstLowerCase")).output(literal("View as Conditional(viewSelector.")).output(mark("name", "firstLowerCase")).output(literal(") Relative(height=100%) > TemplateStamp(template=NodeTasksTemplate) ")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp")),
			rule().condition((allTypes("nodeview","recenttask")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","location")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","locations")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","revisions")), (trigger("revisionpage"))),
			rule().condition((allTypes("nodeview","linksin")), (trigger("use"))),
			rule().condition((allTypes("nodeview","linksout")), (trigger("use"))),
			rule().condition((allTypes("nodeview","location")), (trigger("use"))),
			rule().condition((allTypes("nodeview","locations")), (trigger("use"))),
			rule().condition((allTypes("nodeview","revisions")), (trigger("use"))),
			rule().condition((allTypes("nodeview","tasks")), (trigger("use"))).output(literal("use Tasks")),
			rule().condition((type("nodeview")), (trigger("use"))).output(mark("show", "use")),
			rule().condition((allTypes("nodeview","visibleWhenEmbedded")), (trigger("revisionpage"))),
			rule().condition((type("nodeview")), (trigger("revisionpage"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(mark("name", "firstLowerCase")).output(literal("View as Conditional(viewSelector.")).output(mark("name", "firstLowerCase")).output(literal(") Relative(height=100%) > TemplateStamp(template=")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate) ")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp")),
			rule().condition((type("nodeview")), (trigger("page"))).output(literal("Block(layout=Vertical Flexible, format=spaced) ")).output(mark("name", "firstLowerCase")).output(literal("View as Conditional(viewSelector.")).output(mark("name", "firstLowerCase")).output(literal(") Relative(height=100%) > TemplateStamp(template=")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate) ")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp")),
			rule().condition((allTypes("nodeview","linksin"))),
			rule().condition((allTypes("nodeview","linksout"))),
			rule().condition((allTypes("nodeview","tasks"))),
			rule().condition((allTypes("nodeview","notes"))),
			rule().condition((allTypes("nodeview","location"))),
			rule().condition((allTypes("nodeview","locations"))),
			rule().condition((allTypes("nodeview","recenttask"))).output(literal("Template(layout=Vertical CenterJustified) ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate as Relative(height=100%)\n    ")).output(mark("show")),
			rule().condition((type("nodeview"))).output(literal("Template(layout=Horizontal CenterJustified) ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate as Relative(height=100%)\n    ")).output(mark("show")),
			rule().condition((allTypes("show","recenttask")), (trigger("use"))).output(expression().output(mark("tasktype", "use").multiple("\n"))),
			rule().condition((type("tasktype")), (trigger("use"))).output(literal("use ")).output(mark("name", "firstUpperCase").multiple("\n")),
			rule().condition((allTypes("show","recenttask"))).output(literal("Block(layout=Vertical Flexible CenterCenter, visible=false) noTaskMessage as Relative(height=100%)> Text(value=\"No hay tareas pendientes\", format=h5, translate=true)\nBlock(format=dialog bordered) toolbarBlock > OwnerTemplateStamp(template=\"TaskToolbarTemplate\", owner=")).output(mark("module", "firstUpperCase")).output(literal("Elements.goros) toolbar\nBlock(layout=Vertical Flexible, visible=false) viewsBlock\n    ")).output(expression().output(mark("tasktype").multiple("\n"))),
			rule().condition((type("tasktype"))).output(literal("Block ")).output(mark("name", "firstLowerCase")).output(literal("View as Conditional > TemplateStamp(template=")).output(mark("name", "firstUpperCase")).output(literal("StateViewTemplate) ")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp")),
			rule().condition((allTypes("show","revisions"))).output(literal("Block(layout=Vertical Flexible, format=bordered)\n\tOwnerTemplateStamp(template=\"NodeRevisionsTemplate\", owner=")).output(mark("module", "firstUpperCase")).output(literal("Elements.goros) revisionsStamp\n\nBlock(layout=Vertical CenterCenter) selectRevisionPage as Relative(width=55%) > Text(value=\"Seleccione una revisión para ver su contenido\", format=h5)\n\nBlock(format=smallAirLeft middleSpaced bordered, visible=false) revisionPage as Animated Relative(width=55%)\n\tTransition(direction=Left)\n\tTemplateStamp(template=")).output(mark("definition", "firstUpperCase")).output(literal("EmbeddedTemplate) currentRevisionStamp")),
			rule().condition((type("show")), (trigger("use")))
		);
	}
}