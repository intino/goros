rule type(ui, routedispatcher)
    package $package.$module+lowerCase.box.ui.displays;

    import $package.$module+lowerCase.box.ui.displays.templates.AppTemplate;
    import io.intino.alexandria.ui.Soul;

    public class RouteDispatcher extends AbstractRouteDispatcher {

        @Override
        public void dispatchHome(Soul soul) {
            soul.currentLayer(AppTemplate.class).openHome();
        }

        @Override
        public void dispatchError(Soul soul) {
        }

        @Override
        public void dispatchSingleton(Soul soul, String name, String mode) {
            AppTemplate display = soul.currentLayer(AppTemplate.class);
            if (mode != null && mode.equals("undefined")) mode = null;
            boolean readonly = mode != null && !mode.equalsIgnoreCase("edit");
            <<$definition+dispatchSingleton...[$NL]>>
        }

        @Override
        public void dispatchInstance(Soul soul, String name, String id, String view, String mode) {
            AppTemplate display = soul.currentLayer(AppTemplate.class);
            if (view != null && view.equals("undefined")) view = null;
            if (mode != null && mode.equals("undefined")) mode = null;
            boolean readonly = mode != null && !mode.equalsIgnoreCase("edit");
            <<$definition+dispatchInstance...[$NL]>>
        }

        @Override
        public void dispatchTask(Soul soul, String name, String inbox, String task) {
            AppTemplate display = soul.currentLayer(AppTemplate.class);
            if (task != null && task.equals("undefined")) task = null;
            <<$definition+dispatchTask...[$NL]>>
        }

        @Override
        public void dispatchTaskTray(Soul soul, String folder) {
            soul.currentLayer(AppTemplate.class).openTaskTray(folder);
        }

        @Override
        public void dispatchTaskBoard(Soul soul, String folder) {
            soul.currentLayer(AppTemplate.class).openTaskBoard(folder);
        }

        @Override
        public void dispatchRoles(Soul soul) {
            soul.currentLayer(AppTemplate.class).openRoles();
        }

        @Override
        public void dispatchTrash(Soul soul) {
            soul.currentLayer(AppTemplate.class).openTrash();
        }

        @Override
        public void dispatchNews(Soul soul) {
            soul.currentLayer(AppTemplate.class).openNews();
        }
    }

rule type(ui, app)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.components.BlockConditional;
    import org.monet.metamodel.*;
    import org.monet.metamodel.internal.Ref;
    import org.monet.space.kernel.agents.AgentSession;
    import org.monet.space.kernel.components.layers.FederationLayer;
    import org.monet.space.kernel.components.layers.TaskLayer;
    import org.monet.space.kernel.constants.ApplicationInterface;
    import org.monet.space.kernel.constants.Database;
    import org.monet.space.kernel.model.Dictionary;
    import org.monet.space.kernel.model.*;
    import org.monet.space.office.ApplicationOffice;
    import io.intino.goros.unit.box.ui.datasources.TaskInboxDatasource;
    import io.intino.goros.unit.box.ui.datasources.TaskListDatasource.Inbox;
    import io.intino.goros.unit.util.AccountHelper;
    import io.intino.goros.unit.util.LayerHelper;

    import java.time.Instant;
    import java.util.List;

    import static java.util.Collections.emptyList;

    public class AppTemplate extends AbstractAppTemplate<$boxName+firstUpperCase~Box> {
        private View current = null;
        private boolean sessionClosedDialogOpened = false;
        private Instant lastCheck;

        public enum View { Dashboard, Roles, TaskTray, TaskBoard, News, Trash<<, $definition+declaration...[, ]>> }

        public AppTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        @Override
        public void init() {
            super.init();
            if (!org.monet.space.kernel.model.BusinessUnit.getInstance().isInstalled()) {
                notifier.redirect(session().browser().baseUrl() + "/install");
                return;
            }
            box().unit().initSession(session());
            initLoggedChecker();
            reloadPage.onExecute(e -> notifier.redirect(session().browser().requestUrl()));
            io.intino.goros.unit.util.DisplayHelper.initAgentSession(session());
            io.intino.goros.unit.util.DisplayHelper.initContext(box().unit(), session(), Thread.currentThread().getId());
            box().pushService().onLinkedToThread(session().client(), threadId -> {
                io.intino.goros.unit.util.DisplayHelper.initContext(box().unit(), session(), threadId);
                checkFederation();
            });
            box().notifier().onTaskCreated(this, this::refreshTasksCount);
            box().notifier().onTaskAssigned(this, this::refreshTasksCount);
            box().notifier().onTaskUnAssigned(this, this::refreshTasksCount);
            box().notifier().onTaskStateChange(this, this::refreshTasksCount);
            refresh();
        }

        @Override
        public void refresh() {
            super.refresh();
            refreshDrawer();
            taskTrayLink.address(path -> path.replace(":folder", "Pendientes"));
            taskTrayIconLink.address(path -> path.replace(":folder", "Pendientes"));
            taskBoardLink.address(path -> path.replace(":folder", "Pendientes"));
            taskBoardIconLink.address(path -> path.replace(":folder", "Pendientes"));
            newsLink.address(path -> path);
            newsIconLink.address(path -> path);
        }

        @Override
        public void remove() {
            super.remove();
            box().notifier().unTaskCreated(this);
            box().notifier().unTaskAssigned(this);
            box().notifier().unTaskUnAssigned(this);
            box().notifier().unTaskStateChange(this);
        }

        public void embedded(boolean embedded) {
            if (!embedded) return;
            header.hide();
            drawer.hide();
        }

        public void openHome() {
            Distribution distribution = BusinessUnit.getInstance().getDistribution();
            Distribution.ShowProperty showProperty = distribution.getShow();
            if (false) {}
            <<$definition+openHome...[$NL]>>
            else openForbiddenPage();
        }

        <<$definition+method...[$NL]>>

        public void openForbiddenPage() {
            loading.visible(false);
            forbiddenPage.show();
        }

        public void openDashboard() {
            if (initializationTaskOpened()) return;
            openView(View.Dashboard);
            if (dashboardPage.dashboardStamp != null) dashboardPage.dashboardStamp.refresh();
        }

        public void openRoles() {
            if (initializationTaskOpened()) return;
            openView(View.Roles);
            if (rolesPage.rolesStamp != null) rolesPage.rolesStamp.refresh();
        }

        public void openTaskTray(String folder) {
            if (initializationTaskOpened()) return;
            openView(View.TaskTray);
            if (taskTrayPage.taskTrayStamp != null) {
                taskTrayPage.taskTrayStamp.folder(folder);
                taskTrayPage.taskTrayStamp.refresh();
            }
        }

        public void openTaskBoard(String folder) {
            if (initializationTaskOpened()) return;
            openView(View.TaskBoard);
            if (taskBoardPage.taskBoardStamp != null) {
                taskBoardPage.taskBoardStamp.folder(folder);
                taskBoardPage.taskBoardStamp.refresh();
            }
        }

        public void openNews() {
            openView(View.News);
            if (newsPage.newsStamp != null) newsPage.newsStamp.refresh();
        }

        public void openTrash() {
            openView(View.Trash);
            if (trashPage.trashStamp != null) trashPage.trashStamp.refresh();
        }

        private void refreshDrawer() {
            Distribution distribution = BusinessUnit.getInstance().getDistribution();
            Distribution.ShowProperty showProperty = distribution.getShow();
            <<$definition+refreshDrawer...[$NL]>>
            dashboard.visible(AccountHelper.hasRoles(dashboardRoles(showProperty), session()));
            roles.visible(showProperty.getTabRoles() != null && AccountHelper.hasRoles(showProperty.getTabRoles().getFor(), session()));
            taskTray.visible(showProperty.getTabTasktray() != null && AccountHelper.hasRoles(showProperty.getTabTasktray().getFor(), session()));
            if (taskTray.isVisible()) taskTray.value(AccountHelper.aliveTaskTrayTasksCount(session()));
            taskBoard.visible(showProperty.getTabTaskboard() != null && AccountHelper.hasRoles(showProperty.getTabTaskboard().getFor(), session()));
            if (taskBoard.isVisible()) taskBoard.value(AccountHelper.activeTaskBoardTasksCount(session()));
            news.visible(showProperty.getTabNews() != null && AccountHelper.hasRoles(showProperty.getTabNews().getFor(), session()));
            trash.visible(showProperty.getTabTrash() != null && AccountHelper.hasRoles(showProperty.getTabTrash().getFor(), session()));
        }

        <<$definition+rolesMethod...[$NL]>>
        <<$definition+setupAddressMethod...[$NL]>>

        private List<Ref> nodeDefinitionRoles(Distribution.ShowProperty showProperty, String code) {
            NodeDefinition definition = showProperty.getTabEnvironment().stream().map(te -> org.monet.space.kernel.model.Dictionary.getInstance().getNodeDefinition(te.getValue())).filter(d -> d.getCode().equals(code)).findFirst().orElse(null);
            if (definition == null) return null;
            if (!definition.isEnvironment()) return null;

            if (definition.isDesktop()) {
                DesktopDefinition desktopDefinition = (DesktopDefinition) definition;
                return desktopDefinition.getFor() != null ? desktopDefinition.getFor().getRole() : emptyList();
            } else if (definition.isContainer() && definition.isEnvironment()) {
                ContainerDefinition containerDefinition = (ContainerDefinition) definition;
                return containerDefinition.getFor() != null ? containerDefinition.getFor().getRole() : emptyList();
            }

            return null;
        }

        private List<Ref> dashboardRoles(Distribution.ShowProperty showProperty) {
            return dashboardRoles(showProperty, "Dashboard");
        }

        private List<Ref> dashboardRoles(Distribution.ShowProperty showProperty, String name) {
            DashboardDefinition definition = showProperty.getTabDashboard().stream().map(te -> org.monet.space.kernel.model.Dictionary.getInstance().getDashboardDefinition(te.getDefinition())).filter(d -> d.getName().equals(name)).findFirst().orElse(null);
            if (definition == null) return null;
            return definition.getFor() != null ? definition.getFor().getRole() : emptyList();
        }

        private void openView(View view) {
            loading.visible(false);
            if (current == view) return;
            if (current != null) blockOf(current).hide();
            blockOf(view).show();
            current = view;
        }

        private boolean initializationTaskOpened() {
            Task task = io.intino.goros.unit.util.LayerHelper.taskLayer().getCurrentInitializerTask();
            if (task == null) return false;
            if (canResolveInitializerTask()) openInitializationTask(task.getId(), io.intino.goros.unit.box.ui.datasources.TaskListDatasource.Inbox.TaskBoard.name());
            else openUpdateRequiredPage();
            return true;
        }

        private void openUpdateRequiredPage() {
            loading.visible(false);
            updateRequiredPage.visible(true);
        }

        private boolean canResolveInitializerTask() {
            FederationLayer federationLayer = io.intino.goros.unit.util.LayerHelper.federationLayer(session());
            if (!federationLayer.isLogged()) return true;
            TaskLayer taskLayer = io.intino.goros.unit.util.LayerHelper.taskLayer();
            Task currentInitializerTask = taskLayer.getCurrentInitializerTask();
            Account account = federationLayer.loadAccount();
            return account.canResolveInitializerTask(currentInitializerTask);
        }

        private BlockConditional blockOf(View view) {
            <<$definition+block...[$NL]>>
            if (view == View.Dashboard) return dashboardPage;
            if (view == View.Roles) return rolesPage;
            if (view == View.TaskTray) return taskTrayPage;
            if (view == View.TaskBoard) return taskBoardPage;
            if (view == View.News) return newsPage;
            if (view == View.Trash) return trashPage;
            return null;
        }

        private boolean openInitializationTask(String id, String inbox) {
            Task initializationTask = io.intino.goros.unit.util.LayerHelper.taskLayer().getCurrentInitializerTask();
            if (initializationTask != null && (!initializationTask.getId().equals(id) || !canResolveInitializerTask())) {
                openUpdateRequiredPage();
                return false;
            }
            Task task = io.intino.goros.unit.util.LayerHelper.taskLayer().loadTask(id);
            <<$definition+taskInitialization...[$NL]>>
            return true;
        }

        private void refreshTasksCount(Task task) {
            if (taskTray.isVisible()) taskTray.value(AccountHelper.aliveTaskTrayTasksCount(session()));
            if (taskBoard.isVisible()) taskBoard.value(AccountHelper.activeTaskBoardTasksCount(session()));
        }

        private void initLoggedChecker() {
            sessionClosedDialog.onClose(e -> sessionClosedDialogOpened = false);
        }

        private void checkFederation() {
            try {
                if (checkAgain() && !LayerHelper.federationLayer(session()).isLogged()) showSessionClosedDialog();
                lastCheck = Instant.now();
            }
            catch (Throwable ignored) {
                showSessionClosedDialog();
            }
        }

        private boolean checkAgain() {
            return lastCheck == null || Instant.now().toEpochMilli()-lastCheck.toEpochMilli() > 1_000;
        }

        private void showSessionClosedDialog() {
            if (sessionClosedDialogOpened) return;
            sessionClosedDialog.open();
            sessionClosedDialogOpened = true;
        }

    }

rule type(ui, header)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import org.monet.metamodel.Distribution;
    import org.monet.metamodel.Project;
    import org.monet.space.kernel.Kernel;
    import org.monet.space.kernel.exceptions.DataException;
    import org.monet.space.kernel.model.BusinessUnit;

    import java.io.File;
    import java.net.MalformedURLException;
    import java.net.URL;

    public class HeaderTemplate extends AbstractHeaderTemplate<$boxName+firstUpperCase~Box> {

        public HeaderTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        @Override
        public void init() {
            super.init();
            BusinessUnit businessUnit = BusinessUnit.getInstance();
            Distribution distribution = businessUnit.getDistribution();
            Project project = businessUnit.getBusinessModel().getProject();
            title.value(distribution != null ? BusinessUnit.getTitle(distribution, project) : "");
            subtitle.value(businessUnit.getLabel());
            logo.value(logo());
            businessUnitsBlock.onOpen(e -> businessUnitsStamp.refresh());
        }

        private URL logo() {
            try {
                return new File(Kernel.getInstance().getConfiguration().getFederationLogoFile()).toURI().toURL();
            } catch (DataException | MalformedURLException ignored) {
                return HeaderTemplate.class.getResource("/images/logo.png");
            }
        }
    }

rule type(definition, container, environment) and trigger(openHome)
    else if (AccountHelper.hasRoles($name+firstLowerCase~Roles(showProperty), session())) open$name+firstUpperCase~(io.intino.goros.unit.util.NodeHelper.getEnvironmentNodeId(io.intino.goros.unit.util.AccountHelper.account(session()), "$code"), null, true);

rule type(definition, desktop) and trigger(openHome)
    else if (AccountHelper.hasRoles($name+firstLowerCase~Roles(showProperty), session())) open$name+firstUpperCase~(true);

rule type(definition, container, environment) and trigger(refreshDrawer)
    $name+firstLowerCase~IconLink.address(this::setup$name+firstUpperCase~Link);
    $name+firstLowerCase~Link.address(this::setup$name+firstUpperCase~Link);

rule type(definition, desktop) and trigger(refreshDrawer)
    $name+firstLowerCase~IconLink.address(path -> path.replace(":name", "$name+lowercase").replace(":mode", "default"));
    $name+firstLowerCase~Link.address(path -> path.replace(":name", "$name+lowercase").replace(":mode", "default"));
    $name+firstLowerCase.visible(AccountHelper.hasRoles($name+firstLowerCase~Roles(showProperty), session()));

rule type(definition) and trigger(refreshDrawer)

rule type(definition, container, environment) and trigger(rolesMethod)
    private List<Ref> $name+firstLowerCase~Roles(Distribution.ShowProperty showProperty) {
        return nodeDefinitionRoles(showProperty, "$code");
    }

rule type(definition, desktop) and trigger(rolesMethod)
    private List<Ref> $name+firstLowerCase~Roles(Distribution.ShowProperty showProperty) {
        return nodeDefinitionRoles(showProperty, "$code");
    }

rule type(definition, container, environment) and trigger(setupAddressMethod)
    private String setup$name+firstUpperCase~Link(String path) {
        String id = io.intino.goros.unit.util.NodeHelper.getEnvironmentNodeId(io.intino.goros.unit.util.AccountHelper.account(session()), "$code");
        return path.replace(":name", "$name+lowercase").replace(":id", id != null ? id : "").replace(":view", "default").replace(":mode", "default");
    }

rule type(definition) and trigger(setupAddressMethod)

rule type(definition) and trigger(rolesMethod)

rule type(definition, index) and trigger(declaration)

rule type(definition) and trigger(declaration)
    $name+firstUpperCase

rule type(definition, process) and trigger(method)
    public void open$name+firstUpperCase(String task, String inbox) {
        if (openInitializationTask(task, inbox)) return;
        open$name+firstUpperCase(io.intino.goros.unit.util.LayerHelper.taskLayer().loadTask(task), inbox);
    }

    private void open$name+firstUpperCase(Task task, String inbox) {
        openView(View.$name+firstUpperCase);
        if ($name+firstLowerCase~Page.$name+firstLowerCase~Stamp != null) {
            $name+firstLowerCase~Page.$name+firstLowerCase~Stamp.inbox(io.intino.goros.unit.box.ui.datasources.TaskListDatasource.Inbox.from(inbox));
            $name+firstLowerCase~Page.$name+firstLowerCase~Stamp.open(task.getId());
        }
    }

rule type(definition, index) and trigger(method)

rule type(definition, source) and trigger(method)
    public void open$name+firstUpperCase() {
        if (initializationTaskOpened()) return;
        openView(View.$name+firstUpperCase);
        if ($name+firstLowerCase~Page.$name+firstLowerCase~Stamp == null) return;
        <<$sourceDesktop>>
        $name+firstLowerCase~Page.$name+firstLowerCase~Stamp.open("$code");
    }

rule type(sourceDesktop)
    $name+firstLowerCase~Page.$name+firstLowerCase~Stamp.desktop("$desktopLabel", "/elemento/$desktop+lowerCase~/default");

rule type(definition, process) and trigger(taskInitialization)
    if (task.getDefinition().getCode().equals("$code")) open$name+firstUpperCase(task, inbox);

rule type(definition) and trigger(taskInitialization)

rule type(definition, singleton) and trigger(method)
    public void open$name+firstUpperCase(boolean readonly) {
        if (initializationTaskOpened()) return;
        openView(View.$name+firstUpperCase);
        if ($name+firstLowerCase~Page.$name+firstLowerCase~Stamp != null) {
            $name+firstLowerCase~Page.$name+firstLowerCase~Stamp.open("$code", readonly);
        }
    }

rule type(definition) and trigger(method)
    public void open$name+firstUpperCase(String id, String view, boolean readonly) {
        if (initializationTaskOpened()) return;
        openView(View.$name+firstUpperCase);
        if ($name+firstLowerCase~Page.$name+firstLowerCase~Stamp != null) {
            $name+firstLowerCase~Page.$name+firstLowerCase~Stamp.open(id, view, readonly);
        }
    }

rule type(definition, process) and trigger(dispatchTask)
    if (name.equalsIgnoreCase("$name")) display.open$name+firstUpperCase(task, inbox);

rule type(definition) and trigger(dispatchTask)

rule type(definition, source) and trigger(dispatchSingleton)
    if (name.equalsIgnoreCase("$name")) display.open$name+firstUpperCase();

rule type(definition, singleton) and trigger(dispatchSingleton)
    if (name.equalsIgnoreCase("$name")) display.open$name+firstUpperCase(readonly);

rule type(definition) and trigger(dispatchSingleton)

rule type(definition, source) and trigger(dispatchInstance)

rule type(definition, process) and trigger(dispatchInstance)

rule type(definition, singleton) and trigger(dispatchInstance)

rule type(definition, index) and trigger(dispatchInstance)

rule type(definition) and trigger(dispatchInstance)
    if (name.equalsIgnoreCase("$name")) display.open$name+firstUpperCase(id, view, readonly);

rule type(definition, index) and trigger(block)

rule type(definition) and trigger(block)
    if (view == View.$name+firstUpperCase) return $name+firstLowerCase~Page;