package io.intino.goros.modernizing.monet.renderers.templates.konos;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class FormDefinitionTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(all(allTypes("show", "fields"), trigger("use"))).output(expression().output(placeholder("field", "use").multiple("\n"))));
		rules.add(rule().condition(allTypes("show", "fields")).output(literal("Block content as Relative(width=90%)\n    ")).output(expression().output(placeholder("field").multiple("\n"))));
		rules.add(rule().condition(allTypes("show", "location")).output(literal("Block(layout=Vertical Flexible, format=spaced) as Relative(height=100%) > OwnerTemplateStamp(template=\"NodeLocationTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) locationViewStamp")));
		rules.add(rule().condition(all(allTypes("show", "layout"), trigger("use"))).output(expression().output(placeholder("row", "use").multiple("\n"))));
		rules.add(rule().condition(allTypes("show", "layout")).output(literal("Block(format=compositeFieldStyle)")).output(expression().output(literal(" ")).output(placeholder("absoluteFacet"))).output(expression().output(literal(" ")).output(placeholder("relativeFacet"))).output(literal("\n    ")).output(expression().output(placeholder("row").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutRow"), trigger("use"))).output(expression().output(placeholder("element", "use").multiple("\n"))));
		rules.add(rule().condition(allTypes("layoutRow")).output(literal("Block(layout=Horizontal Flexible)\n    ")).output(expression().output(placeholder("element").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement", "section"), trigger("use"))).output(expression().output(placeholder("row", "use").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("layoutElement"), trigger("use"))).output(expression().output(placeholder("field", "use"))));
		rules.add(rule().condition(allTypes("layoutElement", "section")).output(literal("Block(layout=Vertical Flexible, format=compositeFieldStyle)\n    ")).output(expression().output(literal("Text(value=\"")).output(placeholder("label")).output(literal("\", format=h5 airBottom)"))).output(literal("\n    ")).output(expression().output(placeholder("row").multiple("\n"))));
		rules.add(rule().condition(allTypes("layoutElement", "space")).output(literal("Text(value=\" \")")));
		rules.add(rule().condition(allTypes("layoutElement")).output(literal("Block(format=airRight)")).output(expression().output(literal(" ")).output(placeholder("absoluteFacet"))).output(expression().output(literal(" ")).output(placeholder("relativeFacet"))).output(literal("\n    ")).output(placeholder("field")));
		rules.add(rule().condition(allTypes("absoluteFacet")).output(literal("as Absolute(")).output(expression().output(literal("width=")).output(placeholder("width")).output(literal("px"))).output(expression().output(placeholder("width", "empty")).output(literal(","))).output(expression().output(literal("height=")).output(placeholder("height")).output(literal("px"))).output(literal(")")));
		rules.add(rule().condition(allTypes("relativeFacet")).output(literal("as Relative(")).output(expression().output(literal("width=")).output(placeholder("width")).output(literal("%"))).output(expression().output(placeholder("width", "empty")).output(literal(","))).output(expression().output(literal("height=")).output(placeholder("height")).output(literal("%"))).output(literal(")")));
		rules.add(rule().condition(trigger("empty")));
		rules.add(rule().condition(all(allTypes("field", "link"), trigger("use"))).output(literal("use ")).output(placeholder("index", "firstUpperCase")));
		rules.add(rule().condition(all(allTypes("field", "composite"), trigger("use"))).output(expression().output(placeholder("field", "use").multiple("\n"))));
		rules.add(rule().condition(all(allTypes("field"), trigger("use"))));
		rules.add(rule().condition(allTypes("field", "text", "multiple")).output(literal("Text(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable Multiple(noItemsMessage=\"No hay elementos\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly > Count(min=")).output(placeholder("min")).output(literal(", max=")).output(placeholder("max")).output(literal(")")));
		rules.add(rule().condition(allTypes("field", "text")).output(literal("Text(format=airBottom")).output(expression().output(literal(", mode=")).output(placeholder("textMode"))).output(literal(") ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable(helperText=\"Rellene aquí el valor del campo\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "number", "multiple")).output(literal("Number(format=airBottom, min=")).output(placeholder("min")).output(literal(", max=")).output(placeholder("max")).output(literal(") ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable Multiple(noItemsMessage=\"No hay medidas\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "number")).output(literal("Number(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "boolean")).output(literal("Switch(format=airBottom, title=\"")).output(placeholder("label")).output(literal("\") ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Action Readonly")));
		rules.add(rule().condition(allTypes("field", "date", "multiple")).output(literal("Date(format=airBottom")).output(expression().output(literal(", pattern=\"")).output(placeholder("pattern")).output(literal("\""))).output(literal(") ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable Multiple(\"No ha indicado fechas\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "date")).output(literal("Date(format=airBottom")).output(expression().output(literal(", pattern=\"")).output(placeholder("pattern")).output(literal("\""))).output(literal(") ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable")).output(expression().output(literal("(timePicker=")).output(placeholder("timePicker")).output(literal(")"))).output(literal(" Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "memo", "multiple")).output(literal("Text(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable Multiple(noItemsMessage=\"No hay elementos\") Labeled(\"")).output(placeholder("label")).output(literal("\") Memo Readonly > Count(min=")).output(placeholder("min")).output(literal(", max=")).output(placeholder("max")).output(literal(")")));
		rules.add(rule().condition(allTypes("field", "memo")).output(literal("Text(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable Labeled(\"")).output(placeholder("label")).output(literal("\") Memo Readonly")));
		rules.add(rule().condition(allTypes("field", "serial")).output(literal("Text(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "file", "multiple")).output(literal("File(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable(showPreview=false) Multiple(noItemsMessage=\"No hay documentos\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "file")).output(literal("File(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable(showDropZone=true) Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "picture", "multiple")).output(literal("Image(format=airBottom imageMultipleStyle) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable(showPreview=true) Multiple(noItemsMessage=\"No hay imágenes\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "picture")).output(literal("Image(format=airBottom, allowFullscreen=true) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Editable(showPreview=true) Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly Absolute(width=150px,height=150px)")));
		rules.add(rule().condition(allTypes("field", "check")).output(literal("Selector(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as CheckBox(layout=Vertical) Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "link", "multiple")).output(literal("Selector(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as CollectionBox(source=")).output(placeholder("index", "firstUpperCase")).output(placeholder("indexView", "firstUpperCase")).output(literal("Table, multipleSelection=true, placeholder=\"Seleccione un valor\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly\nLink(title=\"\") ")).output(placeholder("name", "firstLowerCase")).output(literal("Trigger as OpenLayer Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.instance)")));
		rules.add(rule().condition(allTypes("field", "link")).output(literal("Block(layout=Horizontal Flexible Center)\n    Block(layout=Vertical Flexible) > Selector(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as CollectionBox(source=")).output(placeholder("index", "firstUpperCase")).output(placeholder("indexView", "firstUpperCase")).output(literal("Table, placeholder=\"Seleccione un valor\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly\n    Link(title=\"Abrir\", format=airTop airLeft) open")).output(placeholder("name", "firstUpperCase")).output(literal(" as OpenLayer Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.instance)")));
		rules.add(rule().condition(allTypes("field", "select", "multiple")).output(literal("Selector(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as ComboBox(placeholder=\"Seleccione un valor\", multipleSelection=true) Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "select", "inline")).output(literal("Selector(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as ListBox Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "select")).output(literal("Selector(format=airBottom) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as ComboBox(placeholder=\"Seleccione un valor\") Labeled(\"")).output(placeholder("label")).output(literal("\") Readonly")));
		rules.add(rule().condition(allTypes("field", "composite", "multiple")).output(literal("TemplateStamp(format=airBottom, template=")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Multiple(noItemsMessage=\"No hay elementos\", collapsed=true) Editable Labeled(\"")).output(placeholder("label")).output(literal("\")")));
		rules.add(rule().condition(allTypes("field", "composite")).output(literal("TemplateStamp(format=airBottom, template=")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template) ")).output(placeholder("name", "firstLowerCase")));
		rules.add(rule().condition(allTypes("field", "node", "multiple")).output(literal("OwnerTemplateStamp(format=airBottom, template=\"FieldNodeTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(placeholder("name", "firstLowerCase")).output(literal(" as Multiple(noItemsMessage=\"No hay elementos\") Editable Labeled(\"")).output(placeholder("label")).output(literal("\")")));
		rules.add(rule().condition(allTypes("field", "node")).output(literal("OwnerTemplateStamp(format=airBottom, template=\"FieldNodeTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(placeholder("name", "firstLowerCase")));
		rules.add(rule().condition(allTypes("compositeView")).output(literal("Template(format=compositeFieldStyle) ")).output(placeholder("definition", "firstUpperCase")).output(placeholder("name", "firstUpperCase")).output(literal("Template\n    Text(format=h5 airBottom, value=\"")).output(placeholder("label")).output(literal("\")\n    ")).output(placeholder("show")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}