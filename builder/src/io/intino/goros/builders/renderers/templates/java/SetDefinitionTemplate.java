package io.intino.goros.builders.renderers.templates.java;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class SetDefinitionTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("show","items")), (trigger("declaration"))),
			rule().condition((allTypes("show","ownedprototypes"))),
			rule().condition((allTypes("show","sharedprototypes"))),
			rule().condition((allTypes("show","report"))),
			rule().condition((type("show")), (trigger("declaration"))),
			rule().condition((type("show"))).output(literal("public void select(Node node) {\n    io.intino.goros.util.DisplayHelper.executeDelayed(b -> ")).output(mark("definition", "firstLowerCase")).output(mark("view", "firstUpperCase")).output(literal(".select(")).output(mark("definition", "firstLowerCase")).output(mark("view", "firstUpperCase")).output(literal(".findItem(n -> ((Node)n).getId().equals(node.getId()))), 800);\n}\n\npublic void refresh(Node node) {\n    ")).output(mark("definition", "firstLowerCase")).output(mark("view", "firstUpperCase")).output(literal(".refresh(")).output(mark("definition", "firstLowerCase")).output(mark("view", "firstUpperCase")).output(literal(".findItem(n -> ((Node)n).getId().equals(node.getId())), node);\n}\n\n@Override\npublic void init() {\n    super.init();\n    ")).output(mark("definition", "firstLowerCase")).output(mark("view", "firstUpperCase")).output(literal(".onAddItem(e -> {\n        Node node = e.item();\n        org.monet.space.kernel.model.Reference reference = node.getReference(\"")).output(mark("reference")).output(literal("\");\n        ")).output(mark("componentType")).output(literal("\n        ")).output(expression().output(mark("attribute").multiple("\n"))).output(literal("\n    });\n}\n\n@Override\npublic void refresh() {\n    super.refresh();\n    ")).output(mark("definition", "firstLowerCase")).output(mark("view", "firstUpperCase")).output(literal(".allowMultiSelection(!readonly);\n    ")).output(mark("definition", "firstLowerCase")).output(mark("view", "firstUpperCase")).output(literal(".source(new io.intino.goros.box.ui.datasources.Collection")).output(mark("datasourceType")).output(literal("Datasource(box().goros(), session(), node));\n    ")).output(mark("definition", "firstLowerCase")).output(mark("view", "firstUpperCase")).output(literal(".reload();\n}")),
			rule().condition((allTypes("componentType","items"))).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.rows.")).output(mark("definition", "firstUpperCase")).output(mark("view", "firstUpperCase")).output(literal("Row row = e.component();")),
			rule().condition((type("componentType"))).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.items.")).output(mark("definition", "firstUpperCase")).output(mark("view", "firstUpperCase")).output(literal("Item item = e.component();")),
			rule().condition((allTypes("attribute","items","date"))).output(literal("row.")).output(mark("shortName", "firstLowerCase")).output(literal("Item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.instantOf(reference, \"")).output(mark("code")).output(literal("\"));")),
			rule().condition((allTypes("attribute","items","picture"))).output(literal("row.")).output(mark("shortName", "firstLowerCase")).output(literal("Item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.urlOf(reference, \"")).output(mark("code")).output(literal("\", true));")),
			rule().condition((allTypes("attribute","items"))).output(literal("row.")).output(mark("shortName", "firstLowerCase")).output(literal("Item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.valueOf(reference, \"")).output(mark("code")).output(literal("\"));")),
			rule().condition((allTypes("attribute","date"))).output(literal("item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.instantOf(reference, \"")).output(mark("code")).output(literal("\"));")),
			rule().condition((allTypes("attribute","icon"))).output(literal("item.")).output(mark("name", "firstLowerCase")).output(literal(".icon(io.intino.goros.util.NodeHelper.urlOf(reference, \"")).output(mark("code")).output(literal("\", true));")),
			rule().condition((allTypes("attribute","picture"))).output(literal("item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.urlOf(reference, \"")).output(mark("code")).output(literal("\", true));")),
			rule().condition((allTypes("attribute","real"))).output(literal("item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.numberOf(reference, \"")).output(mark("code")).output(literal("\"));")),
			rule().condition((allTypes("attribute","integer"))).output(literal("item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.numberOf(reference, \"")).output(mark("code")).output(literal("\"));")),
			rule().condition((type("attribute"))).output(literal("item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.valueOf(reference, \"")).output(mark("code")).output(literal("\"));")),
			rule().condition((type("attribute"))).output(literal("row.")).output(mark("shortName", "firstLowerCase")).output(literal("Item.")).output(mark("name", "firstLowerCase")).output(literal(".value(io.intino.goros.util.NodeHelper.valueOf(reference, \"")).output(mark("code")).output(literal("\"));")),
			rule().condition((allTypes("collectionview","filter"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("module", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.components.Collection;\nimport org.monet.space.kernel.model.Node;\n\npublic class ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("FiltersTemplate extends Abstract")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("FiltersTemplate<")).output(mark("module", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private boolean readonly = true;\n    private Collection collection;\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("FiltersTemplate(")).output(mark("module", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("FiltersTemplate node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("FiltersTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("FiltersTemplate bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {\n        this.collection = collection;\n        updateFilters();\n        return this;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        reset.onExecute(e -> resetFilters());\n    }\n\n    private void updateFilters() {\n        ")).output(expression().output(mark("dimension", "updateCall").multiple("\n"))).output(literal("\n    }\n\n    private void resetFilters() {\n        ")).output(expression().output(mark("dimension", "clearCall").multiple("\n"))).output(literal("\n        collection.clearFilters();\n    }\n\n    ")).output(expression().output(mark("dimension", "updateMethod").multiple("\n"))).output(literal("\n}")),
			rule().condition((type("dimension")), (trigger("updatecall"))).output(literal("udpate")).output(mark("name", "firstUpperCase")).output(literal("();")),
			rule().condition((type("dimension")), (trigger("updatemethod"))).output(literal("private void udpate")).output(mark("name", "firstUpperCase")).output(literal("() {\n    ")).output(mark("name", "firstLowerCase")).output(literal(".label(\"")).output(mark("label")).output(literal("\");\n    ")).output(mark("name", "firstLowerCase")).output(literal(".attribute(\"")).output(mark("code")).output(literal("\");\n    ")).output(mark("name", "firstLowerCase")).output(literal(".bindTo(collection);\n    ")).output(mark("name", "firstLowerCase")).output(literal(".refresh();\n}")),
			rule().condition((type("dimension")), (trigger("clearcall"))).output(mark("name", "firstLowerCase")).output(literal(".clearSelection();")),
			rule().condition((allTypes("setdefinition","toolbar"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("module", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.components.Collection;\nimport io.intino.alexandria.ui.displays.components.collection.Selectable;\nimport io.intino.alexandria.ui.displays.events.ActionListener;\nimport io.intino.alexandria.ui.displays.events.Event;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.util.LayerHelper;\n\nimport java.util.function.Consumer;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate<")).output(mark("module", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private boolean readonly = false;\n    private java.util.function.Consumer<Node> addListener;\n    private java.util.function.Consumer<Boolean> toggleEditionListener;\n    private ActionListener removeSelectionListener;\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate(")).output(mark("module", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate onAdd(java.util.function.Consumer<Node> listener) {\n        this.addListener = listener;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate onToggleEdition(java.util.function.Consumer<Boolean> listener) {\n        this.toggleEditionListener = listener;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate onRemoveSelection(ActionListener listener) {\n        this.removeSelectionListener = listener;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("ToolbarTemplate bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {\n        this.toolbar.bindTo((Selectable)collection);\n        return this;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        ")).output(expression().output(mark("addList", "execute"))).output(literal("\n        edit.onExecute(e -> toggleEdition());\n        removeSelection.onExecute(e -> removeSelectionListener.accept(new Event(this)));\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        edit.title(readonly ? \"Editar\" : \"Finalizar edición\");\n        edit.visible(!node.getDefinition().isReadonly());\n        removeSelection.visible(!readonly && !node.getDefinition().isReadonly());\n        ")).output(expression().output(mark("addList", "refresh"))).output(literal("\n    }\n\n    private void addNode(String option) {\n        Node result = null;\n        ")).output(expression().output(mark("add", "toolbarTemplate").multiple("\n"))).output(literal("\n        if (result == null) return;\n        addListener.accept(result);\n    }\n\n    private void toggleEdition() {\n        readonly(!readonly);\n        toggleEditionListener.accept(!readonly);\n        refresh();\n    }\n\n}")),
			rule().condition((type("addList")), (trigger("execute"))).output(literal("add.onExecute(e -> addNode(e.option()));")),
			rule().condition((type("addList")), (trigger("visible"))).output(literal("add.visible(readonly && !node.getDefinition().isReadonly());")),
			rule().condition((type("add")), (trigger("toolbartemplate"))).output(literal("if (option.equals(\"Añadir ")).output(mark("label")).output(literal("\")) result = io.intino.goros.util.LayerHelper.nodeLayer().addNode(\"")).output(mark("code")).output(literal("\", node);")),
			rule().condition((type("setdefinition"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("module", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.components.BlockConditional;\nimport io.intino.alexandria.ui.displays.components.Collection;\nimport io.intino.alexandria.ui.displays.events.Event;\nimport io.intino.alexandria.ui.displays.events.SelectionEvent;\nimport io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;\nimport io.intino.alexandria.ui.displays.events.collection.RefreshCountEvent;\nimport org.monet.space.kernel.components.layers.NodeLayer;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.util.*;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("Template extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("Template<")).output(mark("module", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private Node selectedChild;\n    private boolean readonly = true;\n    private boolean nodeAdded = false;\n    private List<Node> selection = Collections.emptyList();\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("Template(")).output(mark("module", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public void open(String id) {}\n\n    @Override\n    public void init() {\n        super.init();\n        node = io.intino.goros.util.NodeHelper.singleton(\"")).output(mark("code")).output(literal("\");\n        initToolbars();\n        initViews();\n    }\n\n    private void initToolbars() {\n        filters.onToggle(e -> toggleFiltersViewVisibility(e.state()));\n        toolbar.onAdd(node -> { nodeAdded = true; refresh(); select(node); });\n        toolbar.onToggleEdition(this::toggleEdition);\n        toolbar.onRemoveSelection(this::removeSelection);\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        refreshToolbars();\n        refreshView();\n        refreshFilters();\n        if (viewSelector.selection().size() <= 0) DisplayHelper.selectDefaultView(viewSelector, node);\n    }\n\n    private void initViews() {\n        ")).output(expression().output(mark("view", "initCall").multiple("\n"))).output(literal("\n        filtersView.onInit(e -> initFilters());\n        filtersView.onShow(e -> showFilters());\n        ")).output(expression().output(mark("add", "initCall").multiple("\n"))).output(literal("\n    }\n\n    private void updateSelection(SelectionEvent selectionEvent) {\n        this.selection = selectionEvent.selection();\n        open(selectionEvent);\n    }\n\n    private void initFilters() {\n        ")).output(expression().output(mark("view", "filter").multiple("\n"))).output(literal("\n    }\n\n    private void showFilters() {\n        ")).output(expression().output(mark("view", "showFilterCall").multiple("\n"))).output(literal("\n    }\n\n    private void showFilters(BlockConditional filtersBlock) {\n        if (!filtersView.isVisible()) return;\n        ")).output(expression().output(mark("view", "hideFilterCall").multiple("\n"))).output(literal("\n        filtersBlock.show();\n        filtersBlock.refresh();\n    }\n\n    private void refreshToolbars() {\n        toolbar.node(node);\n        toolbar.readonly(readonly);\n        toolbar.refresh();\n    }\n\n    private void refreshCount(RefreshCountEvent event) {\n        String label = DictionaryHelper.referenceLabel(node);\n        count.value(Formatters.countMessage(event.count(), label, label + \" \" + translate(\"available\")));\n    }\n\n    private void refreshView() {\n        ")).output(expression().output(mark("view", "refreshCall").multiple("\n"))).output(literal("\n    }\n\n    private void toggleEdition(boolean value) {\n        readonly = !value;\n        if (!readonly) hideChildViews();\n        ")).output(expression().output(mark("view", "readonlyCall").multiple("\n"))).output(literal("\n    }\n\n    private void removeSelection(Event event) {\n        if (selection == null) return;\n        NodeLayer nodeLayer = io.intino.goros.util.LayerHelper.nodeLayer();\n        selection.forEach(nodeLayer::deleteNode);\n        refresh();\n    }\n\n    private void refreshFilters() {\n        if (!filtersView.isVisible()) return;\n        ")).output(expression().output(mark("view", "refreshFiltersCall").multiple("\n"))).output(literal("\n    }\n\n    private void bindCurrentViewTo(io.intino.alexandria.ui.displays.components.Collection collection) {\n        ")).output(expression().output(mark("add", "bindCall").multiple("\n"))).output(literal("\n    }\n\n    private void bindToolbarsTo(io.intino.alexandria.ui.displays.components.Collection collection) {\n        toolbar.bindTo(collection);\n        search.bindTo(collection);\n    }\n\n    private Collection currentCollection() {\n        ")).output(expression().output(mark("view", "collection").multiple("\n"))).output(literal("\n        return null;\n    }\n\n    private void toggleFiltersViewVisibility(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {\n        hideChildViews();\n        if (state == io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On) filtersView.show();\n        else filtersView.hide();\n    }\n\n    private void updateSelectedNodeViewVisibility(boolean visible) {\n        if (visible) {\n            if (filtersView.isVisible()) filters.toggle(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);\n            showSelectedNodeView();\n        }\n        else hideChildViews();\n    }\n\n    private void refresh(Node node) {\n        ")).output(expression().output(mark("view", "refreshNodeCall").multiple("\n"))).output(literal("\n    }\n\n    private void select(Node node) {\n        ")).output(expression().output(mark("view", "selectNodeCall").multiple("\n"))).output(literal("\n    }\n\n    private void open(SelectionEvent event) {\n        if (!readonly) return;\n        List<Node> selection = event.selection();\n        open(selection.size() > 0 ? selection.get(0) : null);\n    }\n\n    private ")).output(mark("name", "firstUpperCase")).output(literal("Template open(Node node) {\n        BlockConditional selectedView = selectedNodeView();\n        selectedChild = selectedView != null && selectedView.isVisible() && node == null ? null : node;\n        updateSelectedNodeViewVisibility(selectedChild != null);\n        return this;\n    }\n\n    private ")).output(mark("name", "firstUpperCase")).output(literal("Template close() {\n        selectedChild = null;\n        updateSelectedNodeViewVisibility(false);\n        return this;\n    }\n\n    private void showSelectedNodeView() {\n        if (selectedChild == null) return;\n        BlockConditional selectedView = selectedNodeView();\n        if (selectedView == null) return;\n        if (!selectedView.isVisible()) hideChildViews();\n        selectedView.show();\n    }\n\n    private BlockConditional selectedNodeView() {\n        if (selectedChild == null) return null;\n        ")).output(expression().output(mark("add", "equals").multiple("\n"))).output(literal("\n        return null;\n    }\n\n    private void hideChildViews() {\n        ")).output(expression().output(mark("add", "hideCall").multiple("\n"))).output(literal("\n    }\n\n    private Node reloadSelected() {\n        if (selectedChild == null) return null;\n        return io.intino.goros.util.LayerHelper.nodeLayer().loadNode(selectedChild.getId());\n    }\n\n}")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("initcall"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("initcall"))),
			rule().condition((type("collectionview")), (trigger("initcall"))).output(mark("name", "firstLowerCase")).output(literal("View.onInit(e -> {\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.")).output(mark("definition", "firstLowerCase")).output(mark("name", "firstUpperCase")).output(literal(".onRefreshItemCount(this::refreshCount);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.")).output(mark("definition", "firstLowerCase")).output(mark("name", "firstUpperCase")).output(literal(".onSelect(this::updateSelection);\n});\n")).output(mark("name", "firstLowerCase")).output(literal("View.onShow(e -> {\n    bindCurrentViewTo(")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.")).output(mark("definition", "firstLowerCase")).output(mark("name", "firstUpperCase")).output(literal(");\n    bindToolbarsTo(")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.")).output(mark("definition", "firstLowerCase")).output(mark("name", "firstUpperCase")).output(literal(");\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.node(node);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.readonly(readonly);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n    showFilters(filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters);\n});")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("filter"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("filter"))),
			rule().condition((type("collectionview")), (trigger("filter"))).output(literal("filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters.onShow(e -> {\n    filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters.")).output(mark("name", "firstLowerCase")).output(literal("FiltersStamp.node(node);\n    filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters.")).output(mark("name", "firstLowerCase")).output(literal("FiltersStamp.readonly(readonly);\n    filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters.")).output(mark("name", "firstLowerCase")).output(literal("FiltersStamp.bindTo(")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.")).output(mark("definition", "firstLowerCase")).output(mark("name", "firstUpperCase")).output(literal(");\n    filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters.")).output(mark("name", "firstLowerCase")).output(literal("FiltersStamp.refresh();\n});")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("showfiltercall"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("showfiltercall"))),
			rule().condition((type("collectionview")), (trigger("showfiltercall"))).output(literal("if (")).output(mark("name", "firstLowerCase")).output(literal("View.isVisible()) showFilters(filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters);")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("hidefiltercall"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("hidefiltercall"))),
			rule().condition((type("collectionview")), (trigger("hidefiltercall"))).output(literal("filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters.hide();")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("refreshcall"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("refreshcall"))),
			rule().condition((type("collectionview")), (trigger("refreshcall"))).output(literal("if (")).output(mark("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.refresh();")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("refreshfilterscall"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("refreshfilterscall"))),
			rule().condition((type("collectionview")), (trigger("refreshfilterscall"))).output(literal("if (filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters.isVisible()) filtersView.")).output(mark("name", "firstLowerCase")).output(literal("Filters.")).output(mark("name", "firstLowerCase")).output(literal("FiltersStamp.refresh();")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("refreshnodecall"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("refreshnodecall"))),
			rule().condition((type("collectionview")), (trigger("refreshnodecall"))).output(literal("if (")).output(mark("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.refresh(node);")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("selectnodecall"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("selectnodecall"))),
			rule().condition((type("collectionview")), (trigger("selectnodecall"))).output(literal("if (")).output(mark("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.select(node);")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("readonlycall"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("readonlycall"))),
			rule().condition((type("collectionview")), (trigger("readonlycall"))).output(literal("if (")).output(mark("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.readonly(readonly).refresh();")),
			rule().condition((allTypes("collectionview","ownedprototypes")), (trigger("collection"))),
			rule().condition((allTypes("collectionview","sharedprototypes")), (trigger("collection"))),
			rule().condition((type("collectionview")), (trigger("collection"))).output(literal("if (")).output(mark("name", "firstLowerCase")).output(literal("View.isVisible()) return ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.")).output(mark("definition", "firstLowerCase")).output(mark("name", "firstUpperCase")).output(literal(";")),
			rule().condition((type("add")), (trigger("initcall"))).output(mark("name", "firstLowerCase")).output(literal("View.onInit(e -> bindCurrentViewTo(currentCollection()));\n")).output(mark("name", "firstLowerCase")).output(literal("View.onShow(e -> {\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("Stamp.node(reloadSelected());\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("Stamp.readonly(!nodeAdded && readonly);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("Stamp.onRemove(e1 -> {\n        refresh();\n        close();\n    });\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("Stamp.onFinishEdition(this::refresh);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("Stamp.refresh();\n    if (")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("Stamp.selectedView() == null) ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("Stamp.selectDefaultView();\n    nodeAdded = false;\n});")),
			rule().condition((type("add")), (trigger("bindcall"))).output(literal("if (")).output(mark("name", "firstLowerCase")).output(literal("View.isVisible()) ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("Stamp.bindTo(collection);")),
			rule().condition((type("add")), (trigger("equals"))).output(literal("if (selectedChild.getCode().equals(\"")).output(mark("code")).output(literal("\")) return ")).output(mark("name", "firstLowerCase")).output(literal("View;")),
			rule().condition((type("add")), (trigger("hidecall"))).output(mark("name", "firstLowerCase")).output(literal("View.hide();"))
		);
	}
}