package io.intino.goros.modernizing.monet.renderers.templates.java;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class ProcessDefinitionTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("process","embedded"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.components.Collection;\nimport org.monet.space.kernel.model.Node;\nimport org.monet.space.kernel.model.Task;\nimport io.intino.goros.unit.box.ui.datasources.TaskInboxDatasource;\nimport io.intino.goros.unit.box.ui.datasources.TaskListDatasource.Inbox;\nimport io.intino.goros.unit.util.DisplayHelper;\n\nimport java.util.List;\nimport java.util.function.Consumer;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate<")).output(mark("boxName", "firstUpperCase")).output(literal("Box> {\n    private Task task;\n    private Inbox inbox;\n    private boolean readonly = true;\n    private io.intino.goros.unit.box.ui.ViewMode viewMode;\n    private java.util.function.Consumer<Task> changeListener;\n    private java.util.function.Consumer<Task> abortListener;\n    private java.util.function.Consumer<Task> showCollectionListener;\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate(")).output(mark("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate task(Task task) {\n        this.task = task;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate inbox(Inbox inbox) {\n        this.inbox = inbox;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate hideToolbar() {\n        toolbar.visible(false);\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate onChange(java.util.function.Consumer<Task> listener) {\n        this.changeListener = listener;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate onAbort(java.util.function.Consumer<Task> listener) {\n        this.abortListener = listener;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate onShowCollection(java.util.function.Consumer<Task> listener) {\n        this.showCollectionListener = listener;\n        return this;\n    }\n\n    public void openView(String view) {\n        openView(view, readonly);\n    }\n\n    public void openView(String view, boolean readonly) {\n    }\n\n    public String selectedView() {\n        List<String> selection = viewSelector.selection();\n        return selection.size() > 0 ? selection.get(0) : null;\n    }\n\n    public void selectDefaultView() {\n        io.intino.goros.unit.util.DisplayHelper.selectDefaultView(viewSelector, task);\n    }\n\n    public void bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {\n        previous.bindTo(collection);\n        previous.visible(collection != null);\n        next.bindTo(collection);\n        next.visible(collection != null);\n    }\n\n    public void showLabel(boolean value) {\n        label.visible(value);\n        description.visible(value);\n    }\n\n    public void viewMode(io.intino.goros.unit.box.ui.ViewMode value) {\n        this.viewMode = value;\n    }\n\n    public void showCollectionVisibility() {\n        showCollectionBack.visible(viewMode == io.intino.goros.unit.box.ui.ViewMode.Full);\n        showCollectionMenu.visible(viewMode == io.intino.goros.unit.box.ui.ViewMode.Compact);\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        box().notifier().onTaskStateChange(this, this::notifyResume);\n        initToolbar();\n        initViews();\n    }\n\n    @Override\n    public void remove() {\n        super.remove();\n        box().notifier().unTaskStateChange(this);\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        content.autoSize(viewMode == null || viewMode == io.intino.goros.unit.box.ui.ViewMode.Compact);\n        refreshToolbar();\n        refreshSelector();\n        refreshView();\n    }\n\n    private void initToolbar() {\n        toolbar.onUpdate(task -> task(task).refresh());\n        toolbar.onChange(this::notifyChange);\n        toolbar.onAbort(this::notifyAbort);\n        showCollectionBack.onExecute(e -> notifyShowCollection());\n        showCollectionMenu.onExecute(e -> notifyShowCollection());\n    }\n\n    private void initViews() {\n        stateView.onShow(e -> refreshStateView());\n        ")).output(expression().output(mark("view", "initCall").multiple("\n"))).output(literal("\n    }\n\n    private void refreshToolbar() {\n        toolbar.task(task);\n        toolbar.readonly(readonly);\n        toolbar.refresh();\n        label.value(task.getLabel());\n        description.value(io.intino.goros.unit.util.DisplayHelper.description(task, this::translate, org.monet.space.kernel.library.LibraryDate.Format.NUMERIC));\n    }\n\n    private String inboxPath() {\n        return inbox != null ? inbox.value(language()) : \"tareas\";\n    }\n\n    private void refreshView() {\n        if (stateView.isVisible()) viewSelector.select(\"state\");\n        ")).output(expression().output(mark("view", "refreshCall").multiple("\n"))).output(literal("\n    }\n\n    private void refreshStateView() {\n        if (task == null) return;\n        openInstance.visible(false);\n        stateView.stateViewStamp.task(task);\n        stateView.stateViewStamp.readonly(readonly);\n        stateView.stateViewStamp.refresh();\n    }\n\n    ")).output(expression().output(mark("view", "refreshViewMethod").multiple("\n"))).output(literal("\n\n    private void refreshSelector() {\n        ")).output(expression().output(mark("view", "refreshSelectorCall").multiple("\n"))).output(literal("\n    }\n\n    private void setupOpenInstance(Node<?> node) {\n        openInstance.visible(true);\n        if (node == null) return;\n        openInstance.onOpen(e -> fillLayer(node, e.layer()));\n        openInstance.address(path -> io.intino.goros.unit.util.PathHelper.pathOf(node));\n    }\n\n    private void fillLayer(Node<?> node, io.intino.alexandria.ui.displays.components.Layer<?, ?> layer) {\n        layer.title(node.getLabel());\n        AppTemplate template = new AppTemplate(box());\n        layer.template(template);\n        template.embedded(true);\n    }\n\n    private void notifyResume(Task task) {\n        refreshSelector();\n        if (changeListener != null) changeListener.accept(task);\n    }\n\n    private void notifyAbort(Task task) {\n        task(task).refresh();\n        if (abortListener != null) abortListener.accept(task);\n    }\n\n    private void notifyChange(Task task) {\n        task(task).refresh();\n        if (changeListener != null) changeListener.accept(task);\n    }\n\n    private void notifyShowCollection() {\n        if (showCollectionListener == null) return;\n        showCollectionListener.accept(task);\n    }\n}")),
			rule().condition((allTypes("process","stateview"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.Display;\nimport org.monet.metamodel.internal.TaskOrderDefinition;\nimport org.monet.space.kernel.model.Node;\nimport org.monet.space.kernel.model.Task;\nimport io.intino.goros.unit.box.ui.DisplayProvider;\nimport io.intino.goros.unit.box.ui.displays.templates.TaskOrderTemplate;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("StateViewTemplate extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("StateViewTemplate<")).output(mark("boxName", "firstUpperCase")).output(literal("Box> implements DisplayProvider {\n    private Task task;\n    private boolean readonly = true;\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("StateViewTemplate(")).output(mark("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("StateViewTemplate task(Task task) {\n        this.task = task;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("StateViewTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        state.task(task);\n        state.displayProvider(this);\n        state.onOpenLayer(this::fillLayer);\n        state.refresh();\n    }\n\n    @Override\n    public io.intino.alexandria.ui.displays.Display displayFor(Node node, String view) {\n        ")).output(expression().output(mark("display").multiple("\n"))).output(literal("\n        if (node.getDefinition().getCode().equals(TaskOrderDefinition.CODE)) {\n            TaskOrderTemplate result = new TaskOrderTemplate(box().unit());\n            result.node(node);\n            return result;\n        }\n        return null;\n    }\n\n    private void fillLayer(String title, io.intino.alexandria.ui.displays.components.Layer<?, ?> layer) {\n        layer.title(title);\n        AppTemplate template = new AppTemplate(box());\n        layer.template(template);\n        template.embedded(true);\n    }\n}")),
			rule().condition((allTypes("process","view","target"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.Display;\nimport org.monet.metamodel.internal.TaskOrderDefinition;\nimport org.monet.space.kernel.model.Node;\nimport org.monet.space.kernel.model.Task;\nimport io.intino.goros.unit.box.ui.DisplayProvider;\nimport io.intino.goros.unit.box.ui.displays.templates.TaskOrderTemplate;\n\npublic class ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate extends Abstract")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate<")).output(mark("boxName", "firstUpperCase")).output(literal("Box> {\n    private Task task;\n    private boolean readonly = true;\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate(")).output(mark("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate task(Task task) {\n        this.task = task;\n        return this;\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        ")).output(expression().output(mark("show", "initCall").multiple("\n"))).output(literal("\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        if (task == null) return;\n        refreshView();\n    }\n\n    private void refreshView() {\n        org.monet.space.kernel.model.Node node = task.getTarget();\n        ")).output(expression().output(mark("show", "hideCall").multiple("\n"))).output(literal("\n        if (node == null) return;\n        org.monet.metamodel.NodeDefinition definition = node.getDefinition();\n        ")).output(expression().output(mark("show", "showCall").multiple("\n"))).output(literal("\n    }\n\n    ")).output(expression().output(mark("show").multiple("\n"))).output(literal("\n}")),
			rule().condition((allTypes("process","view","shortcut"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("boxName", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.ui.displays.Display;\nimport org.monet.metamodel.internal.TaskOrderDefinition;\nimport org.monet.space.kernel.model.Node;\nimport org.monet.space.kernel.model.Task;\nimport io.intino.goros.unit.box.ui.DisplayProvider;\nimport io.intino.goros.unit.box.ui.displays.templates.TaskOrderTemplate;\n\npublic class ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate extends Abstract")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate<")).output(mark("boxName", "firstUpperCase")).output(literal("Box> {\n    private Task task;\n    private boolean readonly = true;\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate(")).output(mark("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate task(Task task) {\n        this.task = task;\n        return this;\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    public boolean editing() {\n        return !readonly;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        ")).output(expression().output(mark("show", "initCall").multiple("\n"))).output(literal("\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        if (task == null) return;\n        refreshView();\n    }\n\n    private void refreshView() {\n        org.monet.space.kernel.model.Node node = task.getShortcutInstance(\"")).output(mark("shortcut")).output(literal("\");\n        ")).output(expression().output(mark("show", "hideCall").multiple("\n"))).output(literal("\n        if (node == null) return;\n        org.monet.metamodel.NodeDefinition definition = node.getDefinition();\n        ")).output(expression().output(mark("show", "showCall").multiple("\n"))).output(literal("\n    }\n\n    ")).output(expression().output(mark("show").multiple("\n"))).output(literal("\n}")),
			rule().condition((type("process"))).output(literal("package ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.")).output(mark("boxName", "firstUpperCase")).output(literal("Box;\nimport org.monet.space.kernel.model.Task;\nimport io.intino.goros.unit.box.ui.datasources.TaskListDatasource.Inbox;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("Template extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("Template<")).output(mark("boxName", "firstUpperCase")).output(literal("Box> {\n    private Task task;\n    private Inbox inbox;\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("Template(")).output(mark("boxName", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("Template task(Task task) {\n        this.task = task;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("Template inbox(Inbox inbox) {\n        this.inbox = inbox;\n        return this;\n    }\n\n    public void open(String id) {\n        task(io.intino.goros.unit.util.LayerHelper.taskLayer().loadTask(id));\n        refresh();\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        if (task == null) return;\n        refreshHeader();\n        refreshContent();\n    }\n\n    private void refreshHeader() {\n        label.value(task.getLabel());\n        description.value(io.intino.goros.unit.util.DisplayHelper.description(task, this::translate));\n        tasks.address(p -> p.replace(\":folder\", \"default\"));\n        tasks.visible(inbox == Inbox.TaskBoard);\n        myTasks.address(p -> p.replace(\":folder\", \"default\"));\n        myTasks.visible(inbox == Inbox.TaskTray);\n    }\n\n    private void refreshContent() {\n        content.inbox(inbox);\n        content.task(task);\n        content.readonly(false);\n        content.refresh();\n        if (content.selectedView() == null) content.selectDefaultView();\n    }\n}")),
			rule().condition((type("display"))).output(literal("if (node.getDefinition().getCode().equals(\"")).output(mark("code")).output(literal("\") && (view == null || view.equals(\"")).output(mark("viewCode")).output(literal("\"))) {\n    ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates.")).output(mark("name", "firstUpperCase")).output(mark("viewName", "firstUpperCase")).output(literal("ViewTemplate result = new ")).output(mark("package")).output(literal(".")).output(mark("module", "lowerCase")).output(literal(".box.ui.displays.templates.")).output(mark("name", "firstUpperCase")).output(mark("viewName", "firstUpperCase")).output(literal("ViewTemplate(box());\n    result.node(node);\n    result.readonly(false);\n    return result;\n}")),
			rule().condition((type("view")), (trigger("initcall"))).output(mark("name", "firstLowerCase")).output(literal("View.onShow(e -> refresh")).output(mark("name", "firstUpperCase")).output(literal("View());")),
			rule().condition((type("view")), (trigger("refreshcall"))).output(literal("if (")).output(mark("name", "firstLowerCase")).output(literal("View.isVisible()) viewSelector.select(\"")).output(mark("name", "firstLowerCase")).output(literal("\");")),
			rule().condition((allTypes("view","shortcut")), (trigger("refreshselectorcall"))).output(literal("if (task.getShortcutInstance(\"")).output(mark("shortcut")).output(literal("\") != null) viewSelector.showOption(\"")).output(mark("name", "firstLowerCase")).output(literal("\");\nelse viewSelector.hideOption(\"")).output(mark("name", "firstLowerCase")).output(literal("\");")),
			rule().condition((allTypes("view","target")), (trigger("refreshselectorcall"))).output(literal("if (task.getTarget() != null) viewSelector.showOption(\"")).output(mark("name", "firstLowerCase")).output(literal("\");\nelse viewSelector.hideOption(\"")).output(mark("name", "firstLowerCase")).output(literal("\");")),
			rule().condition((allTypes("view","shortcut")), (trigger("refreshviewmethod"))).output(literal("private void refresh")).output(mark("name", "firstUpperCase")).output(literal("View() {\n    if (task == null) return;\n    setupOpenInstance(task.getShortcutInstance(\"")).output(mark("shortcut")).output(literal("\"));\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.task(task);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.readonly(true);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n}")),
			rule().condition((type("view")), (trigger("refreshviewmethod"))).output(literal("private void refresh")).output(mark("name", "firstUpperCase")).output(literal("View() {\n    if (task == null) return;\n    setupOpenInstance(task.getTarget());\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.task(task);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.readonly(true);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n}")),
			rule().condition((allTypes("view","shortcut")), (trigger("refreshview"))).output(literal("private void refresh")).output(mark("name", "firstUpperCase")).output(literal("View() {\n    if (task == null) return;\n    org.monet.space.kernel.model.Node node = task.getShortcutInstance(\"")).output(mark("shortcut")).output(literal("\");\n    if (node == null) return;\n    org.monet.metamodel.NodeDefinition definition = node.getDefinition();\n    ")).output(expression().output(mark("show").multiple("\n"))).output(literal("\n}")),
			rule().condition((allTypes("view","shortcut"))),
			rule().condition((type("show")), (trigger("initcall"))).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.onShow(e -> refresh")).output(mark("definitionName", "firstUpperCaseCase")).output(mark("viewName", "firstUpperCase")).output(literal("());")),
			rule().condition((type("show")), (trigger("hidecall"))).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.hide();")),
			rule().condition((type("show")), (trigger("showcall"))).output(literal("if (definition.getCode().equals(\"")).output(mark("definitionCode")).output(literal("\")) ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.show();")),
			rule().condition((allTypes("show","shortcut"))).output(literal("private void refresh")).output(mark("definitionName", "firstUpperCase")).output(mark("viewName", "firstUpperCase")).output(literal("() {\n    Node<?> node = task.getShortcutInstance(\"")).output(mark("shortcut")).output(literal("\");\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.node(node);\n    ")).output(mark("showContain")).output(literal("\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.readonly(readonly);\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.hideToolbar();\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.show();\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.refresh();\n}")),
			rule().condition((type("show"))).output(literal("private void refresh")).output(mark("definitionName", "firstUpperCase")).output(mark("viewName", "firstUpperCase")).output(literal("() {\n    Node<?> node = task.getTarget();\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.node(node);\n    ")).output(mark("showContain")).output(literal("\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.readonly(readonly);\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.hideToolbar();\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.show();\n    ")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.refresh();\n}")),
			rule().condition((type("showContain"))).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Block.")).output(mark("definitionName", "firstLowerCase")).output(mark("viewName", "firstUpperCase")).output(literal("Stamp.contain(io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(io.intino.goros.unit.util.NodeHelper.getContainerContain(node,\"")).output(mark("containDefinitionCode")).output(literal("\")));"))
		);
	}
}