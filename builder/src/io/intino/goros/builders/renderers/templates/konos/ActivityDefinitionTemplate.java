package io.intino.goros.builders.renderers.templates.konos;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class ActivityDefinitionTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("activity"))).output(literal("dsl Konos\n\nuse UI\nuse Theme\n\nTemplate(layout=Vertical Flexible, format=smallAir) ")).output(mark("name", "firstUpperCase")).output(literal("Template\n    Block(layout=Horizontal, format=bordered spaced) header\n        Block(layout=Vertical Flexible)\n            Block(layout=Horizontal)\n                Link(title=\"Tareas\", format=h4 middleAirRight, visible=false) tasks as Action Addressable(")).output(mark("module", "firstUpperCase")).output(literal("Elements.taskBoard)\n                Link(title=\"Mis tareas\", format=h4 middleAirRight, visible=false) myTasks as Action Addressable(")).output(mark("module", "firstUpperCase")).output(literal("Elements.taskTray)\n                Text(value=\"/\", format=h4 middleAirRight)\n                Text(format=h4 bold) label\n\n    Block(layout=Horizontal Flexible, format=smallAirTop) > TemplateStamp(template=")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate) content\n\nTemplate(layout=Vertical Flexible) ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate as Relative(height=100%)\n    Block(layout=Horizontal, format=bottomBordered bottomSpaced leftSpaced middleTopSpaced)\n        Block(layout=Horizontal Flexible) > OwnerTemplateStamp(template=\"TaskToolbarTemplate\", owner=")).output(mark("module", "firstUpperCase")).output(literal("Elements.goros) toolbar\n        Block(layout=Horizontal EndJustified)\n            MaterialIconButton(title=\"Anterior\", icon=\"KeyboardArrowLeft\", size=Small, format=airRight, visible=false) previous as SelectPreviousItem(collection=empty)\n            MaterialIconButton(title=\"Siguiente\", icon=\"KeyboardArrowRight\", size=Small, format=airRight, visible=false) next as SelectNextItem(collection=empty)\n            MaterialIconButton(title=\"Abrir\", icon=\"ZoomOutMap\", size=Small, visible=false) open as Action Addressable(")).output(mark("module", "firstUpperCase")).output(literal("Elements.task)\n\n    Selector viewSelector as Tabs\n        Text(value=\"Estado\") state as Option\n\n    Block(layout=Vertical Flexible)\n        Block(layout=Vertical Flexible) stateView as Conditional(viewSelector.state) Relative(height=100%) > TemplateStamp(template=")).output(mark("name", "firstUpperCase")).output(literal("StateViewTemplate) stateViewStamp\n\nTemplate(format=spaced) ")).output(mark("name", "firstUpperCase")).output(literal("StateViewTemplate as Relative(height=100%)\n    OwnerTemplateStamp(template=\"TaskStateViewTemplate\", owner=")).output(mark("module", "firstUpperCase")).output(literal("Elements.goros) state"))
		);
	}
}