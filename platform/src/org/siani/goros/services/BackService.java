package org.siani.goros.services;

import org.monet.space.kernel.model.*;
import org.monet.space.kernel.model.map.Location;
import org.sumus.fact.FactList;

import java.io.InputStream;
import java.time.Instant;
import java.util.List;
import java.util.Map;

public interface BackService {
	void addDatastoreCubeFact(String datastore, String cube, String xmlData);
	void addDatastoreCubeFacts(String datastore, String cube, String xmlData);
	void addDatastoreDimensionComponent(String datastore, String dimension, String xmlData);
	void addNodeFlag(String node, String name, String value);
	void addNodeNote(String node, String name, String value);
	void addSourceTerm(String source, Term term);
	void addTaskFact(String task, TaskFact fact);
	void addTaskFlag(String task, String name, String value);
	void addTaskShortCut(String task, String name, String value);
	Node consolidateNode(String node);
	Account createAccount(String username, UserInfo info, List<String> roles);
	Node createNode(String code, String parent);
	Task createTask(String code);
	void deleteNodeFlag(String node, String name);
	void deleteNodeNote(String node, String name);
	void deleteTaskFlag(String task, String name);
	void deleteTaskShortCut(String task, String name);
	InputStream downloadDistribution();
	void emptyTrash();
	void executeExporter(String exporter, String scope);
	void executeNodeCommand(String node, String command);
	boolean existsNode(String node);
	ExportItem exportNode(String node);
	List<ExportItem> exportNodes(List<String> nodes);
	NodeList getNodeAncestors(String node);
	InputStream getNodeDocument(String node);
	String getNodeDocumentContentType(String node);
	InputStream getNodeFile(String node, String filename);
	Map<String, String> getNodeFlags(String node);
	Location getNodeLocation(String node);
	Map<String, String> getNodeNotes(String node);
	Reference getNodeReference(String node, String code);
	ReferenceList getNodeReferences(String node, String code, String filter, String orderBy, Map<String, Object> parameters, int startPos, int limit);
	int getNodeReferencesCount(String node, String code, String filter, Map<String, Object> parameters);
	String getNodeSchema(String node);
	TaskList getNodeTasks(String node);
	Term getSourceParentTerm(String source, String code);
	TermList getSourceTerms(String source, String parent);
	FactList getTaskFacts(String task);
	Map<String, String> getTaskFlags(String task);
	String getTaskProcess(String task);
	TaskList getTasks(String account, TaskSearchRequest request);
	Map<String, String> getTaskShortCuts(String id);
	User getUserLinkedToNode(String node);
	Node getUserNode(String username, int depth);
	TaskList getUserTasks(String username);
	void gotoPlaceInTask(String task, String place, String history);
	boolean hasPermissions(String username);
	void importNode(String importer, String scopeNode, String data);
	Source loadSource(String id);
	User loadUser(String username);
	Node locateNode(String code, int depth);
	Source locateSource(String code, String url);
	void makeNodeDeleteable(String node);
	void makeNodeEditable(String node);
	void makeNodePrivate(String node);
	void makeNodePublic(String node);
	void makeNodeUnDeleteable(String node);
	void makeNodeUnEditable(String node);
	Datastore openDatastore(String name);
	Node openNode(String id, int depth);
	NodeList openNodes(List<String> ids, int depth);
	Task openTask(String id);
	Node recoverNode(String id);
	void removeNode(String id);
	void removeTask(String id);
	void resetNodeForm(String node);
	void resumeTask(String task);
	void runTask(String task);
	void saveNode(String node, String data);
	void saveNodeDocument(String node, InputStream document, String contentType);
	void saveNodeFile(String filename, InputStream document);
	void saveNodeParent(String node, String parent);
	void saveNodePartnerContext(String node, String context);
	void saveNodePicture(String filename, InputStream picture);
	void saveNodeReference(String node, String name, Map<String, String> attributes);
	void saveNodesAttribute(List<String> nodes, String xmlData);
	void saveTask(String task, String xmlData);
	void saveUser(String user, String xmlData);
	void searchEvent(int eventType, Instant dtFrom, Instant dtTo);
	void searchNodes(String node, SearchRequest request);
	void subscribe(ServerConfiguration configuration, int eventType);
	void unLockTask(String task, String place, String stop);
}
