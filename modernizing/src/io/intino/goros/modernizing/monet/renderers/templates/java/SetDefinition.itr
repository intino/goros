rule type(show, items) and trigger(declaration)

rule type(show, index) and trigger(declaration)
    private Node selectedChild;

rule type(show, sharedprototypes)

rule type(show, report)

rule type(show) and trigger(declaration)

rule type(show) and trigger(hideToolbar)

rule type(show, index, locations)
    public void addAndSelect(Node node) {
        $definition+firstLowerCase~$view+firstUpperCase.add($datasourceAddType);
        select(node);
    }

    public void select(Node node) {
        io.intino.goros.unit.util.DisplayHelper.executeDelayed(b -> $definition+firstLowerCase~$view+firstUpperCase.select($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> matches(n, node.getId()))), 800);
    }

    public void selectSorting(String sorting, String mode) {
        $definition+firstLowerCase~$view+firstUpperCase.sortings(sorting != null ? java.util.Collections.singletonList(io.intino.goros.unit.util.NodeHelper.sortingOf(sorting, mode)) : java.util.Collections.emptyList());
    }

    public void refresh(Node node) {
        $definition+firstLowerCase~$view+firstUpperCase.refresh($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> matches(n, node.getId())), node);
    }

    @Override
    public void init() {
        super.init();
        $definition+firstLowerCase~$view+firstUpperCase.onAddItem(e -> {
            $itemType
            org.monet.space.kernel.model.Reference reference = node.getReference("$reference");
            $componentType
            <<$attribute...[$NL]>>
        });
    }

    @Override
    public void refresh() {
        super.refresh();
        $definition+firstLowerCase~$view+firstUpperCase.allowMultiSelection(!readonly);
        if ($definition+firstLowerCase~$view+firstUpperCase.source() == null) $definition+firstLowerCase~$view+firstUpperCase.source(new io.intino.goros.unit.box.ui.datasources.$datasourceType~(box().unit(), session(), node, view));
        else {
            ((io.intino.goros.unit.box.ui.datasources.$datasourceType)$definition+firstLowerCase~$view+firstUpperCase.source()).node(node);
            ((io.intino.goros.unit.box.ui.datasources.$datasourceType)$definition+firstLowerCase~$view+firstUpperCase.source()).view(view);
            $definition+firstLowerCase~$view+firstUpperCase.reload();
        }
    }

    public boolean matches(Object node, String id) {
        if (node instanceof String) return node.equals(id);
        if (node instanceof Node) return ((Node<?>)node).getId().equals(id);
        return false;
    }

rule type(show, index)
    public void addAndSelect(Node node) {
        $definition+firstLowerCase~$view+firstUpperCase.add($datasourceAddType);
        select(node);
    }

    public void select(Node node) {
        io.intino.goros.unit.util.DisplayHelper.executeDelayed(b -> $definition+firstLowerCase~$view+firstUpperCase.select($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> matches(n, node.getId()))), 800);
    }

    public void selectSorting(String sorting, String mode) {
        $definition+firstLowerCase~$view+firstUpperCase.sortings(sorting != null ? java.util.Collections.singletonList(io.intino.goros.unit.util.NodeHelper.sortingOf(sorting, mode)) : java.util.Collections.emptyList());
    }

    public void refresh(Node node) {
        $definition+firstLowerCase~$view+firstUpperCase.refresh($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> matches(n, node.getId())), node);
    }

    @Override
    public void init() {
        super.init();
        $definition+firstLowerCase~$view+firstUpperCase.onAddItem(e -> {
            $itemType
            org.monet.space.kernel.model.Reference reference = node.getReference("$reference");
            $componentType
            <<$picture>>
            <<$title>>
            <<$line...[$NL]>>
            <<$highlight...[$NL]>>
        });
    }

    @Override
    public void refresh() {
        super.refresh();
        $definition+firstLowerCase~$view+firstUpperCase.allowMultiSelection(!readonly);
        if ($definition+firstLowerCase~$view+firstUpperCase.source() == null) $definition+firstLowerCase~$view+firstUpperCase.source(new io.intino.goros.unit.box.ui.datasources.$datasourceType~(box().unit(), session(), node, view));
        else {
            ((io.intino.goros.unit.box.ui.datasources.$datasourceType)$definition+firstLowerCase~$view+firstUpperCase.source()).node(node);
            ((io.intino.goros.unit.box.ui.datasources.$datasourceType)$definition+firstLowerCase~$view+firstUpperCase.source()).view(view);
            $definition+firstLowerCase~$view+firstUpperCase.reload();
        }
    }

    private void refreshDetailsDialog(Node node) {
        this.selectedChild = node;
        refreshDetailsDialog();
    }

    private void refreshDetailsDialog() {
        org.monet.space.kernel.model.Reference reference = selectedChild.getReference("$reference");
        <<$title+details>>
        <<$lineBelow...[$NL]>>
        <<$footer...[$NL]>>
    }

    public boolean matches(Object node, String id) {
        if (node instanceof String) return node.equals(id);
        if (node instanceof Node) return ((Node<?>)node).getId().equals(id);
        return false;
    }

rule type(show)
    public void addAndSelect(Node node) {
        $definition+firstLowerCase~$view+firstUpperCase.add($datasourceAddType);
        select(node);
    }

    public void select(Node node) {
        io.intino.goros.unit.util.DisplayHelper.executeDelayed(b -> $definition+firstLowerCase~$view+firstUpperCase.select($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> matches(n, node.getId()))), 800);
    }

    public void selectSorting(String sorting, String mode) {
        $definition+firstLowerCase~$view+firstUpperCase.sortings(sorting != null ? java.util.Collections.singletonList(io.intino.goros.unit.util.NodeHelper.sortingOf(sorting, mode)) : java.util.Collections.emptyList());
    }

    public void refresh(Node node) {
        $definition+firstLowerCase~$view+firstUpperCase.refresh($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> matches(n, node.getId())), node);
    }

    @Override
    public void init() {
        super.init();
        $definition+firstLowerCase~$view+firstUpperCase.onAddItem(e -> {
            $itemType
            org.monet.space.kernel.model.Reference reference = node.getReference("$reference");
            $componentType
            <<$attribute...[$NL]>>
        });
    }

    @Override
    public void refresh() {
        super.refresh();
        $definition+firstLowerCase~$view+firstUpperCase.allowMultiSelection(!readonly);
        if ($definition+firstLowerCase~$view+firstUpperCase.source() == null) $definition+firstLowerCase~$view+firstUpperCase.source(new io.intino.goros.unit.box.ui.datasources.$datasourceType~(box().unit(), session(), node, view));
        else {
            ((io.intino.goros.unit.box.ui.datasources.$datasourceType)$definition+firstLowerCase~$view+firstUpperCase.source()).node(node);
            ((io.intino.goros.unit.box.ui.datasources.$datasourceType)$definition+firstLowerCase~$view+firstUpperCase.source()).view(view);
            $definition+firstLowerCase~$view+firstUpperCase.reload();
        }
    }

    public boolean matches(Object node, String id) {
        if (node instanceof String) return node.equals(id);
        if (node instanceof Node) return ((Node<?>)node).getId().equals(id);
        return false;
    }

rule type(datasourceAddType, map)
    io.intino.goros.unit.box.ui.datasources.CollectionMapDatasource.placeMarkOf(node)

rule type(datasourceAddType)
    node

rule type(itemType, locations)
    Node node = io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(e.item());

rule type(itemType)
    Node node = e.item();

rule type(componentType, items)
    $package.$module+lowerCase.box.ui.displays.rows.$definition+firstUpperCase~$view+firstUpperCase~Row row = e.component();

rule type(componentType, index)
    $package.$module+lowerCase.box.ui.displays.items.$definition+firstUpperCase~$view+firstUpperCase~Item item = e.component();
    item.detailsTrigger.bindTo(detailsDialog);
    item.detailsTrigger.onOpen(e1 -> refreshDetailsDialog(node));

rule type(componentType)
    $package.$module+lowerCase.box.ui.displays.items.$definition+firstUpperCase~$view+firstUpperCase~Item item = e.component();

rule type(attribute, items, date)
    row.$shortName+firstLowerCase~Item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.instantOf($reference, "$code"));

rule type(attribute, items, picture)
    row.$shortName+firstLowerCase~Item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.spaceUrlOf(io.intino.goros.unit.util.NodeHelper.urlOf($reference, "$code", true), soul().baseAssetUrl()));

rule type(attribute, items)
    row.$shortName+firstLowerCase~Item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.valueOf($reference, "$code"));

rule type(attribute, date)
    <<$scope~.>>$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.instantOf($reference, "$code"));

rule type(attribute, icon)
    <<$scope~.>>$name+firstLowerCase.icon(io.intino.goros.unit.util.NodeHelper.spaceUrlOf(io.intino.goros.unit.util.NodeHelper.urlOf($reference, "$code", true), soul().baseAssetUrl()));

rule type(attribute, picture)
    <<$scope~.>>$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.spaceUrlOf(io.intino.goros.unit.util.NodeHelper.urlOf($reference, "$code", true), soul().baseAssetUrl()));

rule type(attribute, real)
    <<$scope~.>>$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.numberOf($reference, "$code"));

rule type(attribute, integer)
    <<$scope~.>>$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.numberOf($reference, "$code"));

rule type(attribute, location)
    String title = io.intino.goros.unit.util.NodeHelper.valueOf($reference, "$code");
    <<$scope~.>>$name+firstLowerCase.title(title != null && !title.isEmpty() ? title : this.translate("No title"));
    <<$scope~.>>$name+firstLowerCase.onExecute(e1 -> $definition+firstLowerCase~$view+firstUpperCase.select($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> matches(n, node.getId()))));

rule type(attribute, boolean)
    <<$scope~.>>$name+firstLowerCase.value(translate(io.intino.goros.unit.util.NodeHelper.valueOf($reference, "$code")));

rule type(attribute) and trigger(details)
    $name+firstLowerCase~Details.value(io.intino.goros.unit.util.NodeHelper.valueOf($reference, "$code"));

rule type(attribute)
    <<$scope~.>>$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.valueOf($reference, "$code"));

rule type(collectionview, filter)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.components.Collection;
    import org.monet.space.kernel.model.Node;

    public class $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate extends Abstract$definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate<$boxName+firstUpperCase~Box> {
        private Node node;
        private boolean readonly = true;
        private Collection collection;

        public $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate node(Node node) {
            this.node = node;
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {
            this.collection = collection;
            return this;
        }

        @Override
        public void init() {
            super.init();
            reset.onExecute(e -> resetFilters());
        }

        @Override
        public void refresh() {
            super.refresh();
            content.autoSize(true);
            updateFilters();
        }

        public void resetFilters() {
            <<$dimension+clearCall...[$NL]>>
            collection.clearFilters();
        }

        private void updateFilters() {
            <<$dimension+updateCall...[$NL]>>
        }

        <<$dimension+updateMethod...[$NL]>>
    }

rule type(dimension) and trigger(updateCall)
    udpate$name+firstUpperCase();

rule type(dimension) and trigger(updateMethod)
    private void udpate$name+firstUpperCase() {
        $name+firstLowerCase.label("$label");
        $name+firstLowerCase.attribute("$code");
        $name+firstLowerCase.bindTo(collection);
        $name+firstLowerCase.refresh();
    }

rule type(dimension) and trigger(clearCall)
    $name+firstLowerCase.clearSelection();

rule type(sorting) and trigger(codeRegistration)
    put("$view+firstLowerCase~_$label", "$code");

rule type(sorting)
    "$label"

rule type(addList) and trigger(addCall)
    <<$add+addCall...[$NL]>>

rule type(addList) and trigger(addPrototypeCall)
    <<$addPrototype+addPrototypeCall...[$NL]>>

rule type(add, prototype) and trigger(addPrototypeCall)
    result.add("Añadir $label");

rule type(add) and trigger(addCall)
    result.add("Añadir $label");

rule type(addList) and trigger(execute)
    add.onExecute(e -> addNode($defaultAdd+option));
    addSplit.onExecute(e -> addNode(e.option()));
    addPrototype.onExecute(e -> addPrototype($defaultAddPrototype+option));
    addPrototypeSplit.onExecute(e -> addPrototype(e.option()));

rule type(addList) and trigger(refresh)
    add.visible(addOptions.size() <= 1 && !isPrototypeView && readonly && !node.getDefinition().isReadonly());
    addSplit.options(addOptions);
    addSplit.visible(!isPrototypeView && addOptions.size() > 1 && readonly && !node.getDefinition().isReadonly());
    addPrototype.visible(isPrototypeView);
    addPrototypeSplit.options(addPrototypeOptions);
    addPrototypeSplit.visible(isPrototypeView && addPrototypeOptions.size() > 1);

rule type(addVisibility, visible)
    readonly && !node.getDefinition().isReadonly()

rule type(addVisibility)
    false

rule type(add, prototype) and trigger(toolbarTemplate)
    if (option.equals("Añadir $label")) result = io.intino.goros.unit.util.LayerHelper.nodeLayer().addPrototype("$code", node);

rule type(add) and trigger(toolbarTemplate)
    if (option.equals("Añadir $label")) result = io.intino.goros.unit.util.LayerHelper.nodeLayer().addNode("$code", node);

rule type(add) and trigger(option)
    "Añadir $label"

rule type(setdefinition, embedded)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.components.BlockConditional;
    import io.intino.alexandria.ui.displays.components.Collection;
    import io.intino.alexandria.ui.displays.components.SearchBox;
    import io.intino.alexandria.ui.displays.components.SelectorCheckBox;
    import io.intino.alexandria.ui.displays.events.Event;
    import io.intino.alexandria.ui.displays.events.SelectionEvent;
    import io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;
    import io.intino.alexandria.ui.displays.events.collection.RefreshCountEvent;
    import io.intino.alexandria.ui.displays.UserMessage;
    import org.monet.space.kernel.components.layers.NodeLayer;
    import org.monet.space.kernel.model.Node;
    import org.monet.space.kernel.model.Revision;
    import io.intino.goros.unit.box.ui.ViewMode;
    import io.intino.goros.unit.util.*;

    import java.util.Collections;
    import java.util.stream.Collectors;
    import java.util.List;

    public class $name+firstUpperCase~EmbeddedTemplate extends Abstract$name+firstUpperCase~EmbeddedTemplate<$boxName+firstUpperCase~Box> {
        private Node node;
        private Revision revision;
        private boolean readonly = false;
        private Node selectedChild;
        private boolean nodeAdded = false;
        private List<Node> selection = Collections.emptyList();
        private io.intino.goros.unit.box.ui.ViewMode viewMode = io.intino.goros.unit.box.ui.ViewMode.Compact;
        private java.util.function.Consumer<Long> itemsCountListener;
        private java.util.function.Consumer<Boolean> showFiltersListener;
        private java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> toggleFiltersListener;
        private java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> toggleViewListener;
        private SearchBox<?, ?> searchBox;
        private SelectorCheckBox<?, ?> filterByTitle;
        private org.monet.space.kernel.model.ClientOperation layerOperation;
        <<$toolbar+editableDeclaration>>
        <<$toolbar+navigableDeclaration>>

        public $name+firstUpperCase~EmbeddedTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        <<$toolbar+editableEvents>>
        <<$toolbar+navigableMethods>>

        public $name+firstUpperCase~EmbeddedTemplate node(Node node) {
            this.node = node;
            return this;
        }

        public void view(String view) {
            hideViews();
            <<$view+showViewCall...[$NL]>>
        }

        public $name+firstUpperCase~EmbeddedTemplate revision(org.monet.space.kernel.model.Revision revision) {
            this.revision = revision;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        public $name+firstUpperCase~EmbeddedTemplate hideToolbar() {
            toolbar.visible(false);
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate bindTo(SearchBox<?, ?> search, SelectorCheckBox<?, ?> filterByTitle) {
            this.searchBox = search;
            this.searchBox.onSearch(e -> toggleFilterByTitle(e.condition()));
            this.filterByTitle = filterByTitle;
            this.filterByTitle.onSelect(e -> filterByTitle());
            this.filterByTitle();
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate toggleFilters(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            toggleFiltersViewVisibility(state);
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onShowFilters(java.util.function.Consumer<Boolean> listener) {
            this.showFiltersListener = listener;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onToggleFilters(java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> listener) {
            this.toggleFiltersListener = listener;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate toggleView(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            this.viewMode = state == ToggleEvent.State.On ? io.intino.goros.unit.box.ui.ViewMode.Full : io.intino.goros.unit.box.ui.ViewMode.Compact;
            refreshViewMode();
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onToggleView(java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> listener) {
            this.toggleViewListener = listener;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onItemsCountChange(java.util.function.Consumer<Long> listener) {
            this.itemsCountListener = listener;
            return this;
        }

        @Override
        public void init() {
            super.init();
            initToolbar();
            initViews();
        }

        private void initToolbar() {
            <<$toolbar+editableInitCall>>
            edit.onExecute(e -> toggleEdition());
            openLayerTrigger.onOpen(e -> fillLayer(e.layer()));
        }

        @Override
        public void refresh() {
            super.refresh();
            refreshToolbar();
            refreshCollapse();
            refreshView();
            refreshFilters();
        }

        public Collection currentCollection() {
            <<$view+collection...[$NL]>>
            return null;
        }

        private void initViews() {
            hideViews.onExecute(e -> hideViewsBlock());
            <<$view+initCall...[$NL]>>
            filtersView.onInit(e -> initFilters());
            filtersView.onShow(e -> showFilters());
            <<$toolbar+initViews>>
        }

        private void clearSelection() {
            <<$view+clearSelectionCall...[$NL]>>
        }

        private void updateSelection(SelectionEvent selectionEvent) {
            List<Object> selection = selectionEvent.selection();
            this.selection = selection.stream().map(s -> s instanceof String ? load((String) s) : (Node<?>)s).collect(Collectors.toList());
            open(this.selection);
        }

        private Node<?> load(String id) {
            return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(id);
        }

        private void initFilters() {
            <<$view+filter...[$NL]>>
        }

        private void showFilters() {
            <<$view+showFilterCall...[$NL]>>
        }

        private void showFilters(BlockConditional filtersBlock) {
            if (showFiltersListener != null) showFiltersListener.accept(true);
            if (!filtersView.isVisible()) return;
            <<$view+hideFilterCall...[$NL]>>
            filtersBlock.show();
            filtersBlock.refresh();
        }

        private void refreshToolbar() {
            boolean embedded = toggleFiltersListener == null;
            boolean isPrototypeView = isPrototypeView();
            List<String> addOptions = addOptions();
            List<String> addPrototypeOptions = addPrototypeOptions();
            <<$toolbar+editableRefreshCall>>
            <<$toolbar+navigableRefreshCall>>
            edit.title(readonly ? "Editar" : "Finalizar edición");
            edit.highlight(readonly ? io.intino.alexandria.ui.displays.components.Actionable.Highlight.Outline : io.intino.alexandria.ui.displays.components.Actionable.Highlight.Fill);
            edit.visible(!embedded && node.isEditable() && !node.getDefinition().isReadonly() && !node.isLocked());
        }

        private boolean isPrototypeView() {
            <<$view+isPrototypeView...[$NL]>>
            return false;
        }

        private List<String> addOptions() {
            List<String> result = new java.util.ArrayList<>();
            <<$toolbar+editableAddCall>>
            node.getOwnedPrototypes().forEach(n -> result.add("Añadir " + n.getLabel()));
            return result;
        }

        private List<String> addPrototypeOptions() {
            List<String> result = new java.util.ArrayList<>();
            <<$toolbar+editableAddPrototypeCall>>
            return result;
        }

        private void refreshCount(RefreshCountEvent event) {
            refreshCount(event.count());
        }

        private void refreshCount(long count) {
            if (itemsCountListener != null) itemsCountListener.accept(count);
        }

        private void refreshView() {
            <<$view+refreshCall...[$NL]>>
        }

        private void toggleEdition() {
            readonly = !readonly;
            if (!readonly) hideChildViews();
            clearSelection();
            <<$toolbar+editableCall>>
            <<$view+readonlyCall...[$NL]>>
            refreshToolbar();
        }

        private void removeSelection(Event event) {
            if (selection == null) return;
            NodeLayer nodeLayer = io.intino.goros.unit.util.LayerHelper.nodeLayer();
            String linkedNodes = selection.stream().filter(Node::isLinked).map(Node::getLabel).collect(Collectors.joining(", "));
            if (linkedNodes.length() > 0) {
                notifyUser("Los siguientes elementos no se han borrado por estar en uso: " + linkedNodes, UserMessage.Type.Warning);
                return;
            }
            selection.stream().filter(n -> !n.isLinked()).forEach(nodeLayer::deleteNode);
            selection.forEach(nodeLayer::deleteNode);
            refresh();
        }

        private void toggleFilterByTitle(String condition) {
            if (condition == null || condition.isEmpty()) filterByTitle.hide();
            else filterByTitle.show();
        }

        private void filterByTitle() {
            if (currentCollection() == null) return;
            if (filterByTitle.selection().size() > 0) currentCollection().filter("titleTag", Collections.singletonList("true"));
            else currentCollection().removeFilter("titleTag");
        }

        public void resetFilters() {
            <<$view+resetFiltersCall...[$NL]>>
        }

        private void refreshFilters() {
            if (!filtersView.isVisible()) return;
            <<$view+refreshFiltersCall...[$NL]>>
        }

        private void bindCurrentViewTo(io.intino.alexandria.ui.displays.components.Collection collection) {
            <<$toolbar+bindCall>>
        }

        private void toggleFiltersViewVisibility(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            showViewsBlock();
            hideChildViews();
            if (state == io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On) filtersView.show();
            else filtersView.hide();
        }

        private void refreshViewMode() {
            if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) {
                if (selectedChild != null) hideViewsBlock();
                else {
                    showViewsBlock();
                    close();
                }
            }
            else showViewsBlock();
        }

        private void updateSelectedNodeViewVisibility(boolean visible) {
            if (visible) {
                if (filtersView.isVisible()) {
                    toggleFiltersViewVisibility(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);
                    if (toggleFiltersListener != null) toggleFiltersListener.accept(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);
                }
                showSelectedNodeView();
            }
            else hideChildViews();
        }

        private void refresh(Node node) {
            <<$view+refreshNodeCall...[$NL]>>
        }

        private void addAndSelect(Node node) {
            <<$view+selectNodeCall...[$NL]>>
        }

        private void open(List<Node> selection) {
            if (!readonly) return;
            open(selection.size() > 0 ? selection.get(0) : null);
        }

        private $name+firstUpperCase~EmbeddedTemplate open(Node node) {
            if (selectedChild == node) return this;
            refreshIfEditing();
            BlockConditional selectedView = selectedNodeView();
            selectedChild = selectedView != null && selectedView.isVisible() && node == null ? null : node;
            updateSelectedNodeViewVisibility(selectedChild != null);
            return this;
        }

        private void refreshIfEditing() {
            if (selectedChild == null) return;
            <<$toolbar+ifEditingCall...[$NL]>>
        }

        private $name+firstUpperCase~EmbeddedTemplate close() {
            selectedChild = null;
            enableCollapse(false);
            updateSelectedNodeViewVisibility(false);
            return this;
        }

        private void showSelectedNodeView() {
            if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) hideViewsBlock();
            if (selectedChild == null) return;
            BlockConditional selectedView = selectedNodeView();
            if (selectedView == null) return;
            if (!selectedView.isVisible()) hideChildViews();
            selectedView.show();
            enableCollapse(true);
        }

        private BlockConditional selectedNodeView() {
            if (selectedChild == null) return null;
            <<$toolbar+equals...[$NL]>>
            return null;
        }

        private void hideChildViews() {
            <<$toolbar+hideCall...[$NL]>>
            enableCollapse(false);
        }

        private void refreshCollapse() {
            viewsToolbar.visible(selectedChild != null);
            views.visible(true);
            <<$toolbar+hideCollectionCall>>
        }

        private void enableCollapse(boolean value) {
            boolean visible = value && views.isVisible();
            viewsToolbar.visible(visible);
            <<$toolbar+enableCollapseCall>>
        }

        private void showViewsBlock() {
            views.visible(true);
            enableCollapse(selectedChild != null);
            <<$toolbar+hideCollectionCall>>
        }

        private void dispatch(org.monet.space.kernel.model.ClientOperation operation) {
            if (operation == null) {
                refreshView();
                return;
            }
            String name = operation.getName().toLowerCase();
            String view = name.equals("shownodeview") ? operation.getData().get("IdView").toString() : null;
            String mode = operation.getData().get("Mode") != null ? operation.getData().get("Mode").toString() : null;
            boolean readonly = mode == null || !mode.contains("edit.html");
            String id = operation.getData().get("Id").toString();
            Node<?> target = (name.equals("shownode") || name.equals("shownodeview")) ? LayerHelper.nodeLayer().loadNode(id) : null;
            if (target != null && target.getParent() == node) {
                refreshView();
                open(target);
            }
            else {
                layerOperation = operation;
                openLayerTrigger.address(path -> NodeHelper.operationPath(operation));
                openLayerTrigger.openLayer();
            }
            openChildView(view, readonly);
        }

        private void fillLayer(io.intino.alexandria.ui.displays.components.Layer<?, ?> layer) {
            org.monet.space.kernel.model.Entity<?> entity = NodeHelper.operationEntity(layerOperation);
            if (entity != null) layer.title(entity.getLabel());
            AppTemplate template = new AppTemplate(box());
            layer.template(template);
            template.embedded(true);
        }

        private void openChildView(String id) {
            openChildView(id, false);
        }

        private void openChildView(String id, boolean readonly) {
            <<$toolbar+openChildViewCall...[$NL]>>
        }

        private void hideViewsBlock() {
            views.visible(false);
            enableCollapse(selectedChild != null);
            <<$toolbar+showCollectionCall>>
        }

        private void hideViews() {
            <<$view+hideViewCall...[$NL]>>
        }

        private void resetView() {
            selectedChild = null;
            <<$toolbar+hideCall...[$NL]>>
            refreshCollapse();
        }

        private Node reloadSelected() {
            if (selectedChild == null) return null;
            return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(selectedChild.getId());
        }

        <<$toolbar+editableMethods>>

    }

rule type(setdefinition)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.components.BlockConditional;
    import io.intino.alexandria.ui.displays.components.Collection;
    import io.intino.alexandria.ui.displays.events.Event;
    import io.intino.alexandria.ui.displays.events.SelectionEvent;
    import io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;
    import io.intino.alexandria.ui.displays.events.collection.RefreshCountEvent;
    import io.intino.alexandria.ui.displays.UserMessage;
    import org.monet.space.kernel.components.layers.NodeLayer;
    import org.monet.space.kernel.model.Node;
    import io.intino.goros.unit.util.*;

    import java.util.Collections;
    import java.util.stream.Collectors;
    import java.util.List;

    public class $name+firstUpperCase~Template extends Abstract$name+firstUpperCase~Template<$boxName+firstUpperCase~Box> {
        private Node node;
        private boolean readonly = true;
        private String sorting;
        private String sortingMode;
        <<$toolbar+editableDeclaration>>

        public $name+firstUpperCase~Template($boxName+firstUpperCase~Box box) {
            super(box);
        }

        <<$toolbar+editableEvents>>
        <<$toolbar+navigableMethods>>

        public void open(String code, boolean readonly) {
            node(LayerHelper.nodeLayer().locateNode(code));
            readonly(readonly);
            refresh();
        }

        public void open(String id, String view, boolean readonly) {
            node(LayerHelper.nodeLayer().loadNode(id));
            readonly(readonly);
            refresh();
            if (view != null) viewSelector.select(view);
        }

        public $name+firstUpperCase~Template node(Node node) {
            this.node = node;
            return this;
        }

        public $name+firstUpperCase~Template readonly(boolean value) {
            this.readonly = value;
            return this;
        }

        @Override
        public void init() {
            super.init();
            <<$desktop>>
            <<$parent>>
            initToolbar();
            initSortings();
            initContent();
            viewSelector.onSelect(this::openView);
            DownloadDialog.onOpen(e -> refreshDownloadDialog());
            resetFilters.onExecute(e -> content.resetFilters());
        }

        @Override
        public void refresh() {
            super.refresh();
            refreshHeader();
            refreshContent();
            viewSelector.visible(viewSelector.options().size() > 1);
            if (viewSelector.selection().size() <= 0) io.intino.goros.unit.util.DisplayHelper.selectDefaultView(viewSelector, node);
            else viewSelector.select(viewSelector.selection().get(0));
        }

        private void initToolbar() {
            filters.onToggle(e -> toggleFilters(e.state()));
            toggleView.state(ToggleEvent.State.Off);
            toggleView.onToggle(e -> toggleView(e.state()));
        }

        private void initSortings() {
            sortings.onSelect(this::selectSortingMode);
            sortingsMode.add("Ascendente");
            sortingsMode.add("Descendente");
            sortingsMode.onSelect(this::selectSorting);
            removeSorting.onExecute(this::removeSorting);
        }

        private void initContent() {
            content.onItemsCountChange(this::refreshCount);
            content.onShowFilters(e -> refreshSortings());
            content.onToggleFilters(this::refreshToggleFiltersButton);
            content.onToggleView(this::refreshToggleViewButton);
            content.onFinishEdition(e -> finishEdition());
            content.bindTo(search, filterByTitle);
        }

        private void openView(SelectionEvent event) {
            List<String> selection = event.selection();
            if (selection.size() <= 0) return;
            content.view(selection.get(0));
        }

        private void refreshCount(long countValue) {
            refreshAppliedFilters();
            String label = DictionaryHelper.referenceLabel(node);
            count.value(Formatters.countMessage(countValue, label, label + " " + translate("available")));
        }

        private void refreshAppliedFilters() {
            Collection<?, ?> collection = currentCollection();
            List<io.intino.alexandria.ui.model.datasource.Filter> filters = collection.filters();
            filtersAppliedBlock.visible(!filters.isEmpty());
            if (filters.isEmpty()) return;
            String message = NodeHelper.filtersMessage(node, filters);
            filtersMessage.value(message);
        }

        private void refreshHeader() {
            description.value(io.intino.goros.unit.util.DisplayHelper.description(node, this::translate));
        }

        private void refreshContent() {
            content.node(node);
            content.readonly(node.isLocked() || readonly);
            content.refresh();
        }

        private void refreshDownloadDialog() {
            DownloadDialog.dialog.onTerminate(e -> DownloadDialog.close());
            DownloadDialog.dialog.node(node);
            DownloadDialog.dialog.view(selectedViewCode());
            DownloadDialog.dialog.condition(java.util.Objects.requireNonNull(currentCollection()).condition());
            DownloadDialog.dialog.filters(java.util.Objects.requireNonNull(currentCollection()).filters());
            DownloadDialog.dialog.sorting(selectedSortingCode(), sortingsMode.selection().size() > 0 ? sortingsMode.selection().get(0) : "Ascendente");
            DownloadDialog.dialog.columns(io.intino.goros.unit.util.NodeHelper.downloadColumns(node, selectedViewCode()));
            DownloadDialog.dialog.refresh();
        }

        private void refreshToggleFiltersButton(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            filters.state(state);
        }

        private void refreshToggleViewButton(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            toggleView.state(state);
        }

        private void finishEdition() {
            <<$toolbar+editableCall>>
        }

        private void toggleFilters(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            content.toggleFilters(state);
        }

        private void toggleView(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            content.toggleView(state);
        }

        private String selectedViewCode() {
            <<$view+selectViewCodeCall...[$NL]>>
            return null;
        }

        private static final java.util.Map<String, List<String>> sortingsMap = new java.util.HashMap<>() {{
            <<$view+registerSorting...[$NL]>>
        }};
        private static final java.util.Map<String, String> sortingsCodesMap = new java.util.HashMap<>() {{
            <<$view+registerSortingCode...[$NL]>>
        }};
        private void refreshSortings() {
            <<$view+refreshSortingCall...[$NL]>>
        }

        private Collection currentCollection() {
            return content.currentCollection();
        }

        private void refreshSortings(List<String> sortingList) {
            sortingsBlock.visible(sortingList.size() > 0);
            sortings.clear();
            sortingList.forEach(s -> sortings.add(s));
            sortingsMode.select(defaultSortingMode());
            sortings.select(defaultSorting());
        }

        private void selectSortingMode(SelectionEvent e) {
            this.sorting = e.selection().size() > 0 ? (String) e.selection().get(0) : null;
            this.sortingsMode.visible(sorting != null);
            if (sortingsMode.selection().size() <= 0) sortingsMode.select("Ascendente");
            else selectSorting(sorting, sorting != null ? sortingsMode.selection().get(0) : null);
        }

        private void selectSorting(SelectionEvent e) {
            sortingMode = (String) e.selection().get(0);
            selectSorting(sorting, sortingMode);
        }

        private String defaultSorting() {
            if (sorting != null) return sorting;
            <<$view+defaultSortingCall...[$NL]>>
            return "Título";
        }

        private String defaultSortingMode() {
            if (sortingMode != null) return sortingMode;
            <<$view+defaultSortingModeCall...[$NL]>>
            return "Ascendente";
        }

        private void selectSorting(String sorting, String mode) {
            removeSorting.visible(sorting != null);
            <<$view+selectSortingCall...[$NL]>>
        }

        private String selectedSortingCode() {
            <<$view+selectedSortingCodeCall...[$NL]>>
            return "label";
        }

        private void removeSorting(Event event) {
            sortings.select();
        }

    }

rule type(collectionview, sharedprototypes) and trigger(initCall)

rule type(collectionview) and trigger(initCall)
    $name+firstLowerCase~View.onInit(e -> {
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~.onRefreshItemCount(this::refreshCount);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~.onSelect(this::updateSelection);
    });
    $name+firstLowerCase~View.onShow(e -> {
        bindCurrentViewTo($name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~);
        bindToolbars($name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.node(node);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.view("$code");
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.readonly(node.isLocked() || readonly);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh();
        showFilters(filtersView.$name+firstLowerCase~Filters);
        refreshCount($name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~.itemCount());
        resetView();
    });

rule type(collectionview, sharedprototypes) and trigger(clearSelectionCall)

rule type(collectionview) and trigger(clearSelectionCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~.selection(Collections.emptyList());

rule type(collectionview, sharedprototypes) and trigger(filter)

rule type(collectionview) and trigger(filter)
    filtersView.$name+firstLowerCase~Filters.onShow(e -> {
        filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.node(node);
        filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.readonly(node.isLocked() || readonly);
        filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.bindTo($name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~);
        filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.refresh();
    });

rule type(collectionview, sharedprototypes) and trigger(showFilterCall)

rule type(collectionview) and trigger(showFilterCall)
    if ($name+firstLowerCase~View.isVisible()) showFilters(filtersView.$name+firstLowerCase~Filters);

rule type(collectionview, sharedprototypes) and trigger(hideFilterCall)

rule type(collectionview) and trigger(hideFilterCall)
    filtersView.$name+firstLowerCase~Filters.hide();

rule type(collectionview, sharedprototypes) and trigger(refreshCall)

rule type(collectionview) and trigger(refreshCall)
    if ($name+firstLowerCase~View.isVisible()) {
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.readonly(readonly);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh();
    }

rule type(collectionview, ownedprototypes) and trigger(isPrototypeView)
    if ($name+firstLowerCase~View.isVisible()) return true;

rule type(collectionview, sharedprototypes) and trigger(isPrototypeView)

rule type(collectionview) and trigger(isPrototypeView)
    if ($name+firstLowerCase~View.isVisible()) return false;

rule type(collectionview, sharedprototypes) and trigger(refreshFiltersCall)

rule type(collectionview) and trigger(refreshFiltersCall)
    if (filtersView.$name+firstLowerCase~Filters.isVisible()) filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.refresh();

rule type(collectionview, sharedprototypes) and trigger(resetFiltersCall)

rule type(collectionview) and trigger(resetFiltersCall)
    if (filtersView.$name+firstLowerCase~Filters.isVisible()) filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.resetFilters();

rule type(collectionview, sharedprototypes) and trigger(refreshNodeCall)

rule type(collectionview) and trigger(refreshNodeCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh(node);

rule type(collectionview, sharedprototypes) and trigger(selectNodeCall)

rule type(collectionview) and trigger(selectNodeCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.addAndSelect(node);

rule type(collectionview, sharedprototypes) and trigger(selectViewCodeCall)

rule type(collectionview) and trigger(selectViewCodeCall)
    if (content.$name+firstLowerCase~View.isVisible()) return content.$name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.view();

rule type(collectionview, sharedprototypes) and trigger(readonlyCall)

rule type(collectionview) and trigger(readonlyCall)
    if ($name+firstLowerCase~View.isVisible()) {
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.readonly(readonly).refresh();
        $name+firstLowerCase~View.show();
    }

rule type(collectionview, sharedprototypes) and trigger(collection)

rule type(collectionview) and trigger(collection)
    if ($name+firstLowerCase~View.isVisible()) return $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase;

rule type(collectionview, sharedprototypes) and trigger(registerSorting)

rule type(collectionview) and trigger(registerSorting)
    put("$name+firstLowerCase", List.of("Título","Fecha de creación"<<,$sorting...[,]>>));

rule type(collectionview, sharedprototypes) and trigger(registerSortingCode)

rule type(collectionview) and trigger(registerSortingCode)
    put("$name+firstLowerCase~_Título", "label");
    put("$name+firstLowerCase~_Fecha de creación", "create_date");
    <<$sorting+codeRegistration...[$NL]>>

rule type(collectionview, sharedprototypes) and trigger(refreshSortingCall)

rule type(collectionview) and trigger(refreshSortingCall)
    if (content.$name+firstLowerCase~View.isVisible()) refreshSortings(sortingsMap.get("$name+firstLowerCase"));

rule type(collectionview, sharedprototypes) and trigger(selectSortingCall)

rule type(collectionview) and trigger(selectSortingCall)
    if (content.$name+firstLowerCase~View.isVisible()) content.$name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.selectSorting(selectedSortingCode(), mode);

rule type(collectionview, sharedprototypes) and trigger(defaultSortingCall)

rule type(collectionview) and trigger(defaultSortingCall)
    if (content.$name+firstLowerCase~View.isVisible()) return "$defaultSorting";

rule type(collectionview, sharedprototypes) and trigger(defaultSortingModeCall)

rule type(collectionview) and trigger(defaultSortingModeCall)
    if (content.$name+firstLowerCase~View.isVisible()) return "$defaultSortingMode";

rule type(collectionview, sharedprototypes) and trigger(selectedSortingCodeCall)

rule type(collectionview) and trigger(selectedSortingCodeCall)
    if (content.$name+firstLowerCase~View.isVisible()) return sortingsCodesMap.get("$name+firstLowerCase~_"+sorting);

rule type(collectionview, sharedprototypes) and trigger(showViewCall)

rule type(collectionview) and trigger(showViewCall)
    if (view.equals("$name+firstLowerCase") || view.equals("$code")) $name+firstLowerCase~View.show();


rule type(collectionview, sharedprototypes) and trigger(hideViewCall)

rule type(collectionview) and trigger(hideViewCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.hide();

rule type(add) and trigger(initCall)
    $name+firstLowerCase~View.onShow(e -> {
        bindCurrentViewTo(currentCollection());
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.node(reloadSelected());
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.readonly(!nodeAdded && readonly);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.onRemove(e1 -> {
            refresh();
            close();
        });
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.onFinishEdition(this::refresh);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.onShowCollection(node -> {
            if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) {
                close();
                clearSelection();
            }
            showViewsBlock();
        });
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.onDispatchOperation(this::dispatch);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.showLabel(true);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.viewMode(viewMode);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.refresh();
        if ($name+firstLowerCase~View.$name+firstLowerCase~Stamp.selectedView() == null) $name+firstLowerCase~View.$name+firstLowerCase~Stamp.selectDefaultView();
        nodeAdded = false;
    });

rule type(add) and trigger(bindCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~Stamp.bindTo(collection);

rule type(add) and trigger(showCollectionCall)
    if ($name+firstLowerCase~View.isVisible()) {
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.viewMode(ViewMode.Full);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.showCollectionVisibility();
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.refresh();
    }

rule type(add) and trigger(enableCollapseCall)
    if ($name+firstLowerCase~View.isVisible()) {
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.viewMode(!visible ? viewMode : null);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.showCollectionVisibility();
    }

rule type(add) and trigger(hideCollectionCall)
    if ($name+firstLowerCase~View.isVisible()) {
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.viewMode(null);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.showCollectionVisibility();
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.refresh();
    }

rule type(add) and trigger(ifEditingCall)
    if (selectedChild.getCode().equals("$code") && $name+firstLowerCase~View.$name+firstLowerCase~Stamp.editing()) refresh(io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(selectedChild.getId()));

rule type(add) and trigger(equals)
    if (selectedChild.getCode().equals("$code")) return $name+firstLowerCase~View;

rule type(add) and trigger(hideCall)
    $name+firstLowerCase~View.hide();

rule type(add) and trigger(openChildViewCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~Stamp.openView(id, readonly);

rule type(toolbar) and trigger(editableAddCall)
    $addList+addCall

rule type(toolbar) and trigger(editableAddPrototypeCall)
    $addList+addPrototypeCall

rule type(toolbar) and trigger(editableInitCall)
    <<$operationsGroup+editableInitCall>>
    <<$operation+editableInitCall...[$NL]>>
    removeSelection.onExecute(this::removeSelection);
    <<$addList+execute>>

rule type(toolbar) and trigger(editableRefreshCall)
    <<$operationsGroup+editableRefreshCall>>
    <<$operation+editableRefreshCall...[$NL]>>
    removeSelection.visible(!readonly && !node.getDefinition().isReadonly());
    <<$addList+refresh>>

rule type(toolbar, singleton) and trigger(editableEvents)
    public void onFinishEdition(java.util.function.Consumer<Node> listener) {
        this.finishEditionListener = listener;
    }

rule type(toolbar) and trigger(editableEvents)
    public void onRemove(java.util.function.Consumer<Node> listener) {
        this.removeListener = listener;
    }

    public void onFinishEdition(java.util.function.Consumer<Node> listener) {
        this.finishEditionListener = listener;
    }

rule type(toolbar, singleton) and trigger(selectedViewCode)
    private void addNode(String option) {
        Node result = null;
        <<$add+toolbarTemplate...[$NL]>>
        if (result == null) result = copyNode(option);
        if (result == null) return;
        nodeAdded = true;
        open(result);
        if (result.getDefinition().getDefaultView() != null) openChildView(result.getDefinition().getDefaultView().getCode());
        addAndSelect(result);
    }
    private Node copyNode(String option) {
        Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> ("Añadir " + n.getLabel()).equals(option)).findFirst().orElse(null);
        return NodeHelper.copyNode(prototype, language());
    }
    private void addPrototype(String option) {
        Node result = null;
        <<$addPrototype+toolbarTemplate...[$NL]>>
        if (result == null) return;
        nodeAdded = true;
        open(result);
        addAndSelect(result);
    }
    private void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {
        toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);
        if (searchBox != null) searchBox.bindTo(collection);
    }

rule type(toolbar, singleton) and trigger(editableMethods)
    <<$operationsGroup+editableMethods>>
    private void addNode(String option) {
        Node result = null;
        <<$add+toolbarTemplate...[$NL]>>
        if (result == null) result = copyNode(option);
        if (result == null) return;
        nodeAdded = true;
        open(result);
        if (result.getDefinition().getDefaultView() != null) openChildView(result.getDefinition().getDefaultView().getCode());
        addAndSelect(result);
    }
    private Node copyNode(String option) {
        Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> ("Añadir " + n.getLabel()).equals(option)).findFirst().orElse(null);
        return NodeHelper.copyNode(prototype, language());
    }
    private void addPrototype(String option) {
        Node result = null;
        <<$addPrototype+toolbarTemplate...[$NL]>>
        if (result == null) return;
        nodeAdded = true;
        open(result);
        addAndSelect(result);
    }
    private void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {
        toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);
        if (searchBox != null) searchBox.bindTo(collection);
    }

rule type(toolbar) and trigger(editableMethods)
    <<$operationsGroup+editableMethods>>
    private void addNode(String option) {
        Node result = null;
        <<$add+toolbarTemplate...[$NL]>>
        if (result == null) result = copyNode(option);
        if (result == null) return;
        nodeAdded = true;
        open(result);
        if (result.getDefinition().getDefaultView() != null) openChildView(result.getDefinition().getDefaultView().getCode());
        addAndSelect(result);
    }
    private Node copyNode(String option) {
        Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> ("Añadir " + n.getLabel()).equals(option)).findFirst().orElse(null);
        return NodeHelper.copyNode(prototype, language());
    }
    private void addPrototype(String option) {
        Node result = null;
        <<$addPrototype+toolbarTemplate...[$NL]>>
        if (result == null) return;
        nodeAdded = true;
        open(result);
        addAndSelect(result);
    }
    private void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {
        toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);
        if (searchBox != null) searchBox.bindTo(collection);
    }
    private void removeNode() {
        String message = io.intino.goros.unit.util.NodeHelper.canRemove(node);
        if (message != null) {
            notifyUser(message, io.intino.alexandria.ui.displays.UserMessage.Type.Error);
            return;
        }
        io.intino.goros.unit.util.LayerHelper.nodeLayer().deleteNode(node);
        if (removeListener != null) removeListener.accept(node);
    }

rule type(toolbar) and trigger(initViews)
    <<$add+initCall...[$NL]>>

rule type(toolbar) and trigger(bindCall)
    <<$add+bindCall...[$NL]>>

rule type(toolbar) and trigger(enableCollapseCall)
    <<$add+enableCollapseCall...[$NL]>>

rule type(toolbar) and trigger(showCollectionCall)
    <<$add+showCollectionCall...[$NL]>>

rule type(toolbar) and trigger(hideCollectionCall)
    <<$add+hideCollectionCall...[$NL]>>

rule type(toolbar) and trigger(equals)
    <<$add+equals...[$NL]>>

rule type(toolbar) and trigger(ifEditingCall)
    <<$add+ifEditingCall...[$NL]>>

rule type(toolbar) and trigger(hideCall)
    <<$add+hideCall...[$NL]>>

rule type(toolbar) and trigger(openChildViewCall)
    <<$add+openChildViewCall...[$NL]>>

rule type(operation) and trigger(executeMethodCall)
    if (option.equals("$label")) io.intino.goros.unit.util.NodeHelper.executeOperation(session(), operaciones, node, "$name", translate("Operation executed"), this::dispatch);