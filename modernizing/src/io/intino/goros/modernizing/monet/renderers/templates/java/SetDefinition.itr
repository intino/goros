def type(show & items) trigger(declaration)
end

def type(show & sharedprototypes)
end

def type(show & report)
end

def type(show) trigger(declaration)
end

def type(show)
    public void select(Node node) {
        io.intino.goros.unit.util.DisplayHelper.executeDelayed(b -> $definition+firstLowerCase~$view+firstUpperCase.select($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> ((Node)n).getId().equals(node.getId()))), 800);
    }

    public void selectSorting(String sorting, String mode) {
        $definition+firstLowerCase~$view+firstUpperCase.sortings(sorting != null ? java.util.Collections.singletonList(io.intino.goros.unit.util.NodeHelper.sortingOf(sorting, mode)) : java.util.Collections.emptyList());
    }

    public void refresh(Node node) {
        $definition+firstLowerCase~$view+firstUpperCase.refresh($definition+firstLowerCase~$view+firstUpperCase.findItem(n -> ((Node)n).getId().equals(node.getId())), node);
    }

    @Override
    public void init() {
        super.init();
        $definition+firstLowerCase~$view+firstUpperCase.onAddItem(e -> {
            Node node = e.item();
            org.monet.space.kernel.model.Reference reference = node.getReference("$reference");
            $componentType
            [$attribute...[$NL]]
        });
    }

    @Override
    public void refresh() {
        super.refresh();
        $definition+firstLowerCase~$view+firstUpperCase.allowMultiSelection(!readonly);
        $definition+firstLowerCase~$view+firstUpperCase.source(new io.intino.goros.unit.box.ui.datasources.$datasourceType~(box().unit(), session(), node, view));
        $definition+firstLowerCase~$view+firstUpperCase.reload();
    }
end

def type(componentType & items)
    $package.$module+lowerCase.box.ui.displays.rows.$definition+firstUpperCase~$view+firstUpperCase~Row row = e.component();
end

def type(componentType)
    $package.$module+lowerCase.box.ui.displays.items.$definition+firstUpperCase~$view+firstUpperCase~Item item = e.component();
end

def type(attribute & items & date)
    row.$shortName+firstLowerCase~Item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.instantOf($reference, "$code"));
end

def type(attribute & items & picture)
    row.$shortName+firstLowerCase~Item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.urlOf($reference, "$code", true));
end

def type(attribute & items)
    row.$shortName+firstLowerCase~Item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.valueOf($reference, "$code"));
end

def type(attribute & date)
    item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.instantOf($reference, "$code"));
end

def type(attribute & icon)
    item.$name+firstLowerCase.icon(io.intino.goros.unit.util.NodeHelper.urlOf($reference, "$code", true));
end

def type(attribute & picture)
    item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.urlOf($reference, "$code", true));
end

def type(attribute & real)
    item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.numberOf($reference, "$code"));
end

def type(attribute & integer)
    item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.numberOf($reference, "$code"));
end

def type(attribute)
    item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.valueOf($reference, "$code"));
end

def type(attribute)
    row.$shortName+firstLowerCase~Item.$name+firstLowerCase.value(io.intino.goros.unit.util.NodeHelper.valueOf($reference, "$code"));
end

def type(collectionview & filter)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.components.Collection;
    import org.monet.space.kernel.model.Node;

    public class $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate extends Abstract$definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate<$boxName+firstUpperCase~Box> {
        private Node node;
        private boolean readonly = true;
        private Collection collection;

        public $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate node(Node node) {
            this.node = node;
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~FiltersTemplate bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {
            this.collection = collection;
            updateFilters();
            return this;
        }

        @Override
        public void init() {
            super.init();
            reset.onExecute(e -> resetFilters());
        }

        private void updateFilters() {
            [$dimension+updateCall...[$NL]]
        }

        private void resetFilters() {
            [$dimension+clearCall...[$NL]]
            collection.clearFilters();
        }

        [$dimension+updateMethod...[$NL]]
    }
end

def type(dimension) trigger(updateCall)
    udpate$name+firstUpperCase();
end

def type(dimension) trigger(updateMethod)
    private void udpate$name+firstUpperCase() {
        $name+firstLowerCase.label("$label");
        $name+firstLowerCase.attribute("$code");
        $name+firstLowerCase.bindTo(collection);
        $name+firstLowerCase.refresh();
    }
end

def type(dimension) trigger(clearCall)
    $name+firstLowerCase.clearSelection();
end

def type(sorting) trigger(codeRegistration)
    put("$view+firstLowerCase~_$label", "$code");
end

def type(sorting)
    "$label"
end

def type(addList) trigger(addCall)
    [$add+addCall...[$NL]]
end

def type(add) trigger(addCall)
    result.add("Añadir $label");
end

def type(addList) trigger(execute)
    add.onExecute(e -> addNode($defaultAdd+option));
    addSplit.onExecute(e -> addNode(e.option()));
    addPrototype.onExecute(e -> addPrototype());
end

def type(addList) trigger(refresh)
    add.visible(addOptions.size() <= 1 && !isPrototypeView && readonly && !node.getDefinition().isReadonly());
    addSplit.options(addOptions);
    addSplit.visible(!isPrototypeView && addOptions.size() > 1 && readonly && !node.getDefinition().isReadonly());
    addPrototype.visible(isPrototypeView);
end

def type(addVisibility & visible)
    readonly && !node.getDefinition().isReadonly()
end

def type(addVisibility)
    false
end

def type(add) trigger(toolbarTemplate)
    if (option.equals("Añadir $label")) result = io.intino.goros.unit.util.LayerHelper.nodeLayer().addNode("$code", node);
end

def type(add) trigger(option)
    "Añadir $label"
end

def type(setdefinition & embedded)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.components.BlockConditional;
    import io.intino.alexandria.ui.displays.components.Collection;
    import io.intino.alexandria.ui.displays.components.SearchBox;
    import io.intino.alexandria.ui.displays.components.SelectorCheckBox;
    import io.intino.alexandria.ui.displays.events.Event;
    import io.intino.alexandria.ui.displays.events.SelectionEvent;
    import io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;
    import io.intino.alexandria.ui.displays.events.collection.RefreshCountEvent;
    import io.intino.alexandria.ui.displays.UserMessage;
    import org.monet.space.kernel.components.layers.NodeLayer;
    import org.monet.space.kernel.model.Node;
    import org.monet.space.kernel.model.Revision;
    import io.intino.goros.unit.util.*;

    import java.util.Collections;
    import java.util.stream.Collectors;
    import java.util.List;

    public class $name+firstUpperCase~EmbeddedTemplate extends Abstract$name+firstUpperCase~EmbeddedTemplate<$boxName+firstUpperCase~Box> {
        private Node node;
        private Revision revision;
        private boolean readonly = false;
        private Node selectedChild;
        private boolean nodeAdded = false;
        private List<Node> selection = Collections.emptyList();
        private io.intino.goros.unit.box.ui.ViewMode viewMode = io.intino.goros.unit.box.ui.ViewMode.Full;
        private java.util.function.Consumer<Long> itemsCountListener;
        private java.util.function.Consumer<Boolean> showFiltersListener;
        private java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> toggleFiltersListener;
        private java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> toggleViewListener;
        private SearchBox<?, ?> searchBox;
        private SelectorCheckBox<?, ?> filterByTitle;
        [$toolbar+editableDeclaration]

        public $name+firstUpperCase~EmbeddedTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        [$toolbar+editableEvents]
        [$toolbar+navigableMethods]

        public $name+firstUpperCase~EmbeddedTemplate node(Node node) {
            this.node = node;
            return this;
        }

        public void view(String view) {
            hideViews();
            [$view+showViewCall...[$NL]]
        }

        public $name+firstUpperCase~EmbeddedTemplate revision(org.monet.space.kernel.model.Revision revision) {
            this.revision = revision;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        public $name+firstUpperCase~EmbeddedTemplate bindTo(SearchBox<?, ?> search, SelectorCheckBox<?, ?> filterByTitle) {
            this.searchBox = search;
            this.searchBox.onSearch(e -> toggleFilterByTitle(e.condition()));
            this.filterByTitle = filterByTitle;
            this.filterByTitle.onSelect(e -> filterByTitle());
            this.filterByTitle();
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate toggleFilters(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            toggleFiltersViewVisibility(state);
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onShowFilters(java.util.function.Consumer<Boolean> listener) {
            this.showFiltersListener = listener;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onToggleFilters(java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> listener) {
            this.toggleFiltersListener = listener;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate toggleView(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            this.viewMode = state == ToggleEvent.State.On ? io.intino.goros.unit.box.ui.ViewMode.Full : io.intino.goros.unit.box.ui.ViewMode.Compact;
            refreshViewMode();
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onToggleView(java.util.function.Consumer<io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State> listener) {
            this.toggleViewListener = listener;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onItemsCountChange(java.util.function.Consumer<Long> listener) {
            this.itemsCountListener = listener;
            return this;
        }

        @Override
        public void init() {
            super.init();
            initToolbar();
            initViews();
        }

        private void initToolbar() {
            [$toolbar+editableInitCall]
            edit.onExecute(e -> toggleEdition());
        }

        @Override
        public void refresh() {
            super.refresh();
            refreshToolbar();
            refreshCollapse();
            refreshView();
            refreshFilters();
        }

        public Collection currentCollection() {
            [$view+collection...[$NL]]
            return null;
        }

        private void initViews() {
            hideViews.onExecute(e -> hideViewsBlock());
            [$view+initCall...[$NL]]
            filtersView.onInit(e -> initFilters());
            filtersView.onShow(e -> showFilters());
            [$toolbar+initViews]
        }

        private void clearSelection() {
            [$view+clearSelectionCall...[$NL]]
        }

        private void updateSelection(SelectionEvent selectionEvent) {
            this.selection = selectionEvent.selection();
            open(selectionEvent);
        }

        private void initFilters() {
            [$view+filter...[$NL]]
        }

        private void showFilters() {
            [$view+showFilterCall...[$NL]]
        }

        private void showFilters(BlockConditional filtersBlock) {
            if (showFiltersListener != null) showFiltersListener.accept(true);
            if (!filtersView.isVisible()) return;
            [$view+hideFilterCall...[$NL]]
            filtersBlock.show();
            filtersBlock.refresh();
        }

        private void refreshToolbar() {
            boolean embedded = toggleFiltersListener != null;
            boolean isPrototypeView = isPrototypeView();
            List<String> addOptions = addOptions();
            [$toolbar+editableRefreshCall]
            [$toolbar+navigableRefreshCall]
            edit.title(readonly ? "Editar" : "Finalizar edición");
            edit.visible(!embedded && !node.getDefinition().isReadonly());
        }

        private boolean isPrototypeView() {
            [$view+isPrototypeView...[$NL]]
            return false;
        }

        private List<String> addOptions() {
            List<String> result = new java.util.ArrayList<>();
            [$toolbar+editableAddCall]
            node.getOwnedPrototypes().forEach(n -> result.add("Añadir " + n.getLabel()));
            return result;
        }

        private void refreshCount(RefreshCountEvent event) {
            if (itemsCountListener != null) itemsCountListener.accept(event.count());
        }

        private void refreshView() {
            [$view+refreshCall...[$NL]]
        }

        private void toggleEdition() {
            readonly = !readonly;
            if (!readonly) hideChildViews();
            [$toolbar+editableCall]
            [$view+readonlyCall...[$NL]]
            refreshToolbar();
        }

        private void removeSelection(Event event) {
            if (selection == null) return;
            NodeLayer nodeLayer = io.intino.goros.unit.util.LayerHelper.nodeLayer();
            String linkedNodes = selection.stream().filter(Node::isLinked).map(Node::getLabel).collect(Collectors.joining(", "));
            if (linkedNodes.length() > 0) {
                notifyUser("Los siguientes elementos no se han borrado por estar en uso: " + linkedNodes, UserMessage.Type.Warning);
                return;
            }
            selection.stream().filter(n -> !n.isLinked()).forEach(nodeLayer::deleteNode);
            selection.forEach(nodeLayer::deleteNode);
            refresh();
        }

        private void toggleFilterByTitle(String condition) {
            if (condition == null || condition.isEmpty()) filterByTitle.hide();
            else filterByTitle.show();
        }

        private void filterByTitle() {
            if (currentCollection() == null) return;
            if (filterByTitle.selection().size() > 0) currentCollection().filter("titleTag", Collections.singletonList("true"));
            else currentCollection().removeFilter("titleTag");
        }

        private void refreshFilters() {
            if (!filtersView.isVisible()) return;
            [$view+refreshFiltersCall...[$NL]]
        }

        private void bindCurrentViewTo(io.intino.alexandria.ui.displays.components.Collection collection) {
            [$toolbar+bindCall]
        }

        private void toggleFiltersViewVisibility(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            showViewsBlock();
            hideChildViews();
            if (state == io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On) filtersView.show();
            else filtersView.hide();
        }

        private void refreshViewMode() {
            if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) {
                if (selectedChild != null) hideViewsBlock();
                else {
                    showViewsBlock();
                    close();
                }
            }
            else showViewsBlock();
        }

        private void updateSelectedNodeViewVisibility(boolean visible) {
            if (visible) {
                if (filtersView.isVisible()) {
                    toggleFiltersViewVisibility(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);
                    if (toggleFiltersListener != null) toggleFiltersListener.accept(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);
                }
                showSelectedNodeView();
            }
            else hideChildViews();
        }

        private void refresh(Node node) {
            [$view+refreshNodeCall...[$NL]]
        }

        private void select(Node node) {
            [$view+selectNodeCall...[$NL]]
        }

        private void open(SelectionEvent event) {
            if (!readonly) return;
            List<Node> selection = event.selection();
            open(selection.size() > 0 ? selection.get(0) : null);
        }

        private $name+firstUpperCase~EmbeddedTemplate open(Node node) {
            refreshIfEditing();
            BlockConditional selectedView = selectedNodeView();
            selectedChild = selectedView != null && selectedView.isVisible() && node == null ? null : node;
            updateSelectedNodeViewVisibility(selectedChild != null);
            return this;
        }

        private void refreshIfEditing() {
            if (selectedChild == null) return;
            [$toolbar+ifEditingCall...[$NL]]
        }

        private $name+firstUpperCase~EmbeddedTemplate close() {
            selectedChild = null;
            enableCollapse(false);
            updateSelectedNodeViewVisibility(false);
            return this;
        }

        private void showSelectedNodeView() {
            if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) hideViewsBlock();
            if (selectedChild == null) return;
            BlockConditional selectedView = selectedNodeView();
            if (selectedView == null) return;
            if (!selectedView.isVisible()) hideChildViews();
            selectedView.show();
            enableCollapse(true);
        }

        private BlockConditional selectedNodeView() {
            if (selectedChild == null) return null;
            [$toolbar+equals...[$NL]]
            return null;
        }

        private void hideChildViews() {
            [$toolbar+hideCall...[$NL]]
            enableCollapse(false);
        }

        private void refreshCollapse() {
            viewsToolbar.visible(selectedChild != null);
            views.visible(true);
            [$toolbar+hideCollectionCall]
        }

        private void enableCollapse(boolean value) {
            boolean visible = value && views.isVisible();
            viewsToolbar.visible(visible);
            [$toolbar+enableCollapseCall]
        }

        private void showViewsBlock() {
            views.visible(true);
            enableCollapse(selectedChild != null);
            [$toolbar+hideCollectionCall]
        }

        private void hideViewsBlock() {
            views.visible(false);
            enableCollapse(selectedChild != null);
            [$toolbar+showCollectionCall]
        }

        private void hideViews() {
            [$view+hideViewCall...[$NL]]
        }

        private void resetView() {
            selectedChild = null;
            [$toolbar+hideCall...[$NL]]
            refreshCollapse();
        }

        private Node reloadSelected() {
            if (selectedChild == null) return null;
            return io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(selectedChild.getId());
        }

        [$toolbar+editableMethods]

    }
end

def type(setdefinition)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.components.BlockConditional;
    import io.intino.alexandria.ui.displays.components.Collection;
    import io.intino.alexandria.ui.displays.events.Event;
    import io.intino.alexandria.ui.displays.events.SelectionEvent;
    import io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;
    import io.intino.alexandria.ui.displays.events.collection.RefreshCountEvent;
    import io.intino.alexandria.ui.displays.UserMessage;
    import org.monet.space.kernel.components.layers.NodeLayer;
    import org.monet.space.kernel.model.Node;
    import io.intino.goros.unit.util.*;

    import java.util.Collections;
    import java.util.stream.Collectors;
    import java.util.List;

    public class $name+firstUpperCase~Template extends Abstract$name+firstUpperCase~Template<$boxName+firstUpperCase~Box> {
        private Node node;
        private boolean readonly = true;
        private String sorting;
        [$toolbar+editableDeclaration]

        public $name+firstUpperCase~Template($boxName+firstUpperCase~Box box) {
            super(box);
        }

        [$toolbar+editableEvents]
        [$toolbar+navigableMethods]

        public void open(String code) {
            node(LayerHelper.nodeLayer().locateNode(code));
            refresh();
        }

        public void open(String id, String view) {
            node(LayerHelper.nodeLayer().loadNode(id));
            refresh();
            if (view != null) viewSelector.select(view);
        }

        public $name+firstUpperCase~Template node(Node node) {
            this.node = node;
            return this;
        }

        @Override
        public void init() {
            super.init();
            [$desktop]
            [$parent]
            initToolbar();
            initSortings();
            initContent();
            viewSelector.onSelect(this::openView);
        }

        @Override
        public void refresh() {
            super.refresh();
            refreshContent();
            viewSelector.visible(viewSelector.options().size() > 1);
            if (viewSelector.selection().size() <= 0) io.intino.goros.unit.util.DisplayHelper.selectDefaultView(viewSelector, node);
            DownloadDialog.onOpen(e -> refreshDownloadDialog());
        }

        private void initToolbar() {
            filters.onToggle(e -> toggleFilters(e.state()));
            toggleView.state(ToggleEvent.State.On);
            toggleView.onToggle(e -> toggleView(e.state()));
        }

        private void initSortings() {
            sortings.onSelect(this::selectSortingMode);
            sortingsMode.add("Ascendente");
            sortingsMode.add("Descendente");
            sortingsMode.onSelect(this::selectSorting);
            removeSorting.onExecute(this::removeSorting);
        }

        private void initContent() {
            content.onItemsCountChange(this::refreshCount);
            content.onShowFilters(e -> refreshSortings());
            content.onToggleFilters(this::refreshToggleFiltersButton);
            content.onToggleView(this::refreshToggleViewButton);
            content.onFinishEdition(e -> finishEdition());
            content.bindTo(search, filterByTitle);
        }

        private void openView(SelectionEvent event) {
            List<String> selection = event.selection();
            if (selection.size() <= 0) return;
            content.view(selection.get(0));
        }

        private void refreshCount(long countValue) {
            String label = DictionaryHelper.referenceLabel(node);
            count.value(Formatters.countMessage(countValue, label, label + " " + translate("available")));
        }

        private void refreshContent() {
            content.node(node);
            content.readonly(node.isLocked() || readonly);
            content.refresh();
        }

        private void refreshDownloadDialog() {
            DownloadDialog.dialog.onTerminate(e -> DownloadDialog.close());
            DownloadDialog.dialog.node(node);
            DownloadDialog.dialog.view(selectedViewCode());
            DownloadDialog.dialog.condition(java.util.Objects.requireNonNull(currentCollection()).condition());
            DownloadDialog.dialog.filters(java.util.Objects.requireNonNull(currentCollection()).filters());
            DownloadDialog.dialog.columns(io.intino.goros.unit.util.NodeHelper.downloadColumns(node, selectedViewCode()));
            DownloadDialog.dialog.refresh();
        }

        private void refreshToggleFiltersButton(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            filters.state(state);
        }

        private void refreshToggleViewButton(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            toggleView.state(state);
        }

        private void finishEdition() {
            [$toolbar+editableCall]
        }

        private void toggleFilters(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            content.toggleFilters(state);
        }

        private void toggleView(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State state) {
            content.toggleView(state);
        }

        private String selectedViewCode() {
            [$view+selectViewCodeCall...[$NL]]
            return null;
        }

        private static final java.util.Map<String, List<String>> sortingsMap = new java.util.HashMap<>() {{
            [$view+registerSorting...[$NL]]
        }};
        private static final java.util.Map<String, String> sortingsCodesMap = new java.util.HashMap<>() {{
            [$view+registerSortingCode...[$NL]]
        }};
        private void refreshSortings() {
            [$view+refreshSortingCall...[$NL]]
        }

        private Collection currentCollection() {
            return content.currentCollection();
        }

        private void refreshSortings(List<String> sortingList) {
            sortingsBlock.visible(sortingList.size() > 0);
            sortings.clear();
            sortingList.forEach(s -> sortings.add(s));
        }

        private void selectSortingMode(SelectionEvent e) {
            this.sorting = e.selection().size() > 0 ? (String) e.selection().get(0) : null;
            this.sortingsMode.visible(sorting != null);
            if (sortingsMode.selection().size() <= 0) sortingsMode.select("Ascendente");
            else selectSorting(sorting, sorting != null ? sortingsMode.selection().get(0) : null);
        }

        private void selectSorting(SelectionEvent e) {
            selectSorting(sorting, (String) e.selection().get(0));
        }

        private void selectSorting(String sorting, String mode) {
            removeSorting.visible(sorting != null);
            [$view+selectSortingCall...[$NL]]
        }

        private void removeSorting(Event event) {
            sortings.select();
        }

    }
end

def type(collectionview & sharedprototypes) trigger(initCall)
end

def type(collectionview) trigger(initCall)
    $name+firstLowerCase~View.onInit(e -> {
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~.onRefreshItemCount(this::refreshCount);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~.onSelect(this::updateSelection);
    });
    $name+firstLowerCase~View.onShow(e -> {
        bindCurrentViewTo($name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~);
        bindToolbars($name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.node(node);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.view("$code");
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.readonly(node.isLocked() || readonly);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh();
        showFilters(filtersView.$name+firstLowerCase~Filters);
        resetView();
    });
end

def type(collectionview & sharedprototypes) trigger(clearSelectionCall)
end

def type(collectionview) trigger(clearSelectionCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~.selection(Collections.emptyList());
end

def type(collectionview & sharedprototypes) trigger(filter)
end

def type(collectionview) trigger(filter)
    filtersView.$name+firstLowerCase~Filters.onShow(e -> {
        filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.node(node);
        filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.readonly(node.isLocked() || readonly);
        filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.bindTo($name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase~);
        filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.refresh();
    });
end

def type(collectionview & sharedprototypes) trigger(showFilterCall)
end

def type(collectionview) trigger(showFilterCall)
    if ($name+firstLowerCase~View.isVisible()) showFilters(filtersView.$name+firstLowerCase~Filters);
end

def type(collectionview & sharedprototypes) trigger(hideFilterCall)
end

def type(collectionview) trigger(hideFilterCall)
    filtersView.$name+firstLowerCase~Filters.hide();
end

def type(collectionview & sharedprototypes) trigger(refreshCall)
end

def type(collectionview) trigger(refreshCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh();
end

def type(collectionview & ownedprototypes) trigger(isPrototypeView)
    if ($name+firstLowerCase~View.isVisible()) return true;
end

def type(collectionview & sharedprototypes) trigger(isPrototypeView)
end

def type(collectionview) trigger(isPrototypeView)
    if ($name+firstLowerCase~View.isVisible()) return false;
end

def type(collectionview & sharedprototypes) trigger(refreshFiltersCall)
end

def type(collectionview) trigger(refreshFiltersCall)
    if (filtersView.$name+firstLowerCase~Filters.isVisible()) filtersView.$name+firstLowerCase~Filters.$name+firstLowerCase~FiltersStamp.refresh();
end

def type(collectionview & sharedprototypes) trigger(refreshNodeCall)
end

def type(collectionview) trigger(refreshNodeCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh(node);
end

def type(collectionview & sharedprototypes) trigger(selectNodeCall)
end

def type(collectionview) trigger(selectNodeCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.select(node);
end

def type(collectionview & sharedprototypes) trigger(selectViewCodeCall)
end

def type(collectionview) trigger(selectViewCodeCall)
    if (content.$name+firstLowerCase~View.isVisible()) return content.$name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.view();
end

def type(collectionview & sharedprototypes) trigger(readonlyCall)
end

def type(collectionview) trigger(readonlyCall)
    if ($name+firstLowerCase~View.isVisible()) {
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.readonly(readonly).refresh();
        $name+firstLowerCase~View.show();
    }
end

def type(collectionview & sharedprototypes) trigger(collection)
end

def type(collectionview) trigger(collection)
    if ($name+firstLowerCase~View.isVisible()) return $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.$definition+firstLowerCase~$name+firstUpperCase;
end

def type(collectionview & sharedprototypes) trigger(registerSorting)
end

def type(collectionview) trigger(registerSorting)
    put("$name+firstLowerCase", List.of("Título","Fecha de creación"[,$sorting...[,]]));
end

def type(collectionview & sharedprototypes) trigger(registerSortingCode)
end

def type(collectionview) trigger(registerSortingCode)
    put("$name+firstLowerCase~_Título", "label");
    put("$name+firstLowerCase~_Fecha de creación", "create_date");
    [$sorting+codeRegistration...[$NL]]
end

def type(collectionview & sharedprototypes) trigger(refreshSortingCall)
end

def type(collectionview) trigger(refreshSortingCall)
    if (content.$name+firstLowerCase~View.isVisible()) refreshSortings(sortingsMap.get("$name+firstLowerCase"));
end

def type(collectionview & sharedprototypes) trigger(selectSortingCall)
end

def type(collectionview) trigger(selectSortingCall)
    if (content.$name+firstLowerCase~View.isVisible()) content.$name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.selectSorting(sortingsCodesMap.get("$name+firstLowerCase~_"+sorting), mode);
end

def type(collectionview & sharedprototypes) trigger(showViewCall)
end

def type(collectionview) trigger(showViewCall)
    if (view.equals("$name+firstLowerCase") || view.equals("$code")) $name+firstLowerCase~View.show();
end


def type(collectionview & sharedprototypes) trigger(hideViewCall)
end

def type(collectionview) trigger(hideViewCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.hide();
end

def type(add) trigger(initCall)
    $name+firstLowerCase~View.onShow(e -> {
        bindCurrentViewTo(currentCollection());
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.node(reloadSelected());
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.readonly(!nodeAdded && readonly);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.onRemove(e1 -> {
            refresh();
            close();
        });
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.onFinishEdition(this::refresh);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.onShowCollection(node -> {
            if (viewMode == io.intino.goros.unit.box.ui.ViewMode.Full) {
                close();
                clearSelection();
            }
            showViewsBlock();
        });
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.showLabel(true);
        $name+firstLowerCase~View.$name+firstLowerCase~Stamp.refresh();
        if ($name+firstLowerCase~View.$name+firstLowerCase~Stamp.selectedView() == null) $name+firstLowerCase~View.$name+firstLowerCase~Stamp.selectDefaultView();
        nodeAdded = false;
    });
end

def type(add) trigger(bindCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~Stamp.bindTo(collection);
end

def type(add) trigger(showCollectionCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~Stamp.showCollectionVisibility(viewMode);
end

def type(add) trigger(enableCollapseCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~Stamp.showCollectionVisibility(!visible ? viewMode : null);
end

def type(add) trigger(hideCollectionCall)
    if ($name+firstLowerCase~View.isVisible()) $name+firstLowerCase~View.$name+firstLowerCase~Stamp.showCollectionVisibility(null);
end

def type(add) trigger(ifEditingCall)
    if (selectedChild.getCode().equals("$code") && $name+firstLowerCase~View.$name+firstLowerCase~Stamp.editing()) refresh(io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(selectedChild.getId()));
end

def type(add) trigger(equals)
    if (selectedChild.getCode().equals("$code")) return $name+firstLowerCase~View;
end

def type(add) trigger(hideCall)
    $name+firstLowerCase~View.hide();
end

def type(toolbar) trigger(editableAddCall)
    $addList+addCall
end

def type(toolbar) trigger(editableInitCall)
    [$operation+editableInitCall...[$NL]]
    removeSelection.onExecute(this::removeSelection);
    [$addList+execute]
end

def type(toolbar) trigger(editableRefreshCall)
    [$operation+editableRefreshCall...[$NL]]
    removeSelection.visible(!readonly && !node.getDefinition().isReadonly());
    [$addList+refresh]
end

def type(toolbar & singleton) trigger(editableEvents)
    public void onFinishEdition(java.util.function.Consumer<Node> listener) {
        this.finishEditionListener = listener;
    }
end

def type(toolbar) trigger(editableEvents)
    public void onRemove(java.util.function.Consumer<Node> listener) {
        this.removeListener = listener;
    }

    public void onFinishEdition(java.util.function.Consumer<Node> listener) {
        this.finishEditionListener = listener;
    }
end

def type(toolbar & singleton) trigger(selectedViewCode)
    private void addNode(String option) {
        Node result = null;
        [$add+toolbarTemplate...[$NL]]
        if (result == null) result = copyNode(option);
        if (result == null) return;
        nodeAdded = true;
        refresh();
        //select(result);
        open(result);
    }
    private Node copyNode(String option) {
        Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> n.getLabel().equals(option)).findFirst().orElse(null);
        return NodeHelper.copyNode(prototype, language());
    }
    private void addPrototype() {
        Node result = io.intino.goros.unit.util.LayerHelper.nodeLayer().addPrototype("", node);
        nodeAdded = true;
        refresh();
        open(result);
    }
    private void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {
        toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);
        if (searchBox != null) searchBox.bindTo(collection);
    }
end

def type(toolbar & singleton) trigger(editableMethods)
    private void addNode(String option) {
        Node result = null;
        [$add+toolbarTemplate...[$NL]]
        if (result == null) result = copyNode(option);
        if (result == null) return;
        nodeAdded = true;
        refresh();
        //select(result);
        open(result);
    }
    private Node copyNode(String option) {
        Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> n.getLabel().equals(option)).findFirst().orElse(null);
        return NodeHelper.copyNode(prototype, language());
    }
    private void addPrototype() {
        Node result = io.intino.goros.unit.util.LayerHelper.nodeLayer().addPrototype("", node);
        nodeAdded = true;
        refresh();
        open(result);
    }
    private void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {
        toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);
        if (searchBox != null) searchBox.bindTo(collection);
    }
end

def type(toolbar) trigger(editableMethods)
    private void addNode(String option) {
        Node result = null;
        [$add+toolbarTemplate...[$NL]]
        if (result == null) result = copyNode(option);
        if (result == null) return;
        nodeAdded = true;
        refresh();
        open(result);
    }
    private Node copyNode(String option) {
        Node prototype = this.node.getOwnedPrototypes().get().values().stream().filter(n -> n.getLabel().equals(option)).findFirst().orElse(null);
        return NodeHelper.copyNode(prototype, language());
    }
    private void addPrototype() {
        Node result = io.intino.goros.unit.util.LayerHelper.nodeLayer().addPrototype("", node);
        nodeAdded = true;
        refresh();
        open(result);
    }
    private void bindToolbars(io.intino.alexandria.ui.displays.components.Collection collection) {
        toolbar.bindTo((io.intino.alexandria.ui.displays.components.collection.Selectable)collection);
        if (searchBox != null) searchBox.bindTo(collection);
    }
    private void removeNode() {
        String message = io.intino.goros.unit.util.NodeHelper.canRemove(node);
        if (message != null) {
            notifyUser(message, io.intino.alexandria.ui.displays.UserMessage.Type.Error);
            return;
        }
        io.intino.goros.unit.util.LayerHelper.nodeLayer().deleteNode(node);
        if (removeListener != null) removeListener.accept(node);
    }
end

def type(toolbar) trigger(initViews)
    [$add+initCall...[$NL]]
end

def type(toolbar) trigger(bindCall)
    [$add+bindCall...[$NL]]
end

def type(toolbar) trigger(enableCollapseCall)
    [$add+enableCollapseCall...[$NL]]
end

def type(toolbar) trigger(showCollectionCall)
    [$add+showCollectionCall...[$NL]]
end

def type(toolbar) trigger(hideCollectionCall)
    [$add+hideCollectionCall...[$NL]]
end

def type(toolbar) trigger(equals)
    [$add+equals...[$NL]]
end

def type(toolbar) trigger(ifEditingCall)
    [$add+ifEditingCall...[$NL]]
end

def type(toolbar) trigger(hideCall)
    [$add+hideCall...[$NL]]
end
