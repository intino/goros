package io.intino.goros.builder.renderers.templates.java;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class NodeDefinitionTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("nodedefinition","embedded"))).output(literal("package ")).output(mark("package")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".box.CoordinacionBox;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.util.DisplayHelper;\n\nimport java.util.List;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate<")).output(mark("module", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private boolean readonly = false;\n    ")).output(expression().output(mark("toolbar", "editableDeclaration"))).output(literal("\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate(")).output(mark("module", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("EmbeddedTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    ")).output(expression().output(mark("toolbar", "editableEvents"))).output(literal("\n    ")).output(expression().output(mark("toolbar", "navigableMethods"))).output(literal("\n\n    public String selectedView() {\n        List<String> selection = viewSelector.selection();\n        return selection.size() > 0 ? selection.get(0) : null;\n    }\n\n    public void selectDefaultView() {\n        DisplayHelper.selectDefaultView(viewSelector, node);\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        initToolbar();\n        initViews();\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        refreshToolbar();\n        refreshView();\n    }\n\n    private void refreshToolbar() {\n        edit.title(readonly ? \"Editar\" : \"Finalizar ediciÃ³n\");\n        edit.visible(!node.getDefinition().isReadonly());\n        ")).output(expression().output(mark("toolbar", "editableRefreshCall"))).output(literal("\n        ")).output(expression().output(mark("toolbar", "navigableRefreshCall"))).output(literal("\n    }\n\n    private void refreshView() {\n        ")).output(expression().output(mark("view", "refreshCall").multiple("\n"))).output(literal("\n    }\n\n    private void initToolbar() {\n        edit.onExecute(e -> toggleEdition());\n        ")).output(expression().output(mark("toolbar", "editableInitCall"))).output(literal("\n    }\n\n    private void initViews() {\n        ")).output(expression().output(mark("view", "initCall").multiple("\n"))).output(literal("\n    }\n\n    ")).output(expression().output(mark("view", "refreshMethod").multiple("\n"))).output(literal("\n\n    private void toggleEdition() {\n        readonly(!readonly);\n        ")).output(expression().output(mark("toolbar", "editableCall"))).output(literal("\n        refresh();\n    }\n\n    ")).output(expression().output(mark("toolbar", "editableMethods"))).output(literal("\n}")),
			rule().condition((allTypes("nodedefinition","revision"))).output(literal("package ")).output(mark("package")).output(literal(".box.ui.displays.templates;\n\nimport io.intino.goros.util.DisplayHelper;\nimport io.intino.goros.util.LayerHelper;\n\nimport ")).output(mark("package")).output(literal(".box.")).output(mark("module", "firstUpperCase")).output(literal("Box;\nimport org.monet.space.kernel.model.Node;\nimport org.monet.space.kernel.model.Revision;\nimport io.intino.goros.util.NodeHelper;\n\nimport static io.intino.goros.util.DictionaryHelper.view;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("RevisionTemplate extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("RevisionTemplate<")).output(mark("module", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private Revision revision;\n    private boolean readonly = true;\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("RevisionTemplate(")).output(mark("module", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("RevisionTemplate node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("RevisionTemplate revision(Revision revision) {\n        this.revision = revision;\n        return this;\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("RevisionTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        restore.onExecute(e -> restore());\n        initViews();\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        restore.readonly(readonly);\n        DisplayHelper.selectNotSystemView(viewSelector, node);\n        refreshView();\n    }\n\n    private void initViews() {\n        ")).output(expression().output(mark("view", "initCall").multiple("\n"))).output(literal("\n    }\n\n    private void refreshView() {\n        ")).output(expression().output(mark("view", "refreshCall").multiple("\n"))).output(literal("\n    }\n\n    ")).output(expression().output(mark("view", "revisionRefreshMethod").multiple("\n"))).output(literal("\n\n    private void restore() {\n        LayerHelper.nodeLayer().restoreNode(revision);\n        notifier.redirect(session().browser().requestUrl());\n    }\n}")),
			rule().condition((allTypes("nodedefinition","singleton"))).output(literal("package ")).output(mark("package")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".box.CoordinacionBox;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.util.NodeHelper;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("Template extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("Template<")).output(mark("module", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n    private boolean readonly = true;\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("Template(")).output(mark("module", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    @Override\n    public void init() {\n        super.init();\n        node = NodeHelper.singleton(\"")).output(mark("code")).output(literal("\");\n        content.node(node);\n        content.readonly(readonly);\n        content.refresh();\n        ")).output(expression().output(mark("toolbar", "removeListener"))).output(literal("\n        if (content.selectedView() == null) content.selectDefaultView();\n    }\n}")),
			rule().condition((type("nodedefinition"))).output(literal("package ")).output(mark("package")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".box.")).output(mark("module", "firstUpperCase")).output(literal("Box;\nimport org.monet.space.kernel.components.ComponentPersistence;\nimport org.monet.space.kernel.model.Node;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("Template extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("Template<")).output(mark("module", "firstUpperCase")).output(literal("Box> {\n    private Node node;\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("Template(")).output(mark("module", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("Template node(Node node) {\n        this.node = node;\n        return this;\n    }\n\n    public void open(String id) {\n        node(ComponentPersistence.getInstance().getNodeLayer().loadNode(id));\n        refresh();\n    }\n\n    @Override\n    public void refresh() {\n        super.refresh();\n        if (node == null) return;\n        refreshHeader(node);\n        refreshContent(node);\n    }\n\n    private void refreshHeader(Node node) {\n        label.value(node.getLabel());\n    }\n\n    private void refreshContent(Node node) {\n        content.node(node);\n        content.refresh();\n        if (content.selectedView() == null) content.selectDefaultView();\n    }\n}")),
			rule().condition((allTypes("toolbar","singleton")), (trigger("editableinitcall"))),
			rule().condition((allTypes("toolbar","singleton")), (trigger("editablerefreshcall"))),
			rule().condition((allTypes("toolbar","singleton")), (trigger("editableevents"))).output(literal("public Formulario1EmbeddedTemplate onFinishEdition(Consumer<Node> listener) {\n    this.finishEditionListener = listener;\n    return this;\n}")),
			rule().condition((allTypes("toolbar","singleton")), (trigger("editablemethods"))),
			rule().condition((allTypes("toolbar","singleton")), (trigger("removelistener"))),
			rule().condition((allTypes("toolbar","singleton")), (trigger("editabledeclaration"))).output(literal("private Consumer<Node> finishEditionListener;")),
			rule().condition((type("toolbar")), (trigger("editabledeclaration"))).output(literal("private Consumer<Node> finishEditionListener;\nprivate Consumer<Node> removeListener;")),
			rule().condition((type("toolbar")), (trigger("editableinitcall"))).output(literal("remove.onExecute(e -> removeNode());")),
			rule().condition((type("toolbar")), (trigger("editablerefreshcall"))).output(literal("remove.visible(!readonly && !node.isSingleton() && !node.getDefinition().isReadonly());")),
			rule().condition((type("toolbar")), (trigger("editablecall"))).output(literal("if (readonly && finishEditionListener != null) finishEditionListener.accept(node);")),
			rule().condition((type("toolbar")), (trigger("removelistener"))).output(literal("content.onRemove(e -> PathHelper.dispatch(box().routeManager(), soul(), node.getMainNode()));")),
			rule().condition((type("toolbar")), (trigger("editableevents"))).output(literal("public Formulario1EmbeddedTemplate onRemove(Consumer<Node> listener) {\n    this.removeListener = listener;\n    return this;\n}\n\npublic Formulario1EmbeddedTemplate onFinishEdition(Consumer<Node> listener) {\n    this.finishEditionListener = listener;\n    return this;\n}")),
			rule().condition((type("toolbar")), (trigger("editablemethods"))).output(literal("private void removeNode() {\n    String message = NodeHelper.canRemove(node);\n    if (message != null) {\n        notifyUser(message, UserMessage.Type.Error);\n        return;\n    }\n    LayerHelper.nodeLayer().deleteNode(node);\n    if (removeListener != null) removeListener.accept(node);\n}")),
			rule().condition((allTypes("toolbar","collectable")), (trigger("navigablerefreshcall"))).output(literal("open.address(path -> path.replace(\":")).output(mark("definition", "lowerCase")).output(literal("\", node.getId()));")),
			rule().condition((type("toolbar")), (trigger("navigablerefreshcall"))),
			rule().condition((allTypes("toolbar","collectable")), (trigger("navigablemethods"))).output(literal("public void bindTo(Collection collection) {\n    previous.bindTo(collection);\n    previous.visible(collection != null);\n    next.bindTo(collection);\n    next.visible(collection != null);\n    open.visible(collection != null);\n}")),
			rule().condition((type("toolbar")), (trigger("navigablemethods"))),
			rule().condition((type("nodeview")), (trigger("initcall"))).output(mark("name", "lowerCase")).output(literal("View.onShow(e -> refresh")).output(mark("name", "firstUpperCase")).output(literal("View());")),
			rule().condition((type("nodeview")), (trigger("refreshcall"))).output(literal("if (")).output(mark("name", "lowerCase")).output(literal("View.isVisible()) refresh")).output(mark("name", "firstUpperCase")).output(literal("View();")),
			rule().condition((type("nodeview")), (trigger("revisionrefreshmethod"))).output(literal("private void refresh")).output(mark("name", "firstUpperCase")).output(literal("View() {\n    if (node == null) return;\n    Node revisionNode = LayerHelper.nodeLayer().loadNodeRevision(node.getId(), revision.getId());\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.node(revisionNode);\n    ")).output(expression().output(mark("contain", "revision"))).output(literal("\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.view(view(revisionNode,\"myvznaw\"));\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.readonly(readonly);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n}")),
			rule().condition((type("nodeview")), (trigger("refreshmethod"))).output(literal("private void refresh")).output(mark("name", "firstUpperCase")).output(literal("View() {\n    if (node == null) return;\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.node(node);\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.readonly(readonly);\n    ")).output(expression().output(mark("contain"))).output(literal("\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.view(view(node, \"")).output(mark("code")).output(literal("\"));\n    ")).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.refresh();\n}")),
			rule().condition((type("contain")), (trigger("revision"))).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.contain(LayerHelper.nodeLayer().loadNodeRevision(NodeHelper.getContainerContain(revisionNode, \"")).output(mark("contain")).output(literal("\"), revision.getId()));")),
			rule().condition((type("contain"))).output(mark("name", "firstLowerCase")).output(literal("View.")).output(mark("name", "firstLowerCase")).output(literal("ViewStamp.contain(LayerHelper.nodeLayer().loadNode(NodeHelper.getContainerContain(node,\"")).output(mark("contain")).output(literal("\")));")),
			rule().condition((type("nodeView"))).output(literal("package ")).output(mark("package")).output(literal(".box.ui.displays.templates;\n\nimport ")).output(mark("package")).output(literal(".box.CoordinacionBox;\nimport io.intino.alexandria.ui.displays.events.actionable.ToggleEvent;\nimport org.monet.bpi.*;\nimport org.monet.space.kernel.model.Node;\nimport io.intino.goros.box.ui.datasources.FormDatasource;\nimport io.intino.goros.util.LayerHelper;\nimport io.intino.goros.util.NodeHelper;\n\nimport java.util.function.Consumer;\n\nimport static java.util.stream.Collectors.toList;\n\npublic class ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate extends Abstract")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate<")).output(mark("module", "firstUpperCase")).output(literal("Box>")).output(expression().output(literal(" implements ")).output(mark("implements"))).output(literal(" {\n    private Node node;\n    private NodeViewProperty view;\n    private boolean readonly = false;\n    ")).output(mark("show", "declaration")).output(literal("\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate(CoordinacionBox box) {\n        super(box);\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate node(Node node) {\n        this.node = node;\n        updateFields();\n        return this;\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate view(NodeViewProperty view) {\n        this.view = view;\n        return this;\n    }\n\n    public ")).output(mark("definition", "firstUpperCase")).output(mark("name", "firstUpperCase")).output(literal("ViewTemplate readonly(boolean readonly) {\n        this.readonly = readonly;\n        return this;\n    }\n\n    ")).output(mark("show")).output(literal("\n    ")).output(expression().output(mark("displayProvider"))).output(literal("\n}")),
			rule().condition((allTypes("show","recenttask")), (trigger("declaration"))),
			rule().condition((allTypes("show","recenttask"))).output(literal("@Override\npublic void init() {\n    super.init();\n    initToolbar();\n}\n\nprivate void initToolbar() {\n\ttoolbar.onUpdate(task -> refresh());\n\ttoolbar.onChange(e -> refresh());\n\ttoolbar.onAbort(e -> refresh());\n}\n\n@Override\npublic void refresh() {\n\tsuper.refresh();\n\tTask task = NodeHelper.recentTask(node, view);\n\tnoTaskMessage.visible(task == null);\n\trefreshToolbar(task);\n\trefreshActivity1View(task);\n}\n\nprivate void refreshToolbar(Task task) {\n\ttoolbarBlock.visible(task != null);\n\ttoolbar.task(task);\n\ttoolbar.readonly(readonly);\n\ttoolbar.refresh();\n}\n\nprivate void refresh")).output(mark("taskName", "firstUpperCase")).output(literal("View(Task task) {\n\tboolean visible = task != null && task.getDefinition().getCode().equals(\"")).output(mark("taskCode")).output(literal("\");\n\t")).output(mark("taskName", "firstLowerCase")).output(literal("View.visible(visible);\n\tif (!visible) return;\n\t")).output(mark("taskName", "firstLowerCase")).output(literal("View.task(task);\n\t")).output(mark("taskName", "firstLowerCase")).output(literal("View.readonly(readonly);\n\t")).output(mark("taskName", "firstLowerCase")).output(literal("View.refresh();\n}")),
			rule().condition((allTypes("show","revisions")), (trigger("declaration"))),
			rule().condition((allTypes("show","revisions"))).output(literal("@Override\npublic void refresh() {\n\tsuper.refresh();\n\trevisionsStamp.node(node);\n\trevisionsStamp.readonly(readonly);\n\trevisionsStamp.onSelect(this::openRevision);\n\trevisionsStamp.refresh();\n}\n\nprivate void openRevision(Revision revision) {\n\tselectRevisionPage.visible(false);\n\trevisionPage.visible(true);\n\tcurrentRevisionStamp.node(node);\n\tcurrentRevisionStamp.revision(revision);\n\tcurrentRevisionStamp.readonly(readonly);\n\tcurrentRevisionStamp.refresh();\n}"))
		);
	}
}