def type(documentdefinition & embedded)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import org.monet.space.kernel.model.Node;
    import io.intino.goros.unit.util.DisplayHelper;

    import java.util.List;

    public class $name+firstUpperCase~EmbeddedTemplate extends Abstract$name+firstUpperCase~EmbeddedTemplate<$boxName+firstUpperCase~Box> {
        private Node node;
        private boolean readonly = false;
        [$toolbar+editableDeclaration]
        [$toolbar+navigableDeclaration]

        public $name+firstUpperCase~EmbeddedTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $name+firstUpperCase~EmbeddedTemplate node(Node node) {
            this.node = node;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        public $name+firstUpperCase~EmbeddedTemplate hideToolbar() {
            toolbar.visible(false);
            return this;
        }

        [$toolbar+editableEvents]
        [$toolbar+navigableEvents]
        [$toolbar+navigableMethods]

        public void openView(String view) {
            openView(view, readonly);
        }

        public void openView(String view, boolean readonly) {
        }

        public String selectedView() {
            return null;
        }

        public void selectDefaultView() {
        }

        @Override
        public void init() {
            super.init();
            initToolbar();
            initViews();
        }

        @Override
        public void refresh() {
            super.refresh();
            refreshToolbar();
            refreshView();
        }

        private void refreshToolbar() {
            edit.title(readonly ? "Editar" : "Finalizar ediciÃ³n");
            edit.highlight(readonly ? io.intino.alexandria.ui.displays.components.Actionable.Highlight.Outline : io.intino.alexandria.ui.displays.components.Actionable.Highlight.Fill);
            edit.visible(node.isEditable() && !node.getDefinition().isReadonly() && !node.isLocked());
            [$toolbar+editableRefreshCall]
            [$toolbar+navigableRefreshCall]
        }

        private void refreshView() {
            refreshPreviewView();
        }

        private void initToolbar() {
            edit.onExecute(e -> toggleEdition());
            [$toolbar+editableInitCall]
        }

        private void initViews() {
            refreshPreviewView();
        }

        private void refreshPreviewView() {
            if (node == null) return;
            previewView.previewStamp.node(node);
            previewView.previewStamp.readonly($readonly || !node.isEditable() || node.isLocked());
            previewView.previewStamp.refresh();
        }

        private void toggleEdition() {
            readonly(!readonly);
            [$toolbar+editableCall]
            refresh();
        }

        [$toolbar+editableMethods]
    }
end