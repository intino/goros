rule type(show, fields) and trigger(declaration)
    <<$field+declaration...[$NL]>>

rule type(show, layout) and trigger(declaration)
    <<$row+declaration...[$NL]>>

rule type(layoutRow) and trigger(declaration)
    <<$element+declaration...[$NL]>>

rule type(layoutElement, section) and trigger(declaration)
    <<$row+declaration...[$NL]>>

rule type(layoutElement) and trigger(declaration)
    <<$field+declaration>>

rule type(show, fields, composite) and trigger(init)
    <<$field+init...[$NL]>>

rule type(show, fields, composite) and trigger(refresh)
    <<$field+refresh...[$NL]>>

rule type(show, fields, composite) and trigger(refreshMethod)
    <<$field+refreshMethod...[$NL]>>

rule type(show, fields, composite) and trigger(update)
    <<$field+update...[$NL]>>

rule type(show, layout, composite) and trigger(init)
    <<$row+init...[$NL]>>

rule type(show, layout, composite) and trigger(refresh)
    <<$row+refresh...[$NL]>>

rule type(show, layout, composite) and trigger(refreshMethod)
    <<$row+refreshMethod...[$NL]>>

rule type(show, layout, composite) and trigger(update)
    <<$row+update...[$NL]>>

rule type(show) and trigger(hideToolbar)

rule type(show, layout)
    @Override
    public void init() {
        super.init();
        <<$row+init...[$NL]>>
    }

    @Override
    public void refresh() {
        super.refresh();
        <<$row+refresh...[$NL]>>
    }

    <<$row+refreshMethod...[$NL]>>

    private void save(java.util.function.Consumer<Boolean> consumer) {
        consumer.accept(true);
        io.intino.goros.unit.util.LayerHelper.nodeLayer().saveNode(node);
        updateFields();
    }

    private void updateFields() {
        if (node == null) return;
        FormDatasource datasource = new FormDatasource(box().unit(), session(), node);
        <<$row+update...[$NL]>>
    }

rule type(layoutRow) and trigger(init)
    <<$element+init...[$NL]>>

rule type(layoutRow) and trigger(refresh)
    <<$element+refresh...[$NL]>>

rule type(layoutRow) and trigger(refreshMethod)
    <<$element+refreshMethod...[$NL]>>

rule type(layoutRow) and trigger(update)
    <<$element+update...[$NL]>>

rule type(layoutElement, section) and trigger(init)
    <<$row+init...[$NL]>>

rule type(layoutElement) and trigger(init)
    $field+init

rule type(layoutElement, section) and trigger(refresh)
    <<$row+refresh...[$NL]>>

rule type(layoutElement) and trigger(refresh)
    $field+refresh

rule type(layoutElement, section) and trigger(refreshMethod)
    <<$row+refreshMethod...[$NL]>>

rule type(layoutElement) and trigger(refreshMethod)
    $field+refreshMethod

rule type(layoutElement, section) and trigger(update)
    <<$row+update...[$NL]>>

rule type(layoutElement) and trigger(update)
    $field+update

rule type(show, fields)
    @Override
    public void init() {
        super.init();
        <<$field+init...[$NL]>>
    }

    @Override
    public void refresh() {
        super.refresh();
        boolean isPrototype = node.isPrototype();
        <<$field+refresh...[$NL]>>
    }

    <<$field+refreshMethod...[$NL]>>

    private void save(java.util.function.Consumer<Boolean> consumer) {
        consumer.accept(true);
        io.intino.goros.unit.util.LayerHelper.nodeLayer().saveNode(node);
        updateFields();
    }

    private void updateFields() {
        if (node == null) return;
        FormDatasource datasource = new FormDatasource(box().unit(), session(), node);
        <<$field+update...[$NL]>>
    }

rule type(displayProvider)
    @Override
    public io.intino.alexandria.ui.displays.Display displayFor(Node node, String view) {
        if (node != null && node.isDocument()) {
            io.intino.goros.unit.box.ui.displays.templates.NodeDocumentTemplate display = new io.intino.goros.unit.box.ui.displays.templates.NodeDocumentTemplate(box().unit());
            display.node(node);
            display.readonly(readonly);
            return display;
        }
        <<$display...[$NL]>>
        return null;
    }

rule type(field, select, multiple) and trigger(declaration)
    private FieldMultiple<Field$type+firstUpperCase~,$valueType> $name+firstLowerCase~Field;
    private io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource $name+firstLowerCase~Source;

rule type(field, link, multiple) and trigger(declaration)
    private FieldMultiple<Field$type+firstUpperCase~,$valueType> $name+firstLowerCase~Field;
    private org.monet.space.kernel.model.Node<?> $name+firstLowerCase~Selected;

rule type(field, multiple) and trigger(declaration)
    private FieldMultiple<Field$type+firstUpperCase~,$valueType> $name+firstLowerCase~Field;

rule type(field, select) and trigger(declaration)
    private Field$type+firstUpperCase $name+firstLowerCase~Field;
    private io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource $name+firstLowerCase~Source;

rule type(field, link) and trigger(declaration)
    private Field$type+firstUpperCase $name+firstLowerCase~Field;

rule type(field) and trigger(declaration)
    private Field$type+firstUpperCase $name+firstLowerCase~Field;

rule type(field, select) and trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
    $name+firstLowerCase~Source = new io.intino.goros.unit.box.ui.datasources.FieldSelectDatasource(box().unit(), session(), node, $name+firstLowerCase~Field);

rule type(field, link) and trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");

rule type(field, composite, multiple) and trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
    java.util.List<FieldComposite> $name+firstLowerCase~Fields = $name+firstLowerCase~Field.getAllFields();
    if ($name+firstLowerCase~ != null) {
        java.util.List<$definition+firstUpperCase$name+firstUpperCase~Template> $name+firstLowerCase~Children = $name+firstLowerCase~.children($definition+firstUpperCase$name+firstUpperCase~Template.class);
        for (int i=0; i<$name+firstLowerCase~Fields.size(); i++) if ($name+firstLowerCase~Children.size() > i) $name+firstLowerCase~Children.get(i).field($name+firstLowerCase~Fields.get(i));
    }

rule type(field, composite) and trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
    if ($name+firstLowerCase != null) $name+firstLowerCase.field($name+firstLowerCase~Field);

rule type(field, link) and trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");

rule type(field) and trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");

rule type(field, text, multiple) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(e.item())));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));

rule type(field, text, multiple) and trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll());
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, text) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(e.value())));

rule type(field, text) and trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, number, multiple) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(new org.monet.bpi.types.Number((Double) e.item()))));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));

rule type(field, number, multiple) and trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().mapToDouble(n -> n != null ? n.doubleValue() : 0).boxed().collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, number) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(new org.monet.bpi.types.Number((Double) e.value()))));

rule type(field, number) and trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get() != null ? $name+firstLowerCase~Field.get().doubleValue() : null);
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, boolean) and trigger(init)
    $name+firstLowerCase~.onToggle(e -> save(b -> $name+firstLowerCase~Field.set(e.state() == io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On)));

rule type(field, boolean) and trigger(refresh)
    $name+firstLowerCase~.state($name+firstLowerCase~Field.get() ? io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.On : io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.Off);
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, date, multiple) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.dateOf(e.item()))));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));

rule type(field, date, multiple) and trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? f.getValue().toInstant() : null).collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, date) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.dateOf(e.value()))));

rule type(field, date) and trigger(refresh)
    $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.instantOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, memo, multiple) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(e.item())));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));

rule type(field, memo, multiple) and trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll());
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, memo) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(e.value())));

rule type(field, memo) and trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, serial) and trigger(init)

rule type(field, serial) and trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly(true);

rule type(field, file, multiple) and trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        if ($name+firstLowerCase~Field.getCount() <= e.index()) return;
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.fileOf(e.item())));
        ((io.intino.alexandria.ui.displays.components.FileEditable<?,?>)e.component()).value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.getAsField(e.index())));
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));

rule type(field, file, multiple) and trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(f) : null).collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, file) and trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.fileOf(e.value())));
        $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field));
    });

rule type(field, file) and trigger(refresh)
    $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, picture, multiple) and trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        if ($name+firstLowerCase~Field.getCount() <= e.index()) return;
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(io.intino.goros.unit.util.NodeHelper.pictureOf(e.item(), $width, $height)));
        ((io.intino.alexandria.ui.displays.components.ImageEditable<?,?>)e.component()).value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.getAsField(e.index())));
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));

rule type(field, picture, multiple) and trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? io.intino.goros.unit.util.NodeHelper.alexandriaFileOf(f) : null).collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, picture) and trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.pictureOf(e.value(), $width, $height)));
        $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field));
    });

rule type(field, picture) and trigger(refresh)
    $name+firstLowerCase~.value(io.intino.goros.unit.util.NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, check) and trigger(init)
    $name+firstLowerCase~.onSelect(e -> save(b -> $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.checkListOf($name+firstLowerCase~Field.get(), e.selection()))));

rule type(field, check) and trigger(refresh)
    $name+firstLowerCase~.clear();
    java.util.List<org.monet.bpi.types.Term> $name+firstLowercase~Terms = new io.intino.goros.unit.box.ui.datasources.FieldCheckDatasource(box().unit(), session(), node, $name+firstLowerCase~Field).allItems();
    $name+firstLowerCase~.addAll($name+firstLowercase~Terms.stream().map(org.monet.bpi.types.Term::getLabel).collect(java.util.stream.Collectors.toList()));
    $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.selectionOf($name+firstLowercase~Terms, $name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, link, multiple) and trigger(init)
    $name+firstLowerCase~.valueProvider(io.intino.goros.unit.util.DisplayHelper.linkValueProvider());
    $name+firstLowerCase~.onOpen(e -> {
        org.monet.bpi.types.Link link = io.intino.goros.unit.util.DisplayHelper.findLink($name+firstLowerCase~Field.getAll(), e.value());
        if (link == null) return;
        $name+firstLowerCase~Selected = io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(link.getId());
        $name+firstLowerCase~Trigger.address(path -> io.intino.goros.unit.util.PathHelper.pathOf($name+firstLowerCase~Selected));
        $name+firstLowerCase~Trigger.openLayer();
    });
    $name+firstLowerCase~.onSelect(e -> save(b -> {
        $name+firstLowerCase~Field.removeAll();
        $name+firstLowerCase~Field.addNewAll(io.intino.goros.unit.util.NodeHelper.linksOf(e.selection()));
    }));
    $name+firstLowerCase~Trigger.onOpen(e1 -> {
        e1.layer().title($name+firstLowerCase~Selected.getLabel());
        AppTemplate template = new AppTemplate(box());
        e1.layer().template(template);
        template.embedded(true);
    });

rule type(field, link, multiple) and trigger(refresh)
    $name+firstLowerCase~.source(new io.intino.goros.unit.box.ui.datasources.FieldLinkDatasource(box().unit(), session(), "$code", node, org.monet.space.kernel.model.Dictionary.getInstance().getIndexDefinition("$indexCode")));
    $name+firstLowerCase.selection(io.intino.goros.unit.util.NodeHelper.nodeItemsOf($name+firstLowerCase~Field.getAll()));
    $name+firstLowerCase.readonly(<<$univocal >>$readonly);

rule type(field, link) and trigger(init)
    $name+firstLowerCase~.valueProvider(io.intino.goros.unit.util.DisplayHelper.linkValueProvider());
    $name+firstLowerCase~.onSelect(e -> {
        save(b -> {
            <<$dependant+clear...[$NL]>>
            $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.linkOf(e.selection()));
            open$name+firstUpperCase~.readonly($name+firstLowerCase~Field.get() == null);
        });
        <<$dependant+refresh...[$NL]>>
    });
    open$name+firstUpperCase~.onOpen(e -> {
        org.monet.bpi.types.Link link = $name+firstLowerCase~Field.get();
        if (link == null) return;
        Node<?> node = io.intino.goros.unit.util.LayerHelper.nodeLayer().loadNode(link.getId());
        open$name+firstUpperCase~.address(path -> io.intino.goros.unit.util.PathHelper.pathOf(node));
		e.layer().title(node.getLabel());
		AppTemplate template = new AppTemplate(box());
		e.layer().template(template);
		template.embedded(true);
    });

rule type(field, link) and trigger(refresh)
    $name+firstLowerCase~.source(new io.intino.goros.unit.box.ui.datasources.FieldLinkDatasource(box().unit(), session(), "$code", node, org.monet.space.kernel.model.Dictionary.getInstance().getIndexDefinition("$indexCode")));
    if ($name+firstLowerCase~Field.get() != null) $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.nodeItemOf($name+firstLowerCase~Field.get()));
    else $name+firstLowerCase.selection(java.util.Collections.emptyList());
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);
    open$name+firstUpperCase~.readonly($name+firstLowerCase~Field.get() == null);

rule type(field, select, multiple) and trigger(init)
    $name+firstLowerCase~.onSelect(e -> save(b -> {
        $name+firstLowerCase~Field.removeAll();
        $name+firstLowerCase~Field.addNewAll(io.intino.goros.unit.util.NodeHelper.termsOf($name+firstLowerCase~Source, e.selection()));
    }));

rule type(field, select, multiple) and trigger(refresh)
    $name+firstLowerCase~Source.session(session());
    refresh$name+firstUpperCase~();
    $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.selectionOf($name+firstLowerCase~Source.allItems(), $name+firstLowerCase~Field.getAll()));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, select, inline) and trigger(refresh)
    $name+firstLowerCase~Source.session(session());
    refresh$name+firstUpperCase~();
    $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.selectionOf($name+firstLowerCase~Source.allItems(), $name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, select) and trigger(init)
    $name+firstLowerCase~.onSelect(e -> {
        save(b -> {
            <<$dependant+clear...[$NL]>>
            $name+firstLowerCase~Field.set(io.intino.goros.unit.util.NodeHelper.termOf($name+firstLowerCase~Source, e.selection()));
        });
        <<$dependant+refresh...[$NL]>>
    });

rule type(field, select) and trigger(refreshMethod)
    private void refresh$name+firstUpperCase~() {
        $name+firstLowerCase~.clear();
        $name+firstLowerCase~.addAll($name+firstLowerCase~Source.items().stream().map(org.monet.bpi.types.Term::getLabel).collect(java.util.stream.Collectors.toList()));
    }

rule type(field, select) and trigger(refresh)
    $name+firstLowerCase~Source.session(session());
    refresh$name+firstUpperCase~();
    $name+firstLowerCase~.selection(io.intino.goros.unit.util.NodeHelper.selectionOf($name+firstLowerCase~Source.allItems(), $name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, composite, multiple) and trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> {});
        (($definition+firstUpperCase$name+firstUpperCase~Template)e.component()).node(node).field($name+firstLowerCase~Field.getAsField(e.index())).refresh();
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));

rule type(field, composite, multiple) and trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~Field.getAllFields().forEach(field -> {
        $definition+firstUpperCase$name+firstUpperCase~Template display = $name+firstLowerCase~.add(<<$addProperties>>).node(node).field(field).readonly(this.readonly);
        display.refresh();
    });
    $name+firstLowerCase~.onAdd(e -> save(b -> {
        FieldComposite fieldComposite = $name+firstLowerCase~Field.addNew();
        $definition+firstUpperCase$name+firstUpperCase~Template display = e.component();
        display.node(node);
        display.field(fieldComposite);
        display.readonly(<<$univocal >>$readonly);
        display.refresh();
    }));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field, composite) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> {}));

rule type(field, composite) and trigger(refresh)
    $name+firstLowerCase~.node(node);
    $name+firstLowerCase~.field($name+firstLowerCase~Field);
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);
    $name+firstLowerCase~.refresh();

rule type(field, node, multiple) and trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        if ($name+firstLowerCase~Field.getCount() <= e.index()) return;
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(((FieldNode)e.item()).get()));
        ((io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate)e.component()).node(node).field($name+firstLowerCase~Field.getAsField(e.index())).refresh();
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));

rule type(field, node, multiple) and trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~Field.getAllFields().forEach(field -> {
        io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate display = $name+firstLowerCase~.add(<<$addProperties>>).node(node).field(field).readonly(this.readonly).displayProvider(this);
        display.refresh();
    });
    $name+firstLowerCase~.onAdd(e -> save(b -> {
        FieldNode fieldNode = $name+firstLowerCase~Field.addNew();
        io.intino.goros.unit.box.ui.displays.templates.FieldNodeTemplate display = e.component();
        display.node(node);
        display.field(fieldNode);
        display.displayProvider(this);
        display.readonly(<<$univocal >>$readonly);
        display.refresh();
    }));
    $name+firstLowerCase~.readonly(<<$univocal >>$readonly);

rule type(field) and trigger(refreshMethod)

rule type(dependant, multiple) and trigger(clear)
    $name+firstLowerCase~Field.removeAll();

rule type(dependant) and trigger(clear)
    $name+firstLowerCase~Field.clear();

rule type(dependant) and trigger(refresh)
    $name+firstLowerCase~.select();
    $name+firstLowerCase~.readonly($anchorName+firstLowerCase~.selection().size() <= 0);
    refresh$name+firstUpperCase~();

rule type(univocal, prototype)
    isPrototype ||

rule type(univocal)

rule type(addProperties)
    "<<$add+label...[; ]>>", <<$add...[ + "; " + ]>>

rule type(addPropertiesItem) and trigger(label)
    $label

rule type(addPropertiesItem, date)
    io.intino.goros.unit.util.NodeHelper.valueOrDefault(((Field~$type+firstUpperCase)field.getField("$code")))

rule type(addPropertiesItem, link)
    io.intino.goros.unit.util.NodeHelper.valueOrDefault(((Field~$type+firstUpperCase)field.getField("$code")))

rule type(addPropertiesItem)
    ((Field~$type+firstUpperCase)field.getField("$code")).get()

rule type(field, node) and trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> {}));

rule type(field, node) and trigger(refresh)
    $name+firstLowerCase~.node(node);
    $name+firstLowerCase~.field($name+firstLowerCase~Field);
    $name+firstLowerCase~.readonly($readonly);
    $name+firstLowerCase~.displayProvider(this);
    $name+firstLowerCase~.refresh();

rule type(compositeView)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.events.ChangeEvent;
    import io.intino.alexandria.ui.displays.events.ChangeListener;
    import org.monet.bpi.*;
    import io.intino.goros.unit.box.ui.datasources.FieldCompositeDatasource;
    import org.monet.space.kernel.model.Node;

    import java.util.function.Consumer;

    public class $definition+firstUpperCase~$name+firstUpperCase~Template extends Abstract$definition+firstUpperCase~$name+firstUpperCase~Template<$boxName+firstUpperCase~Box><< implements $implements...[,]>> {
        private Node node;
        private FieldComposite field;
        private boolean readonly = false;
        private ChangeListener changeListener;
        <<$show+declaration>>

        public $definition+firstUpperCase~$name+firstUpperCase~Template($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template readonly(boolean readonly) {
            this.readonly = readonly;
            <<$editable+readonly>>
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template onReadonly(io.intino.alexandria.ui.displays.events.ReadonlyListener listener) {
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template focus() {
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        <<$editable>>

        public $definition+firstUpperCase~$name+firstUpperCase~Template node(Node node) {
            this.node = node;
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template field(FieldComposite field) {
            this.field = field;
            updateFields();
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template onChange(ChangeListener listener) {
            this.changeListener = listener;
            return this;
        }

        @Override
        public void init() {
            super.init();
            <<$show+init>>
        }

        @Override
        public void refresh() {
            super.refresh();
            <<$show+refresh>>
        }

        <<$show+refreshMethod>>

        private void save(java.util.function.Consumer<Boolean> consumer) {
            consumer.accept(true);
            changeListener.accept(new ChangeEvent(this, field));
            updateFields();
        }

        private void updateFields() {
            if (field == null) return;
            FieldCompositeDatasource datasource = new FieldCompositeDatasource(box().unit(), session(), field);
            <<$show+update>>
        }

        <<$displayProvider>>
    }

rule type(compositeDisplayProvider)
    @Override
    public io.intino.alexandria.ui.displays.Display displayFor(Node node, String view) {
        <<$display...[$NL]>>
        return null;
    }

rule type(display)
    if (node.getDefinition().getCode().equals("$code") && (view == null || view.equals("$viewCode"))) {
        $package.$module+lowerCase.box.ui.displays.templates.$name+firstUpperCase~$viewName+firstUpperCase~ViewTemplate result = new $package.$module+lowerCase.box.ui.displays.templates.$name+firstUpperCase~$viewName+firstUpperCase~ViewTemplate(box());
        result.node(node);
        result.readonly(false);
        return result;
    }

rule type(editable) and trigger(readonly)
    if (field != null) refresh();

rule type(editable)
    @Override
    public boolean readonly() {
        return readonly;
    }

    @Override
    public void reload() {
        refresh();
    }