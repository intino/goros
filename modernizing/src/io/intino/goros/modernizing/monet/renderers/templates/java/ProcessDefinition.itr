def type(process & embedded)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.components.Collection;
    import org.monet.space.kernel.model.Task;
    import io.intino.goros.unit.box.ui.datasources.TaskListDatasource;
    import io.intino.goros.unit.box.ui.datasources.TaskListDatasource.Inbox;
    import io.intino.goros.unit.util.DisplayHelper;

    import java.util.List;
    import java.util.function.Consumer;

    public class $name+firstUpperCase~EmbeddedTemplate extends Abstract$name+firstUpperCase~EmbeddedTemplate<$boxName+firstUpperCase~Box> {
        private Task task;
        private Inbox inbox;
        private boolean readonly = true;
        private java.util.function.Consumer<Task> changeListener;
        private java.util.function.Consumer<Task> abortListener;
        private java.util.function.Consumer<Task> showCollectionListener;

        public $name+firstUpperCase~EmbeddedTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $name+firstUpperCase~EmbeddedTemplate task(Task task) {
            this.task = task;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate inbox(Inbox inbox) {
            this.inbox = inbox;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        public $name+firstUpperCase~EmbeddedTemplate onChange(java.util.function.Consumer<Task> listener) {
            this.changeListener = listener;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onAbort(java.util.function.Consumer<Task> listener) {
            this.abortListener = listener;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate onShowCollection(java.util.function.Consumer<Task> listener) {
            this.showCollectionListener = listener;
            return this;
        }

        public void openView(String view) {
        }

        public String selectedView() {
            List<String> selection = viewSelector.selection();
            return selection.size() > 0 ? selection.get(0) : null;
        }

        public void selectDefaultView() {
            io.intino.goros.unit.util.DisplayHelper.selectDefaultView(viewSelector, task);
        }

        public void bindTo(io.intino.alexandria.ui.displays.components.Collection collection) {
            previous.bindTo(collection);
            previous.visible(collection != null);
            next.bindTo(collection);
            next.visible(collection != null);
            open.visible(collection != null);
        }

        public void showLabel(boolean value) {
            label.visible(value);
        }

        public void showCollectionVisibility(io.intino.goros.unit.box.ui.ViewMode value) {
            showCollectionBack.visible(value == io.intino.goros.unit.box.ui.ViewMode.Full);
            showCollectionMenu.visible(value == io.intino.goros.unit.box.ui.ViewMode.Compact);
            content.autoSize(value == null || value == io.intino.goros.unit.box.ui.ViewMode.Full);
        }

        @Override
        public void init() {
            super.init();
            box().notifier().onTaskStateChange(this, this::notifyResume);
            initToolbar();
            initViews();
        }

        @Override
        public void remove() {
            super.remove();
            box().notifier().unTaskStateChange(this);
        }

        @Override
        public void refresh() {
            super.refresh();
            refreshToolbar();
            refreshSelector();
            refreshView();
        }

        private void initToolbar() {
            toolbar.onUpdate(task -> task(task).refresh());
            toolbar.onChange(this::notifyChange);
            toolbar.onAbort(this::notifyAbort);
            showCollectionBack.onExecute(e -> notifyShowCollection());
            showCollectionMenu.onExecute(e -> notifyShowCollection());
        }

        private void initViews() {
            stateView.onShow(e -> refreshStateView());
            [$view+initCall...[$NL]]
        }

        private void refreshToolbar() {
            open.address(this::preparePath);
            toolbar.task(task);
            toolbar.readonly(readonly);
            toolbar.refresh();
            label.value(task.getLabel());
        }

        private String preparePath(String path) {
            if (task == null) return path;
            return path.replace(":name", io.intino.goros.unit.util.TaskHelper.nameOf(task)).replace(":task", task.getId()).replace(":inbox", inboxPath());
        }

        private String inboxPath() {
            return inbox != null ? inbox.value(language()) : "tareas";
        }

        private void refreshView() {
            if (stateView.isVisible()) refreshStateView();
            [$view+refreshCall...[$NL]]
        }

        private void refreshStateView() {
            if (task == null) return;
            stateView.stateViewStamp.task(task);
            stateView.stateViewStamp.readonly(readonly);
            stateView.stateViewStamp.refresh();
        }

        [$view+refreshViewMethod...[$NL]]

        private void refreshSelector() {
            [$view+refreshSelectorCall...[$NL]]
        }

        private void notifyResume(Task task) {
            if (changeListener != null) changeListener.accept(task);
        }

        private void notifyAbort(Task task) {
            task(task).refresh();
            if (abortListener != null) abortListener.accept(task);
        }

        private void notifyChange(Task task) {
            task(task).refresh();
            if (changeListener != null) changeListener.accept(task);
        }

        private void notifyShowCollection() {
            if (showCollectionListener == null) return;
            showCollectionListener.accept(task);
        }
    }
end

def type(process & stateview)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.Display;
    import org.monet.metamodel.internal.TaskOrderDefinition;
    import org.monet.space.kernel.model.Node;
    import org.monet.space.kernel.model.Task;
    import io.intino.goros.unit.box.ui.DisplayProvider;
    import io.intino.goros.unit.box.ui.displays.templates.TaskOrderTemplate;

    public class $name+firstUpperCase~StateViewTemplate extends Abstract$name+firstUpperCase~StateViewTemplate<$boxName+firstUpperCase~Box> implements DisplayProvider {
        private Task task;
        private boolean readonly = true;

        public $name+firstUpperCase~StateViewTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $name+firstUpperCase~StateViewTemplate task(Task task) {
            this.task = task;
            return this;
        }

        public $name+firstUpperCase~StateViewTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        @Override
        public void refresh() {
            super.refresh();
            state.task(task);
            state.displayProvider(this);
            state.refresh();
        }

        @Override
        public io.intino.alexandria.ui.displays.Display displayFor(Node node, String view) {
            [$display...[$NL]]
            if (node.getDefinition().getCode().equals(TaskOrderDefinition.CODE)) {
                TaskOrderTemplate result = new TaskOrderTemplate(box().unit());
                result.node(node);
                return result;
            }
            return null;
        }

    }
end

def type(process & view & target)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.Display;
    import org.monet.metamodel.internal.TaskOrderDefinition;
    import org.monet.space.kernel.model.Node;
    import org.monet.space.kernel.model.Task;
    import io.intino.goros.unit.box.ui.DisplayProvider;
    import io.intino.goros.unit.box.ui.displays.templates.TaskOrderTemplate;

    public class $definition+firstUpperCase$name+firstUpperCase~ViewTemplate extends Abstract$definition+firstUpperCase$name+firstUpperCase~ViewTemplate<$boxName+firstUpperCase~Box> {
        private Task task;
        private boolean readonly = true;

        public $definition+firstUpperCase$name+firstUpperCase~ViewTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $definition+firstUpperCase$name+firstUpperCase~ViewTemplate task(Task task) {
            this.task = task;
            return this;
        }

        public $definition+firstUpperCase$name+firstUpperCase~ViewTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        @Override
        public void init() {
            super.init();
            [$show+initCall...[$NL]]
        }

        @Override
        public void refresh() {
            super.refresh();
            if (task == null) return;
            refreshView();
        }

        private void refreshView() {
            org.monet.space.kernel.model.Node node = task.getTarget();
            [$show+hideCall...[$NL]]
            if (node == null) return;
            org.monet.metamodel.NodeDefinition definition = node.getDefinition();
            [$show+showCall...[$NL]]
        }

        [$show...[$NL]]
    }
end

def type(process & view & shortcut)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.Display;
    import org.monet.metamodel.internal.TaskOrderDefinition;
    import org.monet.space.kernel.model.Node;
    import org.monet.space.kernel.model.Task;
    import io.intino.goros.unit.box.ui.DisplayProvider;
    import io.intino.goros.unit.box.ui.displays.templates.TaskOrderTemplate;

    public class $definition+firstUpperCase$name+firstUpperCase~ViewTemplate extends Abstract$definition+firstUpperCase$name+firstUpperCase~ViewTemplate<$boxName+firstUpperCase~Box> {
        private Task task;
        private boolean readonly = true;

        public $definition+firstUpperCase$name+firstUpperCase~ViewTemplate($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $definition+firstUpperCase$name+firstUpperCase~ViewTemplate task(Task task) {
            this.task = task;
            return this;
        }

        public $definition+firstUpperCase$name+firstUpperCase~ViewTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public boolean editing() {
            return !readonly;
        }

        @Override
        public void init() {
            super.init();
            [$show+initCall...[$NL]]
        }

        @Override
        public void refresh() {
            super.refresh();
            if (task == null) return;
            refreshView();
        }

        private void refreshView() {
            org.monet.space.kernel.model.Node node = task.getShortcutInstance("$shortcut");
            [$show+hideCall...[$NL]]
            if (node == null) return;
            org.monet.metamodel.NodeDefinition definition = node.getDefinition();
            [$show+showCall...[$NL]]
        }

        [$show...[$NL]]
    }
end

def type(process)
    package $package.$module+lowerCase.box.ui.displays.templates;

    import $package.$module+lowerCase.box.$boxName+firstUpperCase~Box;
    import org.monet.space.kernel.model.Task;
    import io.intino.goros.unit.box.ui.datasources.TaskListDatasource.Inbox;

    public class $name+firstUpperCase~Template extends Abstract$name+firstUpperCase~Template<$boxName+firstUpperCase~Box> {
        private Task task;
        private Inbox inbox;

        public $name+firstUpperCase~Template($boxName+firstUpperCase~Box box) {
            super(box);
        }

        public $name+firstUpperCase~Template task(Task task) {
            this.task = task;
            return this;
        }

        public $name+firstUpperCase~Template inbox(Inbox inbox) {
            this.inbox = inbox;
            return this;
        }

        public void open(String id) {
            task(io.intino.goros.unit.util.LayerHelper.taskLayer().loadTask(id));
            refresh();
        }

        @Override
        public void refresh() {
            super.refresh();
            if (task == null) return;
            refreshHeader();
            refreshContent();
        }

        private void refreshHeader() {
            label.value(task.getLabel());
            tasks.address(p -> p.replace(":folder", "default"));
            tasks.visible(inbox == Inbox.TaskBoard);
            myTasks.address(p -> p.replace(":folder", "default"));
            myTasks.visible(inbox == Inbox.TaskTray);
        }

        private void refreshContent() {
            content.inbox(inbox);
            content.task(task);
            content.readonly(false);
            content.refresh();
            if (content.selectedView() == null) content.selectDefaultView();
        }
    }
end

def type(display)
    if (node.getDefinition().getCode().equals("$code") && (view == null || view.equals("$viewCode"))) {
        $package.$module+lowerCase.box.ui.displays.templates.$name+firstUpperCase~$viewName+firstUpperCase~ViewTemplate result = new $package.$module+lowerCase.box.ui.displays.templates.$name+firstUpperCase~$viewName+firstUpperCase~ViewTemplate(box());
        result.node(node);
        result.readonly(false);
        return result;
    }
end

def type(view) trigger(initCall)
    $name+firstLowerCase~View.onShow(e -> refresh$name+firstUpperCase~View());
end

def type(view) trigger(refreshCall)
    if ($name+firstLowerCase~View.isVisible()) refresh$name+firstUpperCase~View();
end

def type(view & shortcut) trigger(refreshSelectorCall)
    if (task.getShortcutInstance("$shortcut") != null) viewSelector.showOption("$name+firstLowerCase");
    else viewSelector.hideOption("$name+firstLowerCase");
end

def type(view & target) trigger(refreshSelectorCall)
    if (task.getTarget() != null) viewSelector.showOption("$name+firstLowerCase");
    else viewSelector.hideOption("$name+firstLowerCase");
end

def type(view) trigger(refreshViewMethod)
    private void refresh$name+firstUpperCase~View() {
        if (task == null) return;
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.task(task);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.readonly(readonly);
        $name+firstLowerCase~View.$name+firstLowerCase~ViewStamp.refresh();
    }
end

def type(view & shortcut) trigger(refreshView)
    private void refresh$name+firstUpperCase~View() {
        if (task == null) return;
        org.monet.space.kernel.model.Node node = task.getShortcutInstance("$shortcut");
        if (node == null) return;
        org.monet.metamodel.NodeDefinition definition = node.getDefinition();
        [$show...[$NL]]
    }
end

def type(view & shortcut)
end

def type(show) trigger(initCall)
    $definitionName+firstLowerCase$viewName+firstUpperCase~Block.onShow(e -> refresh$definitionName+firstUpperCaseCase$viewName+firstUpperCase());
end

def type(show) trigger(hideCall)
    $definitionName+firstLowerCase$viewName+firstUpperCase~Block.hide();
end

def type(show) trigger(showCall)
    if (definition.getCode().equals("$definitionCode")) $definitionName+firstLowerCase$viewName+firstUpperCase~Block.show();
end

def type(show)
    private void refresh$definitionName+firstUpperCase$viewName+firstUpperCase() {
        $definitionName+firstLowerCase$viewName+firstUpperCase~Block.$definitionName+firstLowerCase$viewName+firstUpperCase~Stamp.node(task.getShortcutInstance("$shortcut"));
        $definitionName+firstLowerCase$viewName+firstUpperCase~Block.$definitionName+firstLowerCase$viewName+firstUpperCase~Stamp.readonly(readonly);
        $definitionName+firstLowerCase$viewName+firstUpperCase~Block.$definitionName+firstLowerCase$viewName+firstUpperCase~Stamp.show();
        $definitionName+firstLowerCase$viewName+firstUpperCase~Block.$definitionName+firstLowerCase$viewName+firstUpperCase~Stamp.refresh();
    }
end
