package io.intino.goros.modernizing.monet.renderers.templates.konos;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class UITemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(allTypes("ui")).output(literal("dsl Konos\n\n")).output(expression().output(placeholder("definition", "use").multiple("\n"))).output(literal("\nuse Tasks\nuse Theme\n\nService ")).output(placeholder("module", "firstUpperCase")).output(literal("Elements as UI(port=\"{port}\", title=\"")).output(placeholder("title")).output(literal("\", favicon = \"")).output(placeholder("favicon")).output(literal("\")\n    googleApiKey = \"{mobile-google-api-key}\"\n\n\tAuthentication(by = \"\")\n    Use(package = \"io.intino.goros.unit\", name = \"Unit\", service = \"UnitElements\") goros\n\n    Resource(path = \"/\") home as Page(AppTemplate) Main Confidential\n    Resource(path = \"/error\") error as Page(ErrorTemplate) Confidential\n    Resource(path = \"/mistareas/vista/:folder\") taskTray as Page(AppTemplate) Confidential\n    Resource(path = \"/tareas/vista/:folder\") taskBoard as Page(AppTemplate) Confidential\n    Resource(path = \"/elemento/:name/:mode\") singleton as Page(AppTemplate) Confidential\n    Resource(path = \"/instancia/:name/:id/:view/:mode\") instance as Page(AppTemplate) Confidential\n    Resource(path = \"/tarea/:name/:inbox/:task\") task as Page(AppTemplate) Confidential\n    Resource(path = \"/permisos\") roles as Page(AppTemplate) Confidential\n    Resource(path = \"/desechos\") trash as Page(AppTemplate) Confidential\n    Resource(path = \"/noticias\") news as Page(AppTemplate) Confidential\n\nTemplate(layout=Horizontal Flexible) AppTemplate as Relative(height=100%,width=100%)\n    Block drawer as Drawer(variant=PersistentAndMini) Absolute(width=200px)\n        Block(layout=Horizontal EndJustified Center) as Absolute(height=49px)\n            MaterialIconButton(title=\"open menu\", icon=\"ChevronRight\", format=airMenuRight smallAirTop) as OpenDrawer(drawer=drawer)\n            MaterialIconButton(title=\"minimize\", icon=\"ChevronLeft\", format=airMenuRight smallAirTop) as CloseDrawer(drawer=drawer)\n        Divider\n        ")).output(expression().output(placeholder("definition", "declaration").multiple("\n"))).output(literal("\n        Block(layout=Horizontal Center, visible=false) dashboard > MaterialIconButton(title=\"Cuadro de mando\", icon=\"Timeline\", format=black middleAirLeft middleAirRight minDrawerButtonSize) as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.singleton); Link(title=\"Cuadro de mando\") as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.singleton)\n        Divider\n        Block(layout=Horizontal Center, visible=false) roles > MaterialIconButton(title=\"Permisos\", icon=\"People\", format=black middleAirLeft middleAirRight minDrawerButtonSize) as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.roles); Link(title=\"Permisos\") as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.roles)\n        Block(layout=Horizontal Center, visible=false) taskTray as Badge(max=99, value=0, format=badgeBlock) > MaterialIconButton(title=\"Mis tareas\", icon=\"HowToReg\", format=black middleAirLeft middleAirRight minDrawerButtonSize) taskTrayIconLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.taskTray); Link(title=\"Mis tareas\") taskTrayLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.taskTray)\n        Block(layout=Horizontal Center, visible=false) taskBoard as Badge(max=99, value=0, format=badgeBlock) > MaterialIconButton(title=\"Tareas\", icon=\"PlaylistAddCheck\", format=black middleAirLeft middleAirRight minDrawerButtonSize) taskBoardIconLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.taskBoard); Link(title=\"Tareas\") taskBoardLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.taskBoard)\n        Block(layout=Horizontal Center, visible=false) news as Badge(max=99, value=0, format=badgeBlock) > MaterialIconButton(title=\"Noticias\", icon=\"Receipt\", format=black middleAirLeft middleAirRight minDrawerButtonSize) newsIconLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.news); Link(title=\"Noticias\") newsLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.news)\n        Block(layout=Horizontal Center, visible=false) trash > MaterialIconButton(title=\"Papelera\", icon=\"Delete\", format=black middleAirLeft middleAirRight minDrawerButtonSize) as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.trash); Link(title=\"Papelera\") as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.trash)\n\n    Block(layout=Vertical Flexible)\n        Header(color=\"white\", elevation=0, format=headerStyle) header as Absolute(height=55px)\n            TemplateStamp(template=HeaderTemplate)\n\n        Block(layout=Vertical Flexible CenterCenter) loading > Spinner(format=secondary)\n        Block(layout=Vertical Flexible CenterCenter, visible=false) forbiddenPage > Text(value=\"No tiene permisos en este servicio\", format=h4, translate=true)\n\n        Block(layout=Vertical Flexible CenterCenter, visible=false) updateRequiredPage\n            Text(value=\"Hay una actualización pendiente. No se puede acceder en estos momentos. Inténtelo más tarde.\", format=h4)\n            Link(title=\"Intentar de nuevo\", format=airTop) reloadPage as Action\n\n        Block(layout=Vertical Flexible, visible=false) dashboardPage as Conditional > TemplateStamp(template=DashboardTemplate) dashboardStamp\n        Block(layout=Vertical Flexible, visible=false) rolesPage as Conditional > InheritTemplateStamp(template=\"RolesTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) rolesStamp\n        Block(layout=Vertical Flexible, visible=false) taskTrayPage as Conditional > TemplateStamp(template=TaskTrayTemplate) taskTrayStamp\n        Block(layout=Vertical Flexible, visible=false) taskBoardPage as Conditional > TemplateStamp(template=TaskBoardTemplate) taskBoardStamp\n        Block(layout=Vertical Flexible, visible=false) newsPage as Conditional > InheritTemplateStamp(template=\"NewsTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) newsStamp\n        Block(layout=Vertical Flexible, visible=false) trashPage as Conditional > InheritTemplateStamp(template=\"TrashTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) trashStamp\n        ")).output(expression().output(placeholder("definition", "page").multiple("\n"))).output(literal("\n\n    Dialog(title=\"Sesión cerrada\") sessionClosedDialog as Modal\n        Block\n            Text(format=h6 airBottom, value=\"Se ha cerrado la sesión por inactividad o porque ha salido de su sesión en la federación\")\n            Block(layout=Horizontal CenterJustified, format=airBottom) > Button(title=\"Volver a cargar la página\") as OpenPage(page=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.home)\n\nTemplate(layout=Horizontal Flexible) HeaderTemplate\n    Block(layout=Horizontal Flexible Center)\n        Block(format=relative)\n            Link(title=\"\", format=homeLink) as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.home)\n            Image(value=\"images/logo.png\", format=minLogoSize) logo as Absolute(height=40px)\n        Block\n            Text(format=h3 bold) title\n            Text(format=body2) subtitle\n    Block(layout=Horizontal EndJustified Center)\n        MaterialIconButton(title=\"Aplicaciones\", icon=\"Apps\", format=black airRight) apps as OpenPopover(businessUnitsBlock)\n        User(mode=OnlyPhoto)\n\n        Block(format=air autoOverflow) businessUnitsBlock as Popover Absolute(width=400px, height=300px)\n            InheritTemplateStamp(template=\"BusinessUnitsTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) businessUnitsStamp\n\nTemplate(layout=Horizontal Flexible) DashboardTemplate\n    Text(value=\"Cuadro Mando\")\n\nTemplate(layout=Vertical Flexible) ErrorTemplate as Relative(height=100%,width=100%)\n    Block(layout=Vertical CenterCenter, format=grey) as Relative(height=100%,width=100%)\n        Block(format=visible) as Absolute(width=400px, height=200px) Paper\n            Block(layout=Vertical Flexible CenterJustified, spacing=DP16, format=relative) as Relative(height=100%)\n                Block(layout=Vertical CenterCenter)\n                    Image(value=\"images/logo.png\")\n                    Text(value=\"No tiene permisos para acceder\", format=h4 airTop)\n            Block\n                Divider\n                Button(title=\"Cerrar sesión\") logoutButton as Action")));
		rules.add(rule().condition(all(allTypes("definition", "index"), trigger("use"))));
		rules.add(rule().condition(all(allTypes("definition", "source"), trigger("use"))));
		rules.add(rule().condition(all(allTypes("definition"), trigger("use"))).output(literal("use ")).output(placeholder("name", "firstUpperCase")));
		rules.add(rule().condition(all(allTypes("definition", "container", "environment"), trigger("declaration"))).output(literal("Block(layout=Horizontal Center, visible=false) ")).output(placeholder("name", "firstLowerCase")).output(literal(" > AvatarIconButton(title=\"")).output(placeholder("label")).output(literal("\", color=\"black\", highlight=Fill, format=black middleAirLeft middleAirRight minDrawerButtonSize) ")).output(placeholder("name", "firstLowerCase")).output(literal("IconLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.")).output(placeholder("resourceType")).output(literal("); Link(title=\"")).output(placeholder("label")).output(literal("\") ")).output(placeholder("name", "firstLowerCase")).output(literal("Link as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.")).output(placeholder("resourceType")).output(literal(")")));
		rules.add(rule().condition(all(allTypes("definition", "desktop"), trigger("declaration"))).output(literal("Block(layout=Horizontal Center, visible=false) ")).output(placeholder("name", "firstLowerCase")).output(literal(" > AvatarIconButton(title=\"")).output(placeholder("label")).output(literal("\", color=\"black\", highlight=Fill, format=black middleAirLeft middleAirRight minDrawerButtonSize) ")).output(placeholder("name", "firstLowerCase")).output(literal("IconLink as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.")).output(placeholder("resourceType")).output(literal("); Link(title=\"")).output(placeholder("label")).output(literal("\") ")).output(placeholder("name", "firstLowerCase")).output(literal("Link as Action Addressable(")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.")).output(placeholder("resourceType")).output(literal(")")));
		rules.add(rule().condition(all(allTypes("definition"), trigger("declaration"))));
		rules.add(rule().condition(all(allTypes("definition", "index"), trigger("page"))));
		rules.add(rule().condition(all(allTypes("definition", "source"), trigger("page"))).output(literal("Block(layout=Vertical Flexible, visible=false) ")).output(placeholder("name", "firstLowerCase")).output(literal("Page as Conditional > InheritTemplateStamp(template=\"SourceTemplate\", owner=")).output(placeholder("module", "firstUpperCase")).output(literal("Elements.goros) ")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp")));
		rules.add(rule().condition(all(allTypes("definition"), trigger("page"))).output(literal("Block(layout=Vertical Flexible, visible=false) ")).output(placeholder("name", "firstLowerCase")).output(literal("Page as Conditional > TemplateStamp(template=")).output(placeholder("name", "firstUpperCase")).output(literal("Template) ")).output(placeholder("name", "firstLowerCase")).output(literal("Stamp")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}