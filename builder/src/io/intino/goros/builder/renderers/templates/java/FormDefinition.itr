def type(form & embedded)
    package $package.box.ui.displays.templates;

    import $package.box.CoordinacionBox;
    import org.monet.space.kernel.model.Node;
    import io.intino.goros.util.DisplayHelper;

    import java.util.List;

    public class $name+firstUpperCase~EmbeddedTemplate extends Abstract$name+firstUpperCase~EmbeddedTemplate<$module+firstUpperCase~Box> {
        private Node node;
        private boolean readonly = false;

        public $name+firstUpperCase~EmbeddedTemplate($module+firstUpperCase~Box box) {
            super(box);
        }

        public $name+firstUpperCase~EmbeddedTemplate node(Node node) {
            this.node = node;
            return this;
        }

        public $name+firstUpperCase~EmbeddedTemplate readonly(boolean readonly) {
            this.readonly = readonly;
            return this;
        }

        public String selectedView() {
            List<String> selection = viewSelector.selection();
            return selection.size() > 0 ? selection.get(0) : null;
        }

        public void selectDefaultView() {
            DisplayHelper.selectDefaultView(viewSelector, node);
        }

        @Override
        public void init() {
            super.init();
            initToolbar();
            initViews();
        }

        @Override
        public void refresh() {
            super.refresh();
            refreshToolbar();
            refreshView();
        }

        private void refreshToolbar() {
            edit.title(readonly ? "Editar" : "Finalizar ediciÃ³n");
            edit.visible(!node.getDefinition().isReadonly());
        }

        private void refreshView() {
            [$view+refreshCall...[$NL]]
        }

        private void initToolbar() {
            edit.onExecute(e -> toggleEdition());
        }

        private void initViews() {
            [$view+initCall...[$NL]]
        }

        [$view+refreshMethod...[$NL]]

        private void toggleEdition() {
            readonly(!readonly);
            refresh();
        }
    }
end

def type(form & singleton)
    package $package.box.ui.displays.templates;

    import $package.box.CoordinacionBox;
    import org.monet.space.kernel.model.Node;
    import io.intino.goros.util.NodeHelper;

    public class $name+firstUpperCase~Template extends Abstract$name+firstUpperCase~Template<$module+firstUpperCase~Box> {
        private Node node;
        private boolean readonly = true;

        public $name+firstUpperCase~Template($module+firstUpperCase~Box box) {
            super(box);
        }

        @Override
        public void init() {
            super.init();
            node = NodeHelper.singleton("$code");
            content.node(node);
            content.readonly(readonly);
            content.refresh();
            if (content.selectedView() == null) content.selectDefaultView();
        }
    }
end

def type(form)
    package $package.box.ui.displays.templates;

    import $package.box.$module+firstUpperCase~Box;
    import org.monet.space.kernel.components.ComponentPersistence;
    import org.monet.space.kernel.model.Node;

    public class $name+firstUpperCase~Template extends Abstract$name+firstUpperCase~Template<$module+firstUpperCase~Box> {
        private Node node;

        public $name+firstUpperCase~Template($module+firstUpperCase~Box box) {
            super(box);
        }

        public $name+firstUpperCase~Template node(Node node) {
            this.node = node;
            return this;
        }

        public void open(String id) {
            node(ComponentPersistence.getInstance().getNodeLayer().loadNode(id));
            refresh();
        }

        @Override
        public void refresh() {
            super.refresh();
            if (node == null) return;
            refreshHeader(node);
            refreshContent(node);
        }

        private void refreshHeader(Node node) {
            label.value(node.getLabel());
        }

        private void refreshContent(Node node) {
            content.node(node);
            content.refresh();
            if (content.selectedView() == null) content.selectDefaultView();
        }
    }
end

def type(field & select & multiple) trigger(declaration)
    private FieldMultiple<Field$type+firstUpperCase~,$valueType> $name+firstLowerCase~Field;
    private io.intino.goros.box.ui.datasources.FieldSelectDatasource $name+firstLowerCase~Source;
end

def type(field & multiple) trigger(declaration)
    private FieldMultiple<Field$type+firstUpperCase~,$valueType> $name+firstLowerCase~Field;
end

def type(field & select) trigger(declaration)
    private Field$type+firstUpperCase $name+firstLowerCase~Field;
    private io.intino.goros.box.ui.datasources.FieldSelectDatasource $name+firstLowerCase~Source;
end

def type(field) trigger(declaration)
    private Field$type+firstUpperCase $name+firstLowerCase~Field;
end

def type(field & select) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
    $name+firstLowerCase~Source = new io.intino.goros.box.ui.datasources.FieldSelectDatasource(box().goros(), session(), node, $name+firstLowerCase~Field);
end

def type(field & link) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
    $name+firstLowerCase~.source(new io.intino.goros.box.ui.datasources.FieldLinkDatasource(box().goros(), session(), Dictionary.getInstance().getIndexDefinition("$index")));
end

def type(field) trigger(update)
    $name+firstLowerCase~Field = datasource.getField("$code");
end

def type(field & text & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(e.item())));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & text & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll());
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & text) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(e.value())));
end

def type(field & text) trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & number & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(new org.monet.bpi.types.Number((Double) e.item()))));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & number & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().mapToDouble(n -> n != null ? n.doubleValue() : 0).boxed().collect(toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & number) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(new org.monet.bpi.types.Number((Double) e.value()))));
end

def type(field & number) trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get() != null ? $name+firstLowerCase~Field.get().doubleValue() : null);
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & boolean) trigger(init)
    $name+firstLowerCase~.onToggle(e -> save(b -> $name+firstLowerCase~Field.set(e.state() == ToggleEvent.State.On)));
end

def type(field & boolean) trigger(refresh)
    $name+firstLowerCase~.state($name+firstLowerCase~Field.get() ? ToggleEvent.State.On : ToggleEvent.State.Off);
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & date & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(NodeHelper.dateOf(e.item()))));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & date & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? f.getValue().toInstant() : null).collect(toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & date) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(NodeHelper.dateOf(e.value()))));
end

def type(field & date) trigger(refresh)
    $name+firstLowerCase~.value(NodeHelper.instantOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & memo & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(e.item())));
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & memo & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll());
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & memo) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> $name+firstLowerCase~Field.set(e.value())));
end

def type(field & memo) trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & serial) trigger(init)
end

def type(field & serial) trigger(refresh)
    $name+firstLowerCase~.value($name+firstLowerCase~Field.get());
    $name+firstLowerCase~.readonly(true);
end

def type(field & file & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(NodeHelper.fileOf(e.item())));
        ((Content.$name+firstUpperCase~.FileEditable)e.component()).value(NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.getAsField(e.index())));
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & file & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? NodeHelper.alexandriaFileOf(f) : null).collect(toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & file) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.set(NodeHelper.fileOf(e.value())));
        $name+firstLowerCase~.value(NodeHelper.alexandriaFileOf($name+firstLowerCase~Field));
    });
end

def type(field & file) trigger(refresh)
    $name+firstLowerCase~.value(NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & picture & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(NodeHelper.pictureOf(e.item())));
        ((Content.$name+firstUpperCase~.ImageEditable)e.component()).value(NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.getAsField(e.index())));
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & picture & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~.addAll($name+firstLowerCase~Field.getAll().stream().map(f -> f != null ? NodeHelper.alexandriaFileOf(f) : null).collect(toList()));
    $name+firstLowerCase~.onAdd(e -> save(b -> $name+firstLowerCase~Field.addNew(e.item())));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & picture) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.set(NodeHelper.pictureOf(e.value())));
        $name+firstLowerCase~.value(NodeHelper.alexandriaFileOf($name+firstLowerCase~Field));
    });
end

def type(field & picture) trigger(refresh)
    $name+firstLowerCase~.value(NodeHelper.alexandriaFileOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & check) trigger(init)
    $name+firstLowerCase~.onSelect(e -> save(b -> $name+firstLowerCase~Field.set(NodeHelper.checkListOf($name+firstLowerCase~Field.get(), e.selection()))));
end

def type(field & check) trigger(refresh)
    $name+firstLowerCase~.clear();
    new io.intino.goros.box.ui.datasources.FieldCheckDatasource(box().goros(), session(), node, $name+firstLowerCase~Field).items().forEach(term -> $name+firstLowerCase~.add(term.getLabel()));
    $name+firstLowerCase~.selection(NodeHelper.selectionOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & link & multiple) trigger(init)
    $name+firstLowerCase~.valueProvider(DisplayHelper.linkValueProvider());
    $name+firstLowerCase~.onSelect(e -> save(b -> {
        $name+firstLowerCase~Field.removeAll();
        $name+firstLowerCase~Field.addNewAll(NodeHelper.linksOf(e.selection()));
    }));
end

def type(field & link & multiple) trigger(refresh)
    $name+firstLowerCase~Multiple.selection(NodeHelper.nodeItemsOf($name+firstLowerCase~MultipleField.getAll()));
    $name+firstLowerCase~Multiple.readonly(readonly);
end

def type(field & link) trigger(init)
    $name+firstLowerCase~.valueProvider(DisplayHelper.linkValueProvider());
    $name+firstLowerCase~.onSelect(e -> save(b -> $name+firstLowerCase~Field.set(NodeHelper.linkOf(e.selection()))));
end

def type(field & link) trigger(refresh)
    if ($name+firstLowerCase~Field.get() != null) $name+firstLowerCase~.selection(NodeHelper.nodeItemOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & select & multiple) trigger(init)
    $name+firstLowerCase~.onSelect(e -> save(b -> {
        $name+firstLowerCase~Field.removeAll();
        $name+firstLowerCase~Field.addNewAll(NodeHelper.termsOf($name+firstLowerCase~Source, e.selection()));
    }));
end

def type(field & select & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~Source.items().forEach(term -> $name+firstLowerCase~.add(term.getLabel()));
    $name+firstLowerCase~.selection(NodeHelper.selectionOf($name+firstLowerCase~Field.getAll()));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & select & inline) trigger(init)
    $name+firstLowerCase~.onSelect(e -> save(b -> $name+firstLowerCase~Field.set(NodeHelper.termOf($name+firstLowerCase~Source, e.selection()))));
end

def type(field & select & inline) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~Source.items().forEach(term -> $name+firstLowerCase~.add(term.getLabel()));
    $name+firstLowerCase~.selection(NodeHelper.selectionOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & select) trigger(init)
    $name+firstLowerCase~.onSelect(e -> save(b -> $name+firstLowerCase~Field.set(NodeHelper.termOf($name+firstLowerCase~Source, e.selection()))));
end

def type(field & select) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~Source.items().forEach(term -> $name+firstLowerCase~.add(term.getLabel()));
    $name+firstLowerCase~.selection(NodeHelper.selectionOf($name+firstLowerCase~Field.get()));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & composite & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> {});
        (($definition+firstUpperCase$name+firstUpperCase~Template)e.component()).field($name+firstLowerCase~Field.getAsField(e.index())).refresh();
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & composite & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~Field.getAllFields().forEach(field -> {
        $definition+firstUpperCase$name+firstUpperCase~Template display = $name+firstLowerCase~.add().field(field).readonly(this.readonly);
        display.refresh();
    });
    $name+firstLowerCase~.onAdd(e -> save(b -> {
        FieldComposite fieldComposite = $name+firstLowerCase~Field.addNew();
        $definition+firstUpperCase$name+firstUpperCase~Template display = e.component();
        display.field(fieldComposite);
        display.readonly(readonly);
        display.refresh();
    }));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & composite) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> {}));
end

def type(field & composite) trigger(refresh)
    $name+firstLowerCase~.field($name+firstLowerCase~Field);
    $name+firstLowerCase~.readonly(readonly);
    $name+firstLowerCase~.refresh();
end

def type(field & node & multiple) trigger(init)
    $name+firstLowerCase~.onChange(e -> {
        save(b -> $name+firstLowerCase~Field.getAsField(e.index()).set(((FieldNode)e.item()).get()));
        ((io.intino.goros.box.ui.displays.templates.FieldNodeTemplate)e.component()).field($name+firstLowerCase~Field.getAsField(e.index())).refresh();
    });
    $name+firstLowerCase~.onRemove(e -> save(b -> $name+firstLowerCase~Field.remove(e.index())));
end

def type(field & node & multiple) trigger(refresh)
    $name+firstLowerCase~.clear();
    $name+firstLowerCase~.onAdd(null);
    $name+firstLowerCase~Field.getAllFields().forEach(field -> {
        io.intino.goros.box.ui.displays.templates.FieldNodeTemplate display = $name+firstLowerCase~.add().field(field).readonly(this.readonly).displayProvider(this);
        display.refresh();
    });
    $name+firstLowerCase~.onAdd(e -> save(b -> {
        FieldNode fieldNode = $name+firstLowerCase~Field.addNew();
        io.intino.goros.box.ui.displays.templates.FieldNodeTemplate display = e.component();
        display.field(fieldNode);
        display.displayProvider(this);
        display.readonly(readonly);
        display.refresh();
    }));
    $name+firstLowerCase~.readonly(readonly);
end

def type(field & node) trigger(init)
    $name+firstLowerCase~.onChange(e -> save(b -> {}));
end

def type(field & node) trigger(refresh)
    $name+firstLowerCase~.field($name+firstLowerCase~Field);
    $name+firstLowerCase~.readonly(readonly);
    $name+firstLowerCase~.displayProvider(this);
    $name+firstLowerCase~.refresh();
end

def type(compositeView)
    package $package.box.ui.displays.templates;

    import $package.box.$module+firstUpperCase~Box;
    import io.intino.alexandria.ui.displays.events.ChangeEvent;
    import io.intino.alexandria.ui.displays.events.ChangeListener;
    import org.monet.bpi.FieldComposite;
    import org.monet.bpi.FieldText;
    import io.intino.goros.box.ui.datasources.FieldCompositeDatasource;

    import java.util.function.Consumer;

    public class $definition+firstUpperCase~$name+firstUpperCase~Template extends Abstract$definition+firstUpperCase~$name+firstUpperCase~Template<$module+firstUpperCase~Box>[ implements $implements] {
        private FieldComposite field;
        private boolean readonly;
        private ChangeListener changeListener;
        [$field+declaration...[$NL]]

        public $definition+firstUpperCase~$name+firstUpperCase~Template(CoordinacionBox box) {
            super(box);
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template readonly(boolean readonly) {
            this.readonly = readonly;
            [$editable+readonly]
            return this;
        }

        [$editable]

        public $definition+firstUpperCase~$name+firstUpperCase~Template field(FieldComposite field) {
            this.field = field;
            updateFields();
            return this;
        }

        public $definition+firstUpperCase~$name+firstUpperCase~Template onChange(ChangeListener listener) {
            this.changeListener = listener;
            return this;
        }

        @Override
        public void init() {
            super.init();
            [$field+init...[$NL]]
        }

        @Override
        public void refresh() {
            super.refresh();
            [$field+refresh...[$NL]]
        }

        private void notifyChange(Consumer<Boolean> consumer) {
            consumer.accept(true);
            changeListener.accept(new ChangeEvent(this, field));
            updateFields();
        }

        private void updateFields() {
            FieldCompositeDatasource datasource = new FieldCompositeDatasource(box().goros(), session(), field);
            [$field+update...[$NL]]
        }
    }
end

def type(display)
    if (node.getDefinition().getCode().equals("$code") && view.getCode().equals("$viewCode")) {
        $package.box.ui.displays.templates.$name+firstUpperCase~$viewName~ViewTemplate result = new $package.box.ui.displays.templates.$name+firstUpperCase~$viewName~ViewTemplate(box());
        result.node(node);
        result.readonly(false);
        return result;
    }
end

def type(editable) trigger(readonly)
    if (field != null) refresh();
end

def type(editable)
    @Override
    public boolean readonly() {
        return readonly;
    }

    @Override
    public void reload() {
        refresh();
    }
end